<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\Users\dprothero\Documents\GitHub\ngit\bin\NGit.Test.dll" total="2194" errors="20" failures="19" not-run="22" inconclusive="0" ignored="22" skipped="0" invalid="0" date="2012-07-07" time="13:13:58">
  <environment nunit-version="2.6.0.12051" clr-version="2.0.50727.5456" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="C:\Program Files (x86)\NUnit 2.6\bin" machine-name="PROWIN1" user="dprothero" user-domain="prowin1" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Assembly" name="C:\Users\dprothero\Documents\GitHub\ngit\bin\NGit.Test.dll" executed="True" result="Failure" success="False" time="98.730" asserts="0">
    <results>
      <test-suite type="Namespace" name="NGit" executed="True" result="Failure" success="False" time="98.729" asserts="0">
        <results>
          <test-suite type="TestFixture" name="AbbreviatedObjectIdTest" executed="True" result="Success" success="True" time="0.050" asserts="0">
            <results>
              <test-case name="NGit.AbbreviatedObjectIdTest.Test1_FromString" executed="True" result="Success" success="True" time="0.001" asserts="5" />
              <test-case name="NGit.AbbreviatedObjectIdTest.Test17_FromString" executed="True" result="Success" success="True" time="0.000" asserts="5" />
              <test-case name="NGit.AbbreviatedObjectIdTest.Test2_FromString" executed="True" result="Success" success="True" time="0.000" asserts="5" />
              <test-case name="NGit.AbbreviatedObjectIdTest.Test3_FromString" executed="True" result="Success" success="True" time="0.000" asserts="5" />
              <test-case name="NGit.AbbreviatedObjectIdTest.Test4_FromString" executed="True" result="Success" success="True" time="0.000" asserts="5" />
              <test-case name="NGit.AbbreviatedObjectIdTest.Test5_FromString" executed="True" result="Success" success="True" time="0.001" asserts="5" />
              <test-case name="NGit.AbbreviatedObjectIdTest.Test6_FromString" executed="True" result="Success" success="True" time="0.000" asserts="5" />
              <test-case name="NGit.AbbreviatedObjectIdTest.Test7_FromString" executed="True" result="Success" success="True" time="0.000" asserts="5" />
              <test-case name="NGit.AbbreviatedObjectIdTest.Test8_FromString" executed="True" result="Success" success="True" time="0.001" asserts="5" />
              <test-case name="NGit.AbbreviatedObjectIdTest.Test9_FromString" executed="True" result="Success" success="True" time="0.000" asserts="5" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestEmpty_FromByteArray" executed="True" result="Success" success="True" time="0.001" asserts="4" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestEmpty_FromString" executed="True" result="Success" success="True" time="0.000" asserts="4" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestEquals_Full" executed="True" result="Success" success="True" time="0.000" asserts="4" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestEquals_Short" executed="True" result="Success" success="True" time="0.001" asserts="4" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestFull_FromByteArray" executed="True" result="Success" success="True" time="0.000" asserts="7" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestFull_FromString" executed="True" result="Success" success="True" time="0.001" asserts="7" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestIsId" executed="True" result="Success" success="True" time="0.000" asserts="11" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestNotEquals_DiffLength" executed="True" result="Success" success="True" time="0.001" asserts="2" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestNotEquals_SameLength" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestPrefixCompare_1" executed="True" result="Success" success="True" time="0.001" asserts="6" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestPrefixCompare_17" executed="True" result="Success" success="True" time="0.000" asserts="6" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestPrefixCompare_7" executed="True" result="Success" success="True" time="0.001" asserts="6" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestPrefixCompare_8" executed="True" result="Success" success="True" time="0.000" asserts="6" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestPrefixCompare_9" executed="True" result="Success" success="True" time="0.001" asserts="6" />
              <test-case name="NGit.AbbreviatedObjectIdTest.TestPrefixCompare_Full" executed="True" result="Success" success="True" time="0.001" asserts="6" />
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Api" executed="True" result="Failure" success="False" time="32.312" asserts="0">
            <results>
              <test-suite type="TestFixture" name="AddCommandTest" executed="True" result="Success" success="True" time="0.646" asserts="0">
                <results>
                  <test-case name="NGit.Api.AddCommandTest.TestAddExistingSingleBinaryFile" executed="True" result="Success" success="True" time="0.030" asserts="4" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddExistingSingleFile" executed="True" result="Success" success="True" time="0.020" asserts="2" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddExistingSingleFileInSubDir" executed="True" result="Success" success="True" time="0.021" asserts="2" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddExistingSingleFileTwice" executed="True" result="Success" success="True" time="0.031" asserts="2" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddExistingSingleFileTwiceWithCommit" executed="True" result="Success" success="True" time="0.037" asserts="2" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddExistingSingleMediumSizeFileWithNewLine" executed="True" result="Success" success="True" time="0.032" asserts="4" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddExistingSingleSmallFileWithNewLine" executed="True" result="Success" success="True" time="0.029" asserts="4" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddFolder" executed="True" result="Success" success="True" time="0.023" asserts="2" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddIgnoredFile" executed="True" result="Success" success="True" time="0.023" asserts="2" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddNonExistingSingleFile" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddNothing" executed="True" result="Success" success="True" time="0.013" asserts="1" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddRemovedCommittedFile" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddRemovedFile" executed="True" result="Success" success="True" time="0.021" asserts="2" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddTwoFiles" executed="True" result="Success" success="True" time="0.023" asserts="2" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddWholeRepo" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddWithConflicts" executed="True" result="Success" success="True" time="0.033" asserts="3" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddWithoutParameterUpdate" executed="True" result="Success" success="True" time="0.052" asserts="3" />
                  <test-case name="NGit.Api.AddCommandTest.TestAddWithParameterUpdate" executed="True" result="Success" success="True" time="0.047" asserts="3" />
                  <test-case name="NGit.Api.AddCommandTest.TestAssumeUnchanged" executed="True" result="Success" success="True" time="0.047" asserts="4" />
                  <test-case name="NGit.Api.AddCommandTest.TestExecutableRetention" executed="True" result="Success" success="True" time="0.058" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ApplyCommandTest" executed="True" result="Failure" success="False" time="0.227" asserts="0">
                <results>
                  <test-case name="NGit.Api.ApplyCommandTest.TestAddA1" executed="True" result="Error" success="False" time="0.013" asserts="1">
                    <failure>
                      <message><![CDATA[NGit.Errors.InvalidObjectIdException : Invalid id : de98044]]></message>
                      <stack-trace><![CDATA[at NGit.AbbreviatedObjectId.FromHexString(Byte[] bs, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 174
at NGit.AbbreviatedObjectId.FromString(Byte[] buf, Int32 offset, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 119
at NGit.Patch.FileHeader.ParseIndexLine(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\FileHeader.cs:line 730
at NGit.Patch.FileHeader.ParseGitHeaders(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\FileHeader.cs:line 584
at NGit.Patch.Patch.ParseDiffGit(Byte[] buf, Int32 start, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 260
at NGit.Patch.Patch.ParseFile(Byte[] buf, Int32 c, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 202
at NGit.Patch.Patch.Parse(Byte[] buf, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 180
at NGit.Patch.Patch.Parse(InputStream is) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 143
at NGit.Api.ApplyCommand.Call() in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Api\ApplyCommand.cs:line 113
at NGit.Api.ApplyCommandTest.Init(String name, Boolean preExists, Boolean postExists) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 80
at NGit.Api.ApplyCommandTest.TestAddA1() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 88
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Api.ApplyCommandTest.TestAddA2" executed="True" result="Error" success="False" time="0.014" asserts="1">
                    <failure>
                      <message><![CDATA[NGit.Errors.InvalidObjectIdException : Invalid id : de98044]]></message>
                      <stack-trace><![CDATA[at NGit.AbbreviatedObjectId.FromHexString(Byte[] bs, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 174
at NGit.AbbreviatedObjectId.FromString(Byte[] buf, Int32 offset, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 119
at NGit.Patch.FileHeader.ParseIndexLine(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\FileHeader.cs:line 730
at NGit.Patch.FileHeader.ParseGitHeaders(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\FileHeader.cs:line 584
at NGit.Patch.Patch.ParseDiffGit(Byte[] buf, Int32 start, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 260
at NGit.Patch.Patch.ParseFile(Byte[] buf, Int32 c, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 202
at NGit.Patch.Patch.Parse(Byte[] buf, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 180
at NGit.Patch.Patch.Parse(InputStream is) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 143
at NGit.Api.ApplyCommand.Call() in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Api\ApplyCommand.cs:line 113
at NGit.Api.ApplyCommandTest.Init(String name, Boolean preExists, Boolean postExists) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 80
at NGit.Api.ApplyCommandTest.TestAddA2() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 99
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Api.ApplyCommandTest.TestDeleteD" executed="True" result="Error" success="False" time="0.033" asserts="1">
                    <failure>
                      <message><![CDATA[NGit.Errors.InvalidObjectIdException : Invalid id : 0000000]]></message>
                      <stack-trace><![CDATA[at NGit.AbbreviatedObjectId.FromHexString(Byte[] bs, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 174
at NGit.AbbreviatedObjectId.FromString(Byte[] buf, Int32 offset, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 119
at NGit.Patch.FileHeader.ParseIndexLine(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\FileHeader.cs:line 730
at NGit.Patch.FileHeader.ParseGitHeaders(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\FileHeader.cs:line 584
at NGit.Patch.Patch.ParseDiffGit(Byte[] buf, Int32 start, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 260
at NGit.Patch.Patch.ParseFile(Byte[] buf, Int32 c, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 202
at NGit.Patch.Patch.Parse(Byte[] buf, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 180
at NGit.Patch.Patch.Parse(InputStream is) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 143
at NGit.Api.ApplyCommand.Call() in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Api\ApplyCommand.cs:line 113
at NGit.Api.ApplyCommandTest.Init(String name, Boolean preExists, Boolean postExists) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 80
at NGit.Api.ApplyCommandTest.TestDeleteD() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 110
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Api.ApplyCommandTest.TestModifyE" executed="True" result="Error" success="False" time="0.034" asserts="1">
                    <failure>
                      <message><![CDATA[System.ArgumentException : Illegal characters in path.]]></message>
                      <stack-trace><![CDATA[at System.IO.Path.CheckInvalidPathChars(String path)
at System.IO.Path.Combine(String path1, String path2)
at Sharpen.FilePath..ctor(String other, String child) in C:\Users\dprothero\Documents\GitHub\ngit\Sharpen\Sharpen\FilePath.cs:line 36
at Sharpen.FilePath..ctor(FilePath other, String child) in C:\Users\dprothero\Documents\GitHub\ngit\Sharpen\Sharpen\FilePath.cs:line 23
at NGit.Api.ApplyCommand.GetFile(String path, Boolean create) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Api\ApplyCommand.cs:line 191
at NGit.Api.ApplyCommand.Call() in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Api\ApplyCommand.cs:line 138
at NGit.Api.ApplyCommandTest.Init(String name, Boolean preExists, Boolean postExists) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 80
at NGit.Api.ApplyCommandTest.Init(String name) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 61
at NGit.Api.ApplyCommandTest.TestModifyE() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 133
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Api.ApplyCommandTest.TestModifyX" executed="True" result="Error" success="False" time="0.032" asserts="1">
                    <failure>
                      <message><![CDATA[System.ArgumentException : Illegal characters in path.]]></message>
                      <stack-trace><![CDATA[at System.IO.Path.CheckInvalidPathChars(String path)
at System.IO.Path.Combine(String path1, String path2)
at Sharpen.FilePath..ctor(String other, String child) in C:\Users\dprothero\Documents\GitHub\ngit\Sharpen\Sharpen\FilePath.cs:line 36
at Sharpen.FilePath..ctor(FilePath other, String child) in C:\Users\dprothero\Documents\GitHub\ngit\Sharpen\Sharpen\FilePath.cs:line 23
at NGit.Api.ApplyCommand.GetFile(String path, Boolean create) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Api\ApplyCommand.cs:line 191
at NGit.Api.ApplyCommand.Call() in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Api\ApplyCommand.cs:line 138
at NGit.Api.ApplyCommandTest.Init(String name, Boolean preExists, Boolean postExists) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 80
at NGit.Api.ApplyCommandTest.Init(String name) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 61
at NGit.Api.ApplyCommandTest.TestModifyX() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 144
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Api.ApplyCommandTest.TestModifyY" executed="True" result="Error" success="False" time="0.033" asserts="1">
                    <failure>
                      <message><![CDATA[System.ArgumentException : Illegal characters in path.]]></message>
                      <stack-trace><![CDATA[at System.IO.Path.CheckInvalidPathChars(String path)
at System.IO.Path.Combine(String path1, String path2)
at Sharpen.FilePath..ctor(String other, String child) in C:\Users\dprothero\Documents\GitHub\ngit\Sharpen\Sharpen\FilePath.cs:line 36
at Sharpen.FilePath..ctor(FilePath other, String child) in C:\Users\dprothero\Documents\GitHub\ngit\Sharpen\Sharpen\FilePath.cs:line 23
at NGit.Api.ApplyCommand.GetFile(String path, Boolean create) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Api\ApplyCommand.cs:line 191
at NGit.Api.ApplyCommand.Call() in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Api\ApplyCommand.cs:line 138
at NGit.Api.ApplyCommandTest.Init(String name, Boolean preExists, Boolean postExists) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 80
at NGit.Api.ApplyCommandTest.Init(String name) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 61
at NGit.Api.ApplyCommandTest.TestModifyY() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 155
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Api.ApplyCommandTest.TestModifyZ" executed="True" result="Error" success="False" time="0.033" asserts="1">
                    <failure>
                      <message><![CDATA[System.ArgumentException : Illegal characters in path.]]></message>
                      <stack-trace><![CDATA[at System.IO.Path.CheckInvalidPathChars(String path)
at System.IO.Path.Combine(String path1, String path2)
at Sharpen.FilePath..ctor(String other, String child) in C:\Users\dprothero\Documents\GitHub\ngit\Sharpen\Sharpen\FilePath.cs:line 36
at Sharpen.FilePath..ctor(FilePath other, String child) in C:\Users\dprothero\Documents\GitHub\ngit\Sharpen\Sharpen\FilePath.cs:line 23
at NGit.Api.ApplyCommand.GetFile(String path, Boolean create) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Api\ApplyCommand.cs:line 191
at NGit.Api.ApplyCommand.Call() in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Api\ApplyCommand.cs:line 138
at NGit.Api.ApplyCommandTest.Init(String name, Boolean preExists, Boolean postExists) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 80
at NGit.Api.ApplyCommandTest.Init(String name) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 61
at NGit.Api.ApplyCommandTest.TestModifyZ() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\ApplyCommandTest.cs:line 166
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Blame" executed="True" result="Success" success="True" time="0.207" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="BlameGeneratorTest" executed="True" result="Success" success="True" time="0.207" asserts="0">
                    <results>
                      <test-case name="NGit.Api.Blame.BlameGeneratorTest.TestBoundLineDelete" executed="True" result="Success" success="True" time="0.052" asserts="19" />
                      <test-case name="NGit.Api.Blame.BlameGeneratorTest.TestLinesAllDeletedShortenedWalk" executed="True" result="Success" success="True" time="0.066" asserts="7" />
                      <test-case name="NGit.Api.Blame.BlameGeneratorTest.TestRenamedBoundLineDelete" executed="True" result="Success" success="True" time="0.084" asserts="26" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="BlameCommandTest" executed="True" result="Success" success="True" time="0.692" asserts="0">
                <results>
                  <test-case name="NGit.Api.BlameCommandTest.TestDeleteMiddleLines" executed="True" result="Success" success="True" time="0.068" asserts="8" />
                  <test-case name="NGit.Api.BlameCommandTest.TestDeleteTrailingLines" executed="True" result="Success" success="True" time="0.066" asserts="6" />
                  <test-case name="NGit.Api.BlameCommandTest.TestEditAllLines" executed="True" result="Success" success="True" time="0.052" asserts="4" />
                  <test-case name="NGit.Api.BlameCommandTest.TestMiddleClearAllLines" executed="True" result="Success" success="True" time="0.067" asserts="5" />
                  <test-case name="NGit.Api.BlameCommandTest.TestMoveToOtherDir" executed="True" result="Success" success="True" time="0.090" asserts="10" />
                  <test-case name="NGit.Api.BlameCommandTest.TestRename" executed="True" result="Success" success="True" time="0.074" asserts="10" />
                  <test-case name="NGit.Api.BlameCommandTest.TestRenameInSubDir" executed="True" result="Success" success="True" time="0.082" asserts="10" />
                  <test-case name="NGit.Api.BlameCommandTest.TestSingleRevision" executed="True" result="Success" success="True" time="0.032" asserts="9" />
                  <test-case name="NGit.Api.BlameCommandTest.TestTwoRenames" executed="True" result="Success" success="True" time="0.093" asserts="7" />
                  <test-case name="NGit.Api.BlameCommandTest.TestTwoRevisions" executed="True" result="Success" success="True" time="0.052" asserts="8" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="BranchCommandTest" executed="True" result="Success" success="True" time="1.630" asserts="0">
                <results>
                  <test-case name="NGit.Api.BranchCommandTest.TestCreateAndList" executed="True" result="Success" success="True" time="0.093" asserts="10" />
                  <test-case name="NGit.Api.BranchCommandTest.TestCreateForce" executed="True" result="Success" success="True" time="0.098" asserts="5" />
                  <test-case name="NGit.Api.BranchCommandTest.TestCreateFromAnnotatetdTag" executed="True" result="Success" success="True" time="0.079" asserts="3" />
                  <test-case name="NGit.Api.BranchCommandTest.TestCreateFromCommit" executed="True" result="Success" success="True" time="0.082" asserts="4" />
                  <test-case name="NGit.Api.BranchCommandTest.TestCreateFromLightweightTag" executed="True" result="Success" success="True" time="0.075" asserts="2" />
                  <test-case name="NGit.Api.BranchCommandTest.TestCreationImplicitStart" executed="True" result="Success" success="True" time="0.072" asserts="1" />
                  <test-case name="NGit.Api.BranchCommandTest.TestDelete" executed="True" result="Success" success="True" time="0.118" asserts="5" />
                  <test-case name="NGit.Api.BranchCommandTest.TestListAllBranchesShouldNotDie" executed="True" result="Success" success="True" time="0.154" asserts="4" />
                  <test-case name="NGit.Api.BranchCommandTest.TestPullConfigLocalBranch" executed="True" result="Success" success="True" time="0.179" asserts="7" />
                  <test-case name="NGit.Api.BranchCommandTest.TestPullConfigRemoteBranch" executed="True" result="Success" success="True" time="0.195" asserts="10" />
                  <test-case name="NGit.Api.BranchCommandTest.TestPullConfigRenameLocalBranch" executed="True" result="Success" success="True" time="0.197" asserts="9" />
                  <test-case name="NGit.Api.BranchCommandTest.TestRenameLocalBranch" executed="True" result="Success" success="True" time="0.104" asserts="3" />
                  <test-case name="NGit.Api.BranchCommandTest.TestRenameRemoteTrackingBranch" executed="True" result="Success" success="True" time="0.165" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CheckoutCommandTest" executed="True" result="Success" success="True" time="0.877" asserts="0">
                <results>
                  <test-case name="NGit.Api.CheckoutCommandTest.TestCheckout" executed="True" result="Success" success="True" time="0.080" asserts="5" />
                  <test-case name="NGit.Api.CheckoutCommandTest.TestCheckoutCommit" executed="True" result="Success" success="True" time="0.070" asserts="4" />
                  <test-case name="NGit.Api.CheckoutCommandTest.TestCheckoutRemoteTrackingWithoutLocalBranch" executed="True" result="Success" success="True" time="0.183" asserts="3" />
                  <test-case name="NGit.Api.CheckoutCommandTest.TestCheckoutToNonExistingBranch" executed="True" result="Success" success="True" time="0.062" asserts="1" />
                  <test-case name="NGit.Api.CheckoutCommandTest.TestCheckoutWithConflict" executed="True" result="Success" success="True" time="0.064" asserts="4" />
                  <test-case name="NGit.Api.CheckoutCommandTest.TestCheckoutWithNonDeletedFiles" executed="True" result="Success" success="True" time="0.097" asserts="8" />
                  <test-case name="NGit.Api.CheckoutCommandTest.TestCreateBranchOnCheckout" executed="True" result="Success" success="True" time="0.076" asserts="2" />
                  <test-case name="NGit.Api.CheckoutCommandTest.TestDetachedHeadOnCheckout" executed="True" result="Success" success="True" time="0.080" asserts="3" />
                  <test-case name="NGit.Api.CheckoutCommandTest.TestSimpleCheckout" executed="True" result="Success" success="True" time="0.067" asserts="1" />
                  <test-case name="NGit.Api.CheckoutCommandTest.TestUpdateSmudgedEntries" executed="True" result="Success" success="True" time="0.083" asserts="11" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CherryPickCommandTest" executed="True" result="Success" success="True" time="0.733" asserts="0">
                <results>
                  <test-case name="NGit.Api.CherryPickCommandTest.TestCherryPick" executed="True" result="Success" success="True" time="0.164" asserts="7" />
                  <test-case name="NGit.Api.CherryPickCommandTest.TestCherryPickConflictReset" executed="True" result="Success" success="True" time="0.128" asserts="6" />
                  <test-case name="NGit.Api.CherryPickCommandTest.TestCherryPickConflictResolution" executed="True" result="Success" success="True" time="0.114" asserts="9" />
                  <test-case name="NGit.Api.CherryPickCommandTest.TestCherryPickDirtyIndex" executed="True" result="Success" success="True" time="0.101" asserts="7" />
                  <test-case name="NGit.Api.CherryPickCommandTest.TestCherryPickDirtyWorktree" executed="True" result="Success" success="True" time="0.093" asserts="7" />
                  <test-case name="NGit.Api.CherryPickCommandTest.TestCherryPickOverExecutableChangeOnNonExectuableFileSystem" executed="True" result="Success" success="True" time="0.125" asserts="11" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CleanCommandTest" executed="True" result="Success" success="True" time="0.116" asserts="0">
                <results>
                  <test-case name="NGit.Api.CleanCommandTest.TestClean" executed="True" result="Success" success="True" time="0.038" asserts="5" />
                  <test-case name="NGit.Api.CleanCommandTest.TestCleanWithDryRun" executed="True" result="Success" success="True" time="0.038" asserts="5" />
                  <test-case name="NGit.Api.CleanCommandTest.TestCleanWithPaths" executed="True" result="Success" success="True" time="0.037" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CloneCommandTest" executed="True" result="Success" success="True" time="2.325" asserts="0">
                <results>
                  <test-case name="NGit.Api.CloneCommandTest.TestCloneRepository" executed="True" result="Success" success="True" time="0.165" asserts="7" />
                  <test-case name="NGit.Api.CloneCommandTest.TestCloneRepositoryOnlyOneBranch" executed="True" result="Success" success="True" time="0.183" asserts="7" />
                  <test-case name="NGit.Api.CloneCommandTest.TestCloneRepositoryWhenDestinationDirectoryExistsAndIsNotEmpty" executed="True" result="Success" success="True" time="0.143" asserts="4" />
                  <test-case name="NGit.Api.CloneCommandTest.TestCloneRepositoryWithBranch" executed="True" result="Success" success="True" time="0.258" asserts="10" />
                  <test-case name="NGit.Api.CloneCommandTest.TestCloneRepositoryWithMultipleHeadBranches" executed="True" result="Success" success="True" time="0.163" asserts="3" />
                  <test-case name="NGit.Api.CloneCommandTest.TestCloneRepositoryWithNestedSubmodules" executed="True" result="Success" success="True" time="0.641" asserts="26" />
                  <test-case name="NGit.Api.CloneCommandTest.TestCloneRepositoryWithSubmodules" executed="True" result="Success" success="True" time="0.386" asserts="9" />
                  <test-case name="NGit.Api.CloneCommandTest.TestCloneWithAutoSetupRebase" executed="True" result="Success" success="True" time="0.375" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CommitAndLogCommandTests" executed="True" result="Failure" success="False" time="0.492" asserts="0">
                <results>
                  <test-case name="NGit.Api.CommitAndLogCommandTests.TestAddUnstagedChanges" executed="True" result="Success" success="True" time="0.063" asserts="4" />
                  <test-case name="NGit.Api.CommitAndLogCommandTests.TestCommitAmend" executed="True" result="Success" success="True" time="0.038" asserts="5" />
                  <test-case name="NGit.Api.CommitAndLogCommandTests.TestCommitRange" executed="True" result="Success" success="True" time="0.056" asserts="8" />
                  <test-case name="NGit.Api.CommitAndLogCommandTests.TestInsertChangeId" executed="True" result="Success" success="True" time="0.047" asserts="6" />
                  <test-case name="NGit.Api.CommitAndLogCommandTests.TestLogWithFilter" executed="True" result="Success" success="True" time="0.052" asserts="8" />
                  <test-case name="NGit.Api.CommitAndLogCommandTests.TestMergeEmptyBranches" executed="True" result="Success" success="True" time="0.070" asserts="5" />
                  <test-case name="NGit.Api.CommitAndLogCommandTests.TestModeChange" executed="True" result="Error" success="False" time="0.049" asserts="1">
                    <failure>
                      <message><![CDATA[NGit.Api.Errors.JGitInternalException : No changes]]></message>
                      <stack-trace><![CDATA[at NGit.Api.CommitCommand.CreateTemporaryIndex(ObjectId headId, DirCache index) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Api\CommitCommand.cs:line 452
at NGit.Api.CommitCommand.Call() in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Api\CommitCommand.cs:line 186
at NGit.Api.CommitAndLogCommandTests.TestModeChange() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\CommitAndLogCommandTests.cs:line 281
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Api.CommitAndLogCommandTests.TestMultipleInvocations" executed="True" result="Success" success="True" time="0.027" asserts="1" />
                  <test-case name="NGit.Api.CommitAndLogCommandTests.TestSomeCommits" executed="True" result="Success" success="True" time="0.057" asserts="16" />
                  <test-case name="NGit.Api.CommitAndLogCommandTests.TestWrongParams" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CommitCommandTest" executed="True" result="Success" success="True" time="0.567" asserts="0">
                <results>
                  <test-case name="NGit.Api.CommitCommandTest.CommitAfterSquashMerge" executed="True" result="Success" success="True" time="0.092" asserts="10" />
                  <test-case name="NGit.Api.CommitCommandTest.CommitIgnoresSmudgedEntryWithDifferentId" executed="True" result="Success" success="True" time="0.063" asserts="15" />
                  <test-case name="NGit.Api.CommitCommandTest.CommitNewSubmodule" executed="True" result="Success" success="True" time="0.114" asserts="17" />
                  <test-case name="NGit.Api.CommitCommandTest.CommitSubmoduleUpdate" executed="True" result="Success" success="True" time="0.171" asserts="20" />
                  <test-case name="NGit.Api.CommitCommandTest.CommitUpdatesSmudgedEntries" executed="True" result="Success" success="True" time="0.063" asserts="20" />
                  <test-case name="NGit.Api.CommitCommandTest.TestExecutableRetention" executed="True" result="Success" success="True" time="0.057" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CommitOnlyTest" executed="True" result="Success" success="True" time="6.669" asserts="0">
                <results>
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_1_a" executed="True" result="Success" success="True" time="0.017" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_1_b" executed="True" result="Success" success="True" time="0.023" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_1_c" executed="True" result="Success" success="True" time="0.036" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_1_d" executed="True" result="Success" success="True" time="0.037" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_1_e" executed="True" result="Success" success="True" time="0.044" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_1_f2_14_a" executed="True" result="Success" success="True" time="0.044" asserts="6" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_1_f2_14_b" executed="True" result="Success" success="True" time="0.048" asserts="6" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_1_f2_14_c" executed="True" result="Success" success="True" time="0.063" asserts="6" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_1_f2_14_d" executed="True" result="Success" success="True" time="0.062" asserts="6" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_1_f2_14_e" executed="True" result="Success" success="True" time="0.070" asserts="6" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_10_a" executed="True" result="Success" success="True" time="0.058" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_10_b" executed="True" result="Success" success="True" time="0.065" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_10_c" executed="True" result="Success" success="True" time="0.090" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_10_d" executed="True" result="Success" success="True" time="0.076" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_10_e" executed="True" result="Success" success="True" time="0.080" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_11_a" executed="True" result="Success" success="True" time="0.057" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_11_b" executed="True" result="Success" success="True" time="0.059" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_11_c" executed="True" result="Success" success="True" time="0.078" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_11_d" executed="True" result="Success" success="True" time="0.073" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_11_e" executed="True" result="Success" success="True" time="0.079" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_12_a" executed="True" result="Success" success="True" time="0.043" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_12_b" executed="True" result="Success" success="True" time="0.049" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_12_c" executed="True" result="Success" success="True" time="0.064" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_12_d" executed="True" result="Success" success="True" time="0.063" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_12_e" executed="True" result="Success" success="True" time="0.069" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_12_f2_14_a" executed="True" result="Success" success="True" time="0.086" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_12_f2_14_b" executed="True" result="Success" success="True" time="0.092" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_12_f2_14_c" executed="True" result="Success" success="True" time="0.110" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_12_f2_14_d" executed="True" result="Success" success="True" time="0.107" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_12_f2_14_e" executed="True" result="Success" success="True" time="0.118" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_13_a" executed="True" result="Success" success="True" time="0.055" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_13_b" executed="True" result="Success" success="True" time="0.061" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_13_c" executed="True" result="Success" success="True" time="0.076" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_13_d" executed="True" result="Success" success="True" time="0.079" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_13_e" executed="True" result="Success" success="True" time="0.084" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_14_a" executed="True" result="Success" success="True" time="0.059" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_14_b" executed="True" result="Success" success="True" time="0.064" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_14_c" executed="True" result="Success" success="True" time="0.078" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_14_d" executed="True" result="Success" success="True" time="0.079" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_14_e" executed="True" result="Success" success="True" time="0.088" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_2_a" executed="True" result="Success" success="True" time="0.024" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_2_b" executed="True" result="Success" success="True" time="0.028" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_2_c" executed="True" result="Success" success="True" time="0.042" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_2_d" executed="True" result="Success" success="True" time="0.045" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_2_e" executed="True" result="Success" success="True" time="0.050" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_2_f2_14_a" executed="True" result="Success" success="True" time="0.066" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_2_f2_14_b" executed="True" result="Success" success="True" time="0.071" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_2_f2_14_c" executed="True" result="Success" success="True" time="0.084" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_2_f2_14_d" executed="True" result="Success" success="True" time="0.090" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_2_f2_14_e" executed="True" result="Success" success="True" time="0.090" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_3_a" executed="True" result="Success" success="True" time="0.052" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_3_b" executed="True" result="Success" success="True" time="0.059" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_3_c" executed="True" result="Success" success="True" time="0.067" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_3_d" executed="True" result="Success" success="True" time="0.067" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_3_e" executed="True" result="Success" success="True" time="0.075" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_4_a" executed="True" result="Success" success="True" time="0.035" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_4_b" executed="True" result="Success" success="True" time="0.042" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_4_c" executed="True" result="Success" success="True" time="0.054" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_4_d" executed="True" result="Success" success="True" time="0.055" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_4_e" executed="True" result="Success" success="True" time="0.061" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_5_a" executed="True" result="Success" success="True" time="0.048" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_5_b" executed="True" result="Success" success="True" time="0.056" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_5_c" executed="True" result="Success" success="True" time="0.065" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_5_d" executed="True" result="Success" success="True" time="0.066" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_5_e" executed="True" result="Success" success="True" time="0.074" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_6_a" executed="True" result="Success" success="True" time="0.039" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_6_b" executed="True" result="Success" success="True" time="0.048" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_6_c" executed="True" result="Success" success="True" time="0.060" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_6_d" executed="True" result="Success" success="True" time="0.060" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_6_e" executed="True" result="Success" success="True" time="0.070" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_6_f2_14_a" executed="True" result="Success" success="True" time="0.080" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_6_f2_14_b" executed="True" result="Success" success="True" time="0.089" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_6_f2_14_c" executed="True" result="Success" success="True" time="0.100" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_6_f2_14_d" executed="True" result="Success" success="True" time="0.103" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_6_f2_14_e" executed="True" result="Success" success="True" time="0.105" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_7_a" executed="True" result="Success" success="True" time="0.038" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_7_b" executed="True" result="Success" success="True" time="0.044" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_7_c" executed="True" result="Success" success="True" time="0.056" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_7_d" executed="True" result="Success" success="True" time="0.076" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_7_e" executed="True" result="Success" success="True" time="0.063" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_7_f2_14_a" executed="True" result="Success" success="True" time="0.077" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_7_f2_14_b" executed="True" result="Success" success="True" time="0.086" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_7_f2_14_c" executed="True" result="Success" success="True" time="0.097" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_7_f2_14_d" executed="True" result="Success" success="True" time="0.100" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_7_f2_14_e" executed="True" result="Success" success="True" time="0.106" asserts="5" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_8_a" executed="True" result="Success" success="True" time="0.037" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_8_b" executed="True" result="Success" success="True" time="0.044" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_8_c" executed="True" result="Success" success="True" time="0.062" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_8_d" executed="True" result="Success" success="True" time="0.060" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_8_e" executed="True" result="Success" success="True" time="0.068" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_9_a" executed="True" result="Success" success="True" time="0.055" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_9_b" executed="True" result="Success" success="True" time="0.073" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_9_c" executed="True" result="Success" success="True" time="0.074" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_9_d" executed="True" result="Success" success="True" time="0.074" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOption_f1_9_e" executed="True" result="Success" success="True" time="0.089" asserts="4" />
                  <test-case name="NGit.Api.CommitOnlyTest.TestOnlyOptionWithDirectory" executed="True" result="Success" success="True" time="0.123" asserts="14" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DiffCommandTest" executed="True" result="Success" success="True" time="0.273" asserts="0">
                <results>
                  <test-case name="NGit.Api.DiffCommandTest.TestDiffCached" executed="True" result="Success" success="True" time="0.044" asserts="6" />
                  <test-case name="NGit.Api.DiffCommandTest.TestDiffModified" executed="True" result="Success" success="True" time="0.043" asserts="6" />
                  <test-case name="NGit.Api.DiffCommandTest.TestDiffTwoCommits" executed="True" result="Success" success="True" time="0.088" asserts="7" />
                  <test-case name="NGit.Api.DiffCommandTest.TestDiffWithNegativeLineCount" executed="True" result="Success" success="True" time="0.035" asserts="2" />
                  <test-case name="NGit.Api.DiffCommandTest.TestDiffWithPrefixes" executed="True" result="Success" success="True" time="0.035" asserts="2" />
                  <test-case name="NGit.Api.DiffCommandTest.TestNoOutputStreamSet" executed="True" result="Success" success="True" time="0.020" asserts="7" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="FetchCommandTest" executed="True" result="Success" success="True" time="0.074" asserts="0">
                <results>
                  <test-case name="NGit.Api.FetchCommandTest.TestFetch" executed="True" result="Success" success="True" time="0.074" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="GitConstructionTest" executed="True" result="Success" success="True" time="0.175" asserts="0">
                <results>
                  <test-case name="NGit.Api.GitConstructionTest.TestOpen" executed="True" result="Success" success="True" time="0.089" asserts="4" />
                  <test-case name="NGit.Api.GitConstructionTest.TestWrap" executed="True" result="Success" success="True" time="0.084" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="HugeFileTest" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0">
                <results>
                  <test-case name="NGit.Api.HugeFileTest.TestAddHugeFile" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[This test takes FOREVER to run. Can they not fake the filestream?]]></message>
                    </reason>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="InitCommandTest" executed="True" result="Success" success="True" time="0.079" asserts="0">
                <results>
                  <test-case name="NGit.Api.InitCommandTest.TestInitBareRepository" executed="True" result="Success" success="True" time="0.024" asserts="3" />
                  <test-case name="NGit.Api.InitCommandTest.TestInitNonEmptyRepository" executed="True" result="Success" success="True" time="0.026" asserts="4" />
                  <test-case name="NGit.Api.InitCommandTest.TestInitRepository" executed="True" result="Success" success="True" time="0.026" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="LogCommandTest" executed="True" result="Success" success="True" time="0.463" asserts="0">
                <results>
                  <test-case name="NGit.Api.LogCommandTest.LogAllCommits" executed="True" result="Success" success="True" time="0.098" asserts="10" />
                  <test-case name="NGit.Api.LogCommandTest.LogAllCommitsWithMaxCount" executed="True" result="Success" success="True" time="0.074" asserts="8" />
                  <test-case name="NGit.Api.LogCommandTest.LogAllCommitsWithSkip" executed="True" result="Success" success="True" time="0.070" asserts="8" />
                  <test-case name="NGit.Api.LogCommandTest.LogAllCommitsWithSkipAndMaxCount" executed="True" result="Success" success="True" time="0.071" asserts="5" />
                  <test-case name="NGit.Api.LogCommandTest.LogPathWithMaxCount" executed="True" result="Success" success="True" time="0.071" asserts="5" />
                  <test-case name="NGit.Api.LogCommandTest.LogPathWithSkip" executed="True" result="Success" success="True" time="0.073" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="LsRemoteCommandTest" executed="True" result="Success" success="True" time="0.481" asserts="0">
                <results>
                  <test-case name="NGit.Api.LsRemoteCommandTest.TestLsRemote" executed="True" result="Success" success="True" time="0.165" asserts="3" />
                  <test-case name="NGit.Api.LsRemoteCommandTest.TestLsRemoteWithHeads" executed="True" result="Success" success="True" time="0.152" asserts="3" />
                  <test-case name="NGit.Api.LsRemoteCommandTest.TestLsRemoteWithTags" executed="True" result="Success" success="True" time="0.160" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MergeCommandTest" executed="True" result="Success" success="True" time="3.316" asserts="0">
                <results>
                  <test-case name="NGit.Api.MergeCommandTest.TestAlreadyUpToDate" executed="True" result="Success" success="True" time="0.044" asserts="5" />
                  <test-case name="NGit.Api.MergeCommandTest.TestConflictingMergeFailsDueToDirtyIndex" executed="True" result="Success" success="True" time="0.128" asserts="9" />
                  <test-case name="NGit.Api.MergeCommandTest.TestConflictingMergeFailsDueToDirtyWorktree" executed="True" result="Success" success="True" time="0.109" asserts="9" />
                  <test-case name="NGit.Api.MergeCommandTest.TestContentMerge" executed="True" result="Success" success="True" time="0.139" asserts="10" />
                  <test-case name="NGit.Api.MergeCommandTest.TestDeletionAndConflict" executed="True" result="Success" success="True" time="0.137" asserts="9" />
                  <test-case name="NGit.Api.MergeCommandTest.TestDeletionOnMasterConflict" executed="True" result="Success" success="True" time="0.101" asserts="5" />
                  <test-case name="NGit.Api.MergeCommandTest.TestDeletionOnSideConflict" executed="True" result="Success" success="True" time="0.098" asserts="7" />
                  <test-case name="NGit.Api.MergeCommandTest.TestFastForward" executed="True" result="Success" success="True" time="0.058" asserts="5" />
                  <test-case name="NGit.Api.MergeCommandTest.TestFastForwardWithFiles" executed="True" result="Success" success="True" time="0.079" asserts="10" />
                  <test-case name="NGit.Api.MergeCommandTest.TestFileModeMerge" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                  <test-case name="NGit.Api.MergeCommandTest.TestFileModeMergeWithDirtyWorkTree" executed="True" result="Success" success="True" time="0.013" asserts="1" />
                  <test-case name="NGit.Api.MergeCommandTest.TestMergeConflictFileFolder" executed="True" result="Success" success="True" time="0.127" asserts="8" />
                  <test-case name="NGit.Api.MergeCommandTest.TestMergeFailingWithDirtyWorkingTree" executed="True" result="Success" success="True" time="0.119" asserts="8" />
                  <test-case name="NGit.Api.MergeCommandTest.TestMergeInItself" executed="True" result="Success" success="True" time="0.027" asserts="4" />
                  <test-case name="NGit.Api.MergeCommandTest.TestMergeMessage" executed="True" result="Success" success="True" time="0.101" asserts="2" />
                  <test-case name="NGit.Api.MergeCommandTest.TestMergeNonVersionedPaths" executed="True" result="Success" success="True" time="0.130" asserts="13" />
                  <test-case name="NGit.Api.MergeCommandTest.TestMergeRemovingFolders" executed="True" result="Success" success="True" time="0.092" asserts="5" />
                  <test-case name="NGit.Api.MergeCommandTest.TestMergeRemovingFoldersWithoutFastForward" executed="True" result="Success" success="True" time="0.128" asserts="3" />
                  <test-case name="NGit.Api.MergeCommandTest.TestModifiedAndRenamed" executed="True" result="Success" success="True" time="0.128" asserts="5" />
                  <test-case name="NGit.Api.MergeCommandTest.TestMultipleCreations" executed="True" result="Success" success="True" time="0.103" asserts="2" />
                  <test-case name="NGit.Api.MergeCommandTest.TestMultipleCreationsSameContent" executed="True" result="Success" success="True" time="0.112" asserts="5" />
                  <test-case name="NGit.Api.MergeCommandTest.TestMultipleDeletions" executed="True" result="Success" success="True" time="0.102" asserts="6" />
                  <test-case name="NGit.Api.MergeCommandTest.TestMultipleHeads" executed="True" result="Success" success="True" time="0.085" asserts="3" />
                  <test-case name="NGit.Api.MergeCommandTest.TestSingleDeletion" executed="True" result="Success" success="True" time="0.202" asserts="15" />
                  <test-case name="NGit.Api.MergeCommandTest.TestSquashFastForward" executed="True" result="Success" success="True" time="0.101" asserts="16" />
                  <test-case name="NGit.Api.MergeCommandTest.TestSquashMerge" executed="True" result="Success" success="True" time="0.112" asserts="16" />
                  <test-case name="NGit.Api.MergeCommandTest.TestSquashMergeConflict" executed="True" result="Success" success="True" time="0.150" asserts="14" />
                  <test-case name="NGit.Api.MergeCommandTest.TestSuccessfulContentMerge" executed="True" result="Success" success="True" time="0.156" asserts="17" />
                  <test-case name="NGit.Api.MergeCommandTest.TestSuccessfulContentMergeAndDirtyworkingTree" executed="True" result="Success" success="True" time="0.163" asserts="18" />
                  <test-case name="NGit.Api.MergeCommandTest.TestSuccessfulMergeFailsDueToDirtyIndex" executed="True" result="Success" success="True" time="0.107" asserts="9" />
                  <test-case name="NGit.Api.MergeCommandTest.TestSuccessfulMergeFailsDueToDirtyWorktree" executed="True" result="Success" success="True" time="0.101" asserts="9" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NotesCommandTest" executed="True" result="Success" success="True" time="0.147" asserts="0">
                <results>
                  <test-case name="NGit.Api.NotesCommandTest.TestAddAndRemoveNote" executed="True" result="Success" success="True" time="0.088" asserts="3" />
                  <test-case name="NGit.Api.NotesCommandTest.TestListNotes" executed="True" result="Success" success="True" time="0.058" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PathCheckoutCommandTest" executed="True" result="Success" success="True" time="0.852" asserts="0">
                <results>
                  <test-case name="NGit.Api.PathCheckoutCommandTest.TestCheckoutFirst" executed="True" result="Success" success="True" time="0.096" asserts="3" />
                  <test-case name="NGit.Api.PathCheckoutCommandTest.TestCheckoutMultiple" executed="True" result="Success" success="True" time="0.090" asserts="3" />
                  <test-case name="NGit.Api.PathCheckoutCommandTest.TestCheckoutRepository" executed="True" result="Success" success="True" time="0.092" asserts="3" />
                  <test-case name="NGit.Api.PathCheckoutCommandTest.TestCheckoutSecond" executed="True" result="Success" success="True" time="0.091" asserts="3" />
                  <test-case name="NGit.Api.PathCheckoutCommandTest.TestUpdateWorkingDirectory" executed="True" result="Success" success="True" time="0.089" asserts="4" />
                  <test-case name="NGit.Api.PathCheckoutCommandTest.TestUpdateWorkingDirectoryFromHeadWithIndexChange" executed="True" result="Success" success="True" time="0.098" asserts="4" />
                  <test-case name="NGit.Api.PathCheckoutCommandTest.TestUpdateWorkingDirectoryFromIndex" executed="True" result="Success" success="True" time="0.094" asserts="4" />
                  <test-case name="NGit.Api.PathCheckoutCommandTest.TestUpdateWorkingDirectoryFromIndex2" executed="True" result="Success" success="True" time="0.114" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PullCommandTest" executed="True" result="Success" success="True" time="0.624" asserts="0">
                <results>
                  <test-case name="NGit.Api.PullCommandTest.TestPullConflict" executed="True" result="Success" success="True" time="0.156" asserts="10" />
                  <test-case name="NGit.Api.PullCommandTest.TestPullFastForward" executed="True" result="Success" success="True" time="0.140" asserts="11" />
                  <test-case name="NGit.Api.PullCommandTest.TestPullLocalConflict" executed="True" result="Success" success="True" time="0.155" asserts="10" />
                  <test-case name="NGit.Api.PullCommandTest.TestPullMerge" executed="True" result="Success" success="True" time="0.168" asserts="8" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PullCommandWithRebaseTest" executed="True" result="Success" success="True" time="0.757" asserts="0">
                <results>
                  <test-case name="NGit.Api.PullCommandWithRebaseTest.TestPullConflict" executed="True" result="Success" success="True" time="0.180" asserts="10" />
                  <test-case name="NGit.Api.PullCommandWithRebaseTest.TestPullFastForward" executed="True" result="Success" success="True" time="0.180" asserts="11" />
                  <test-case name="NGit.Api.PullCommandWithRebaseTest.TestPullFastForwardWithBranchInSource" executed="True" result="Success" success="True" time="0.209" asserts="7" />
                  <test-case name="NGit.Api.PullCommandWithRebaseTest.TestPullLocalConflict" executed="True" result="Success" success="True" time="0.183" asserts="10" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PushCommandTest" executed="True" result="Success" success="True" time="0.655" asserts="0">
                <results>
                  <test-case name="NGit.Api.PushCommandTest.TestPush" executed="True" result="Success" success="True" time="0.064" asserts="4" />
                  <test-case name="NGit.Api.PushCommandTest.TestPushRefUpdate" executed="True" result="Success" success="True" time="0.342" asserts="10" />
                  <test-case name="NGit.Api.PushCommandTest.TestPushWithoutPushRefSpec" executed="True" result="Success" success="True" time="0.103" asserts="8" />
                  <test-case name="NGit.Api.PushCommandTest.TestPushWithRefSpecFromConfig" executed="True" result="Success" success="True" time="0.060" asserts="4" />
                  <test-case name="NGit.Api.PushCommandTest.TestTrackingUpdate" executed="True" result="Success" success="True" time="0.079" asserts="8" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RebaseCommandTest" executed="True" result="Success" success="True" time="4.758" asserts="0">
                <results>
                  <test-case name="NGit.Api.RebaseCommandTest.TestAuthorScriptConverter" executed="True" result="Success" success="True" time="0.013" asserts="15" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestConflictFreeWithSingleFile" executed="True" result="Success" success="True" time="0.138" asserts="10" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestDetachedHead" executed="True" result="Success" success="True" time="0.141" asserts="9" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestFastForwardWithMultipleCommits" executed="True" result="Success" success="True" time="0.107" asserts="7" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestFastForwardWithMultipleCommitsOnDifferentBranches" executed="True" result="Success" success="True" time="0.180" asserts="7" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestFastForwardWithNewFile" executed="True" result="Success" success="True" time="0.083" asserts="7" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestFilesAddedFromTwoBranches" executed="True" result="Success" success="True" time="0.157" asserts="13" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestMergeFirstStopOnLastConflictAndSkip" executed="True" result="Success" success="True" time="0.181" asserts="9" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestRebaseFailsCantCherryPickMergeCommits" executed="True" result="Success" success="True" time="0.199" asserts="4" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestRebaseParentOntoHeadShouldBeUptoDate" executed="True" result="Success" success="True" time="0.053" asserts="2" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestRebaseShouldBeAbleToHandleEmptyLinesInRebaseTodoFile" executed="True" result="Success" success="True" time="0.014" asserts="4" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestRebaseShouldLeaveWorkspaceUntouchedWithUnstagedChangesConflict" executed="True" result="Success" success="True" time="0.096" asserts="3" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestRebaseWithUncommittedMasterChange" executed="True" result="Success" success="True" time="0.119" asserts="3" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestRebaseWithUncommittedMasterChangeBaseCommit" executed="True" result="Success" success="True" time="0.150" asserts="7" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestRebaseWithUncommittedMasterChangeOtherCommit" executed="True" result="Success" success="True" time="0.165" asserts="7" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestRebaseWithUncommittedTopicChange" executed="True" result="Success" success="True" time="0.116" asserts="5" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestRebaseWithUnstagedMasterChange" executed="True" result="Success" success="True" time="0.109" asserts="3" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestRebaseWithUnstagedMasterChangeBaseCommit" executed="True" result="Success" success="True" time="0.153" asserts="2" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestRebaseWithUnstagedMasterChangeOtherCommit" executed="True" result="Success" success="True" time="0.171" asserts="2" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestRebaseWithUnstagedTopicChange" executed="True" result="Success" success="True" time="0.110" asserts="3" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestRebaseWithUntrackedFile" executed="True" result="Success" success="True" time="0.148" asserts="2" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestRepositoryStateChecks" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestStopOnConflict" executed="True" result="Success" success="True" time="0.184" asserts="15" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestStopOnConflictAndContinue" executed="True" result="Success" success="True" time="0.223" asserts="8" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestStopOnConflictAndContinueWithNoDeltaToMaster" executed="True" result="Success" success="True" time="0.141" asserts="8" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestStopOnConflictAndFailContinueIfFileIsDirty" executed="True" result="Success" success="True" time="0.201" asserts="7" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestStopOnConflictAndSkipNoConflict" executed="True" result="Success" success="True" time="0.214" asserts="6" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestStopOnConflictAndSkipWithConflict" executed="True" result="Success" success="True" time="0.196" asserts="6" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestStopOnConflictCommitAndContinue" executed="True" result="Success" success="True" time="0.238" asserts="8" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestStopOnConflictFileCreationAndDeletion" executed="True" result="Success" success="True" time="0.222" asserts="21" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestStopOnLastConflictAndContinue" executed="True" result="Success" success="True" time="0.195" asserts="7" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestStopOnLastConflictAndSkip" executed="True" result="Success" success="True" time="0.203" asserts="7" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestUnknownUpstream" executed="True" result="Success" success="True" time="0.032" asserts="2" />
                  <test-case name="NGit.Api.RebaseCommandTest.TestUpToDate" executed="True" result="Success" success="True" time="0.034" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ReflogCommandTest" executed="True" result="Success" success="True" time="0.176" asserts="0">
                <results>
                  <test-case name="NGit.Api.ReflogCommandTest.TestBranchReflog" executed="True" result="Success" success="True" time="0.101" asserts="8" />
                  <test-case name="NGit.Api.ReflogCommandTest.TestHeadReflog" executed="True" result="Success" success="True" time="0.072" asserts="11" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RenameBranchCommandTest" executed="True" result="Success" success="True" time="0.217" asserts="0">
                <results>
                  <test-case name="NGit.Api.RenameBranchCommandTest.RenameBranchExistingSection" executed="True" result="Success" success="True" time="0.054" asserts="4" />
                  <test-case name="NGit.Api.RenameBranchCommandTest.RenameBranchMultipleConfigValues" executed="True" result="Success" success="True" time="0.053" asserts="11" />
                  <test-case name="NGit.Api.RenameBranchCommandTest.RenameBranchNoConfigValues" executed="True" result="Success" success="True" time="0.052" asserts="6" />
                  <test-case name="NGit.Api.RenameBranchCommandTest.RenameBranchSingleConfigValue" executed="True" result="Success" success="True" time="0.053" asserts="7" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ResetCommandTest" executed="True" result="Success" success="True" time="0.645" asserts="0">
                <results>
                  <test-case name="NGit.Api.ResetCommandTest.TestHardReset" executed="True" result="Success" success="True" time="0.072" asserts="13" />
                  <test-case name="NGit.Api.ResetCommandTest.TestHardResetAfterSquashMerge" executed="True" result="Success" success="True" time="0.083" asserts="6" />
                  <test-case name="NGit.Api.ResetCommandTest.TestHardResetOnTag" executed="True" result="Success" success="True" time="0.078" asserts="3" />
                  <test-case name="NGit.Api.ResetCommandTest.TestMixedReset" executed="True" result="Success" success="True" time="0.067" asserts="13" />
                  <test-case name="NGit.Api.ResetCommandTest.TestMixedResetRetainsSizeAndModifiedTime" executed="True" result="Success" success="True" time="0.059" asserts="17" />
                  <test-case name="NGit.Api.ResetCommandTest.TestPathsReset" executed="True" result="Success" success="True" time="0.065" asserts="11" />
                  <test-case name="NGit.Api.ResetCommandTest.TestPathsResetOnDirs" executed="True" result="Success" success="True" time="0.063" asserts="8" />
                  <test-case name="NGit.Api.ResetCommandTest.TestPathsResetWithRef" executed="True" result="Success" success="True" time="0.063" asserts="8" />
                  <test-case name="NGit.Api.ResetCommandTest.TestResetToNonexistingHEAD" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                  <test-case name="NGit.Api.ResetCommandTest.TestSoftReset" executed="True" result="Success" success="True" time="0.064" asserts="13" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevertCommandTest" executed="True" result="Success" success="True" time="0.158" asserts="0">
                <results>
                  <test-case name="NGit.Api.RevertCommandTest.TestRevert" executed="True" result="Success" success="True" time="0.158" asserts="12" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RmCommandTest" executed="True" result="Success" success="True" time="0.036" asserts="0">
                <results>
                  <test-case name="NGit.Api.RmCommandTest.TestRemove" executed="True" result="Success" success="True" time="0.035" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="StashApplyCommandTest" executed="True" result="Success" success="True" time="1.068" asserts="0">
                <results>
                  <test-case name="NGit.Api.StashApplyCommandTest.IndexAdd" executed="True" result="Success" success="True" time="0.070" asserts="15" />
                  <test-case name="NGit.Api.StashApplyCommandTest.IndexContentConflict" executed="True" result="Success" success="True" time="0.069" asserts="6" />
                  <test-case name="NGit.Api.StashApplyCommandTest.IndexDelete" executed="True" result="Success" success="True" time="0.062" asserts="14" />
                  <test-case name="NGit.Api.StashApplyCommandTest.MultipleEdits" executed="True" result="Success" success="True" time="0.076" asserts="15" />
                  <test-case name="NGit.Api.StashApplyCommandTest.NoStashedCommits" executed="True" result="Success" success="True" time="0.034" asserts="3" />
                  <test-case name="NGit.Api.StashApplyCommandTest.UnstashNoHead" executed="True" result="Success" success="True" time="0.045" asserts="4" />
                  <test-case name="NGit.Api.StashApplyCommandTest.UnstashNonStashCommit" executed="True" result="Success" success="True" time="0.033" asserts="3" />
                  <test-case name="NGit.Api.StashApplyCommandTest.WorkingDirectoryCleanIndexModify" executed="True" result="Success" success="True" time="0.068" asserts="14" />
                  <test-case name="NGit.Api.StashApplyCommandTest.WorkingDirectoryContentConflict" executed="True" result="Success" success="True" time="0.063" asserts="6" />
                  <test-case name="NGit.Api.StashApplyCommandTest.WorkingDirectoryDelete" executed="True" result="Success" success="True" time="0.059" asserts="15" />
                  <test-case name="NGit.Api.StashApplyCommandTest.WorkingDirectoryDeleteIndexAdd" executed="True" result="Success" success="True" time="0.066" asserts="16" />
                  <test-case name="NGit.Api.StashApplyCommandTest.WorkingDirectoryDeleteIndexEdit" executed="True" result="Success" success="True" time="0.068" asserts="15" />
                  <test-case name="NGit.Api.StashApplyCommandTest.WorkingDirectoryEditPreCommit" executed="True" result="Success" success="True" time="0.089" asserts="15" />
                  <test-case name="NGit.Api.StashApplyCommandTest.WorkingDirectoryModify" executed="True" result="Success" success="True" time="0.065" asserts="14" />
                  <test-case name="NGit.Api.StashApplyCommandTest.WorkingDirectoryModifyIndexChanged" executed="True" result="Success" success="True" time="0.076" asserts="15" />
                  <test-case name="NGit.Api.StashApplyCommandTest.WorkingDirectoryModifyInSubfolder" executed="True" result="Success" success="True" time="0.101" asserts="14" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="StashCreateCommandTest" executed="True" result="Success" success="True" time="0.736" asserts="0">
                <results>
                  <test-case name="NGit.Api.StashCreateCommandTest.IndexAdd" executed="True" result="Success" success="True" time="0.061" asserts="19" />
                  <test-case name="NGit.Api.StashCreateCommandTest.IndexDelete" executed="True" result="Success" success="True" time="0.058" asserts="19" />
                  <test-case name="NGit.Api.StashCreateCommandTest.MultipleEdits" executed="True" result="Success" success="True" time="0.063" asserts="21" />
                  <test-case name="NGit.Api.StashCreateCommandTest.NoLocalChanges" executed="True" result="Success" success="True" time="0.033" asserts="3" />
                  <test-case name="NGit.Api.StashCreateCommandTest.RefLogIncludesCommitMessage" executed="True" result="Success" success="True" time="0.054" asserts="20" />
                  <test-case name="NGit.Api.StashCreateCommandTest.WorkingDirectoryCleanIndexModify" executed="True" result="Success" success="True" time="0.060" asserts="24" />
                  <test-case name="NGit.Api.StashCreateCommandTest.WorkingDirectoryDelete" executed="True" result="Success" success="True" time="0.054" asserts="19" />
                  <test-case name="NGit.Api.StashCreateCommandTest.WorkingDirectoryDeleteIndexAdd" executed="True" result="Success" success="True" time="0.059" asserts="26" />
                  <test-case name="NGit.Api.StashCreateCommandTest.WorkingDirectoryDeleteIndexEdit" executed="True" result="Success" success="True" time="0.062" asserts="25" />
                  <test-case name="NGit.Api.StashCreateCommandTest.WorkingDirectoryModify" executed="True" result="Success" success="True" time="0.058" asserts="19" />
                  <test-case name="NGit.Api.StashCreateCommandTest.WorkingDirectoryModifyIndexChanged" executed="True" result="Success" success="True" time="0.068" asserts="24" />
                  <test-case name="NGit.Api.StashCreateCommandTest.WorkingDirectoryModifyInSubfolder" executed="True" result="Success" success="True" time="0.088" asserts="19" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="StashDropCommandTest" executed="True" result="Success" success="True" time="0.581" asserts="0">
                <results>
                  <test-case name="NGit.Api.StashDropCommandTest.DropAll" executed="True" result="Success" success="True" time="0.085" asserts="12" />
                  <test-case name="NGit.Api.StashDropCommandTest.DropBoundaryStashedCommits" executed="True" result="Success" success="True" time="0.141" asserts="28" />
                  <test-case name="NGit.Api.StashDropCommandTest.DropFirstStashedCommit" executed="True" result="Success" success="True" time="0.086" asserts="16" />
                  <test-case name="NGit.Api.StashDropCommandTest.DropMiddleStashCommit" executed="True" result="Success" success="True" time="0.110" asserts="22" />
                  <test-case name="NGit.Api.StashDropCommandTest.DropSingleStashedCommit" executed="True" result="Success" success="True" time="0.061" asserts="8" />
                  <test-case name="NGit.Api.StashDropCommandTest.DropWithInvalidLogIndex" executed="True" result="Success" success="True" time="0.058" asserts="7" />
                  <test-case name="NGit.Api.StashDropCommandTest.DropWithNoStashedCommits" executed="True" result="Success" success="True" time="0.031" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="StashListCommandTest" executed="True" result="Success" success="True" time="0.149" asserts="0">
                <results>
                  <test-case name="NGit.Api.StashListCommandTest.EmptyStashReflog" executed="True" result="Success" success="True" time="0.035" asserts="4" />
                  <test-case name="NGit.Api.StashListCommandTest.MultipleStashedCommits" executed="True" result="Success" success="True" time="0.061" asserts="7" />
                  <test-case name="NGit.Api.StashListCommandTest.NoStashRef" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Api.StashListCommandTest.SingleStashedCommit" executed="True" result="Success" success="True" time="0.036" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="StatusCommandTest" executed="True" result="Failure" success="False" time="0.088" asserts="0">
                <results>
                  <test-case name="NGit.Api.StatusCommandTest.TestDifferentStates" executed="True" result="Failure" success="False" time="0.053" asserts="11">
                    <failure>
                      <message><![CDATA[  Expected and actual are both <NGit.Api.StatusCommandTest+StringSet>
  Values differ at index [0]
  String lengths are both 1. Strings differ at index 0.
  Expected: "b"
  But was:  "a"
  -----------^
]]></message>
                      <stack-trace><![CDATA[at NGit.Api.StatusCommandTest.TestDifferentStates() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Api\StatusCommandTest.cs:line 97
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Api.StatusCommandTest.TestEmptyStatus" executed="True" result="Success" success="True" time="0.014" asserts="7" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TagCommandTest" executed="True" result="Success" success="True" time="0.454" asserts="0">
                <results>
                  <test-case name="NGit.Api.TagCommandTest.TestDelete" executed="True" result="Success" success="True" time="0.055" asserts="8" />
                  <test-case name="NGit.Api.TagCommandTest.TestDeleteBadName" executed="True" result="Success" success="True" time="0.030" asserts="2" />
                  <test-case name="NGit.Api.TagCommandTest.TestDeleteEmptyTagNames" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                  <test-case name="NGit.Api.TagCommandTest.TestDeleteFullName" executed="True" result="Success" success="True" time="0.036" asserts="5" />
                  <test-case name="NGit.Api.TagCommandTest.TestDeleteNonExisting" executed="True" result="Success" success="True" time="0.026" asserts="2" />
                  <test-case name="NGit.Api.TagCommandTest.TestEmptyTagName" executed="True" result="Success" success="True" time="0.027" asserts="1" />
                  <test-case name="NGit.Api.TagCommandTest.TestFailureOnSignedTags" executed="True" result="Success" success="True" time="0.025" asserts="1" />
                  <test-case name="NGit.Api.TagCommandTest.TestInvalidTagName" executed="True" result="Success" success="True" time="0.026" asserts="1" />
                  <test-case name="NGit.Api.TagCommandTest.TestListAllTagsInRepositoryInOrder" executed="True" result="Success" success="True" time="0.060" asserts="5" />
                  <test-case name="NGit.Api.TagCommandTest.TestShouldNotBlowUpIfThereAreNoCommitsInRepository" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                  <test-case name="NGit.Api.TagCommandTest.TestShouldNotBlowUpIfThereAreNoTagsInRepository" executed="True" result="Success" success="True" time="0.027" asserts="2" />
                  <test-case name="NGit.Api.TagCommandTest.TestTagging" executed="True" result="Success" success="True" time="0.053" asserts="2" />
                  <test-case name="NGit.Api.TagCommandTest.TestTaggingOnHead" executed="True" result="Success" success="True" time="0.032" asserts="3" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="BranchConfigTest" executed="True" result="Success" success="True" time="0.009" asserts="0">
            <results>
              <test-case name="NGit.BranchConfigTest.GetRemoteTrackingBranchShouldHandleNormalCase" executed="True" result="Success" success="True" time="0.002" asserts="1" />
              <test-case name="NGit.BranchConfigTest.GetRemoteTrackingBranchShouldHandleOtherMapping" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.BranchConfigTest.GetRemoteTrackingBranchShouldReturnNullWithoutFetchSpec" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.BranchConfigTest.GetRemoteTrackingBranchShouldReturnNullWithoutMergeBranch" executed="True" result="Success" success="True" time="0.001" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="BranchTrackingStatusTest" executed="True" result="Success" success="True" time="0.145" asserts="0">
            <results>
              <test-case name="NGit.BranchTrackingStatusTest.ShouldReturnNullWhenBranchDoesntExist" executed="True" result="Success" success="True" time="0.014" asserts="2" />
              <test-case name="NGit.BranchTrackingStatusTest.ShouldWorkInNormalCase" executed="True" result="Success" success="True" time="0.081" asserts="4" />
              <test-case name="NGit.BranchTrackingStatusTest.ShouldWorkWithoutMergeBase" executed="True" result="Success" success="True" time="0.045" asserts="3" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ConfigTest" executed="True" result="Success" success="True" time="0.048" asserts="0">
            <results>
              <test-case name="NGit.ConfigTest.Test001_ReadBareKey" executed="True" result="Success" success="True" time="0.001" asserts="2" />
              <test-case name="NGit.ConfigTest.Test002_ReadWithSubsection" executed="True" result="Success" success="True" time="0.001" asserts="6" />
              <test-case name="NGit.ConfigTest.Test003_PutRemote" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ConfigTest.Test004_PutGetSimple" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="NGit.ConfigTest.Test005_PutGetStringList" executed="True" result="Success" success="True" time="0.001" asserts="2" />
              <test-case name="NGit.ConfigTest.Test006_readCaseInsensitive" executed="True" result="Success" success="True" time="0.001" asserts="2" />
              <test-case name="NGit.ConfigTest.Test007_readUserConfig" executed="True" result="Success" success="True" time="0.004" asserts="24" />
              <test-case name="NGit.ConfigTest.Test008_readSectionNames" executed="True" result="Success" success="True" time="0.001" asserts="2" />
              <test-case name="NGit.ConfigTest.Test009_readNamesInSection" executed="True" result="Success" success="True" time="0.001" asserts="8" />
              <test-case name="NGit.ConfigTest.Test010_readNamesInSubSection" executed="True" result="Success" success="True" time="0.000" asserts="7" />
              <test-case name="NGit.ConfigTest.TestBooleanWithNoValue" executed="True" result="Success" success="True" time="0.001" asserts="5" />
              <test-case name="NGit.ConfigTest.TestEmptyString" executed="True" result="Success" success="True" time="0.001" asserts="8" />
              <test-case name="NGit.ConfigTest.TestGetEnum" executed="True" result="Success" success="True" time="0.003" asserts="6" />
              <test-case name="NGit.ConfigTest.TestQuotingForSubSectionNames" executed="True" result="Success" success="True" time="0.000" asserts="3" />
              <test-case name="NGit.ConfigTest.TestReadBoolean_OnOff1" executed="True" result="Success" success="True" time="0.000" asserts="4" />
              <test-case name="NGit.ConfigTest.TestReadBoolean_OnOff2" executed="True" result="Success" success="True" time="0.001" asserts="4" />
              <test-case name="NGit.ConfigTest.TestReadBoolean_TrueFalse1" executed="True" result="Success" success="True" time="0.000" asserts="4" />
              <test-case name="NGit.ConfigTest.TestReadBoolean_TrueFalse2" executed="True" result="Success" success="True" time="0.000" asserts="4" />
              <test-case name="NGit.ConfigTest.TestReadBoolean_YesNo1" executed="True" result="Success" success="True" time="0.001" asserts="4" />
              <test-case name="NGit.ConfigTest.TestReadBoolean_YesNo2" executed="True" result="Success" success="True" time="0.000" asserts="4" />
              <test-case name="NGit.ConfigTest.TestReadLong" executed="True" result="Success" success="True" time="0.002" asserts="8" />
              <test-case name="NGit.ConfigTest.TestSetEnum" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ConfigTest.TestUnsetBranchSection" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ConfigTest.TestUnsetSingleSection" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ConstantsEncodingTest" executed="True" result="Success" success="True" time="0.008" asserts="0">
            <results>
              <test-case name="NGit.ConstantsEncodingTest.TestEncode_SimpleASCII" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="NGit.ConstantsEncodingTest.TestEncode_Unicode" executed="True" result="Success" success="True" time="0.001" asserts="2" />
              <test-case name="NGit.ConstantsEncodingTest.TestEncodeASCII_FailOnNonASCII" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ConstantsEncodingTest.TestEncodeASCII_Number13" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ConstantsEncodingTest.TestEncodeASCII_SimpleASCII" executed="True" result="Success" success="True" time="0.000" asserts="2" />
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Diff" executed="True" result="Failure" success="False" time="1.474" asserts="0">
            <results>
              <test-suite type="TestFixture" name="DiffEntryTest" executed="True" result="Success" success="True" time="0.405" asserts="0">
                <results>
                  <test-case name="NGit.Diff.DiffEntryTest.ShouldListAddedFileBetweenTwoCommits" executed="True" result="Success" success="True" time="0.046" asserts="6" />
                  <test-case name="NGit.Diff.DiffEntryTest.ShouldListAddedFileInInitialCommit" executed="True" result="Success" success="True" time="0.032" asserts="6" />
                  <test-case name="NGit.Diff.DiffEntryTest.ShouldListChangesInWorkingTree" executed="True" result="Success" success="True" time="0.033" asserts="4" />
                  <test-case name="NGit.Diff.DiffEntryTest.ShouldListDeletionBetweenTwoCommits" executed="True" result="Success" success="True" time="0.048" asserts="6" />
                  <test-case name="NGit.Diff.DiffEntryTest.ShouldListModificationBetweenTwoCommits" executed="True" result="Success" success="True" time="0.052" asserts="5" />
                  <test-case name="NGit.Diff.DiffEntryTest.ShouldListModificationInDirWithModifiedTrees" executed="True" result="Success" success="True" time="0.068" asserts="9" />
                  <test-case name="NGit.Diff.DiffEntryTest.ShouldListModificationInDirWithoutModifiedTrees" executed="True" result="Success" success="True" time="0.062" asserts="5" />
                  <test-case name="NGit.Diff.DiffEntryTest.ShouldReportFileModeChange" executed="True" result="Success" success="True" time="0.052" asserts="10" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DiffFormatterReflowTest" executed="True" result="Failure" success="False" time="0.050" asserts="0">
                <results>
                  <test-case name="NGit.Diff.DiffFormatterReflowTest.TestContext0" executed="True" result="Failure" success="False" time="0.005" asserts="1">
                    <failure>
                      <message><![CDATA[  Expected string length 166 but was 163. Strings differ at index 82.
  Expected: "...-- a/X\r\n+++ b/X\r\n@@ -2,0 +3 @@\r\n+c\r\n@@ -17,2 +17,0 @@\r\n-r\r..."
  But was:  "...-- a/X\r\n+++ b/X\r\n@@ -2,0 +3 @@\n+c\r\n@@ -17,2 +17,0 @@\n-r\r\n-..."
  -------------------------------------------------^
]]></message>
                      <stack-trace><![CDATA[at NGit.Diff.DiffFormatterReflowTest.AssertFormatted(String name) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 187
at NGit.Diff.DiffFormatterReflowTest.AssertFormatted() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 179
at NGit.Diff.DiffFormatterReflowTest.TestContext0() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 96
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Diff.DiffFormatterReflowTest.TestContext1" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                    <failure>
                      <message><![CDATA[  Expected string length 192 but was 189. Strings differ at index 84.
  Expected: "... a/X\r\n+++ b/X\r\n@@ -2,2 +2,3 @@\r\n b\r\n+c\r\n d\r\n@@ -16,4 +17,2..."
  But was:  "... a/X\r\n+++ b/X\r\n@@ -2,2 +2,3 @@\n b\r\n+c\r\n d\r\n@@ -16,4 +17,2 ..."
  -------------------------------------------------^
]]></message>
                      <stack-trace><![CDATA[at NGit.Diff.DiffFormatterReflowTest.AssertFormatted(String name) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 187
at NGit.Diff.DiffFormatterReflowTest.AssertFormatted() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 179
at NGit.Diff.DiffFormatterReflowTest.TestContext1() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 105
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Diff.DiffFormatterReflowTest.TestContext10" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                    <failure>
                      <message><![CDATA[  Expected string length 216 but was 215. Strings differ at index 86.
  Expected: ".../X\r\n+++ b/X\r\n@@ -1,25 +1,28 @@\r\n a\r\n b\r\n+c\r\n d\r\n e\r\n f\r\n g..."
  But was:  ".../X\r\n+++ b/X\r\n@@ -1,25 +1,28 @@\n a\r\n b\r\n+c\r\n d\r\n e\r\n f\r\n g\r..."
  -------------------------------------------------^
]]></message>
                      <stack-trace><![CDATA[at NGit.Diff.DiffFormatterReflowTest.AssertFormatted(String name) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 187
at NGit.Diff.DiffFormatterReflowTest.AssertFormatted() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 179
at NGit.Diff.DiffFormatterReflowTest.TestContext10() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 132
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Diff.DiffFormatterReflowTest.TestContext100" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                    <failure>
                      <message><![CDATA[  Expected string length 216 but was 215. Strings differ at index 86.
  Expected: ".../X\r\n+++ b/X\r\n@@ -1,25 +1,28 @@\r\n a\r\n b\r\n+c\r\n d\r\n e\r\n f\r\n g..."
  But was:  ".../X\r\n+++ b/X\r\n@@ -1,25 +1,28 @@\n a\r\n b\r\n+c\r\n d\r\n e\r\n f\r\n g\r..."
  -------------------------------------------------^
]]></message>
                      <stack-trace><![CDATA[at NGit.Diff.DiffFormatterReflowTest.AssertFormatted(String name) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 187
at NGit.Diff.DiffFormatterReflowTest.AssertFormatted() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 179
at NGit.Diff.DiffFormatterReflowTest.TestContext100() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 141
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Diff.DiffFormatterReflowTest.TestContext3" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                    <failure>
                      <message><![CDATA[  Expected string length 203 but was 201. Strings differ at index 84.
  Expected: "... a/X\r\n+++ b/X\r\n@@ -1,5 +1,6 @@\r\n a\r\n b\r\n+c\r\n d\r\n e\r\n f\r\n@@..."
  But was:  "... a/X\r\n+++ b/X\r\n@@ -1,5 +1,6 @@\n a\r\n b\r\n+c\r\n d\r\n e\r\n f\r\n@@ ..."
  -------------------------------------------------^
]]></message>
                      <stack-trace><![CDATA[at NGit.Diff.DiffFormatterReflowTest.AssertFormatted(String name) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 187
at NGit.Diff.DiffFormatterReflowTest.AssertFormatted() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 179
at NGit.Diff.DiffFormatterReflowTest.TestContext3() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 114
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Diff.DiffFormatterReflowTest.TestContext5" executed="True" result="Failure" success="False" time="0.000" asserts="1">
                    <failure>
                      <message><![CDATA[  Expected string length 219 but was 217. Strings differ at index 84.
  Expected: "... a/X\r\n+++ b/X\r\n@@ -1,7 +1,8 @@\r\n a\r\n b\r\n+c\r\n d\r\n e\r\n f\r\n g..."
  But was:  "... a/X\r\n+++ b/X\r\n@@ -1,7 +1,8 @@\n a\r\n b\r\n+c\r\n d\r\n e\r\n f\r\n g\r..."
  -------------------------------------------------^
]]></message>
                      <stack-trace><![CDATA[at NGit.Diff.DiffFormatterReflowTest.AssertFormatted(String name) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 187
at NGit.Diff.DiffFormatterReflowTest.AssertFormatted() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 179
at NGit.Diff.DiffFormatterReflowTest.TestContext5() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 123
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Diff.DiffFormatterReflowTest.TestEmpty1" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                    <failure>
                      <message><![CDATA[  Expected string length 88 but was 87. Strings differ at index 82.
  Expected: "...69de29..7898192 100644\r\n--- a/E\r\n+++ b/E\r\n@@ -0,0 +1 @@\r\n+a\r\n"
  But was:  "...69de29..7898192 100644\r\n--- a/E\r\n+++ b/E\r\n@@ -0,0 +1 @@\n+a\r\n"
  ----------------------------------------------------------------------------^
]]></message>
                      <stack-trace><![CDATA[at NGit.Diff.DiffFormatterReflowTest.AssertFormatted(String name) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 187
at NGit.Diff.DiffFormatterReflowTest.TestEmpty1() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 149
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Diff.DiffFormatterReflowTest.TestNegativeContextFails" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="NGit.Diff.DiffFormatterReflowTest.TestNoNewLine1" executed="True" result="Failure" success="False" time="0.000" asserts="1">
                    <failure>
                      <message><![CDATA[  Expected string length 119 but was 116. Strings differ at index 80.
  Expected: "...\r\n+++ b/Y\r\n@@ -1 +1 @@\r\n-a\r\n\\ No newline at end of file\r\n+a\r\n"
  But was:  "...\r\n+++ b/Y\r\n@@ -1 +1 @@\n-a\n\\ No newline at end of file\n+a\r\n"
  -----------------------------------------^
]]></message>
                      <stack-trace><![CDATA[at NGit.Diff.DiffFormatterReflowTest.AssertFormatted(String name) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 187
at NGit.Diff.DiffFormatterReflowTest.TestNoNewLine1() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 157
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Diff.DiffFormatterReflowTest.TestNoNewLine2" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                    <failure>
                      <message><![CDATA[  Expected string length 119 but was 116. Strings differ at index 80.
  Expected: "...\r\n+++ b/Z\r\n@@ -1 +1 @@\r\n-a\r\n+a\r\n\\ No newline at end of file\r\n"
  But was:  "...\r\n+++ b/Z\r\n@@ -1 +1 @@\n-a\r\n+a\n\\ No newline at end of file\n"
  -----------------------------------------^
]]></message>
                      <stack-trace><![CDATA[at NGit.Diff.DiffFormatterReflowTest.AssertFormatted(String name) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 187
at NGit.Diff.DiffFormatterReflowTest.TestNoNewLine2() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Diff\DiffFormatterReflowTest.cs:line 165
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DiffFormatterTest" executed="True" result="Success" success="True" time="0.158" asserts="0">
                <results>
                  <test-case name="NGit.Diff.DiffFormatterTest.TestCreateFileHeader_Add" executed="True" result="Success" success="True" time="0.021" asserts="13" />
                  <test-case name="NGit.Diff.DiffFormatterTest.TestCreateFileHeader_Binary" executed="True" result="Success" success="True" time="0.021" asserts="5" />
                  <test-case name="NGit.Diff.DiffFormatterTest.TestCreateFileHeader_Delete" executed="True" result="Success" success="True" time="0.018" asserts="13" />
                  <test-case name="NGit.Diff.DiffFormatterTest.TestCreateFileHeader_GitLink" executed="True" result="Success" success="True" time="0.020" asserts="4" />
                  <test-case name="NGit.Diff.DiffFormatterTest.TestCreateFileHeader_Modify" executed="True" result="Success" success="True" time="0.021" asserts="13" />
                  <test-case name="NGit.Diff.DiffFormatterTest.TestDiff" executed="True" result="Success" success="True" time="0.045" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="EditListTest" executed="True" result="Success" success="True" time="0.009" asserts="0">
                <results>
                  <test-case name="NGit.Diff.EditListTest.TestAddOne" executed="True" result="Success" success="True" time="0.002" asserts="9" />
                  <test-case name="NGit.Diff.EditListTest.TestAddTwo" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                  <test-case name="NGit.Diff.EditListTest.TestEmpty" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NGit.Diff.EditListTest.TestRemove" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Diff.EditListTest.TestSet" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="EditTest" executed="True" result="Success" success="True" time="0.024" asserts="0">
                <results>
                  <test-case name="NGit.Diff.EditTest.TestBeforeAfterCuts" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.EditTest.TestCreate" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Diff.EditTest.TestCreateEmpty" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NGit.Diff.EditTest.TestEquals1" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                  <test-case name="NGit.Diff.EditTest.TestExtendA" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Diff.EditTest.TestExtendB" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.EditTest.TestNotEquals1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Diff.EditTest.TestNotEquals2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Diff.EditTest.TestNotEquals3" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Diff.EditTest.TestNotEquals4" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Diff.EditTest.TestSwap" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NGit.Diff.EditTest.TestToString" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Diff.EditTest.TestType_Delete" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Diff.EditTest.TestType_Empty" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NGit.Diff.EditTest.TestType_Insert" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Diff.EditTest.TestType_Replace" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="HistogramDiffTest" executed="True" result="Success" success="True" time="0.054" asserts="0">
                <results>
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestCreateFile" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestDegenerate_DeleteEnd" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestDegenerate_DeleteMiddle" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestDegenerate_DeleteStart" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestDegenerate_InsertEnd" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestDegenerate_InsertMiddle" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestDegenerate_InsertsIntoMidPosition" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestDegenerate_InsertStart" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestDegenerate_ReplaceMiddle" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestDeleteFile" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestEdit_CommonGrowsPrefixAndSuffix" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestEdit_CommonReplaceCommonDeleteCommon" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestEdit_DuplicateAButCommonUniqueInB" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestEdit_InsertNearCommonTail" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestEdit_InvertBlocks" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestEdit_LinuxBug" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestEdit_MoveBlock" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestEdit_ReplaceCommonDelete" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestEdit_UniqueCommonLargerThanMatchPoint" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Diff.HistogramDiffTest.AbstractDiffTestCase.TestEmptyInputs" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Diff.HistogramDiffTest.TestEdit_LcsContainsUnique" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Diff.HistogramDiffTest.TestEdit_NoUniqueMiddleSide_FlipAndExpand" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Diff.HistogramDiffTest.TestEdit_NoUniqueMiddleSide_FlipBlocks" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Diff.HistogramDiffTest.TestEdit_NoUniqueMiddleSide_Insert2" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Diff.HistogramDiffTest.TestExceedsChainLength_DuringScanOfA" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Diff.HistogramDiffTest.TestExceedsChainLength_DuringScanOfB" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.HistogramDiffTest.TestFallbackToMyersDiff" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MyersDiffTest" executed="True" result="Success" success="True" time="0.022" asserts="0">
                <results>
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestCreateFile" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestDegenerate_DeleteEnd" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestDegenerate_DeleteMiddle" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestDegenerate_DeleteStart" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestDegenerate_InsertEnd" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestDegenerate_InsertMiddle" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestDegenerate_InsertsIntoMidPosition" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestDegenerate_InsertStart" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestDegenerate_ReplaceMiddle" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestDeleteFile" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestEdit_CommonGrowsPrefixAndSuffix" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestEdit_CommonReplaceCommonDeleteCommon" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestEdit_DuplicateAButCommonUniqueInB" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestEdit_InsertNearCommonTail" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestEdit_InvertBlocks" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestEdit_LinuxBug" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestEdit_MoveBlock" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestEdit_ReplaceCommonDelete" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestEdit_UniqueCommonLargerThanMatchPoint" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Diff.MyersDiffTest.AbstractDiffTestCase.TestEmptyInputs" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PatchIdDiffFormatterTest" executed="True" result="Success" success="True" time="0.114" asserts="0">
                <results>
                  <test-case name="NGit.Diff.PatchIdDiffFormatterTest.TestDiff" executed="True" result="Success" success="True" time="0.044" asserts="2" />
                  <test-case name="NGit.Diff.PatchIdDiffFormatterTest.TestSameDiff" executed="True" result="Success" success="True" time="0.069" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RawTextIgnoreAllWhitespaceTest" executed="True" result="Success" success="True" time="0.005" asserts="0">
                <results>
                  <test-case name="NGit.Diff.RawTextIgnoreAllWhitespaceTest.TestEqualsWithoutWhitespace" executed="True" result="Success" success="True" time="0.002" asserts="8" />
                  <test-case name="NGit.Diff.RawTextIgnoreAllWhitespaceTest.TestEqualsWithWhitespace" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RawTextIgnoreLeadingWhitespaceTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-case name="NGit.Diff.RawTextIgnoreLeadingWhitespaceTest.TestEqualsWithoutWhitespace" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                  <test-case name="NGit.Diff.RawTextIgnoreLeadingWhitespaceTest.TestEqualsWithWhitespace" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RawTextIgnoreTrailingWhitespaceTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                <results>
                  <test-case name="NGit.Diff.RawTextIgnoreTrailingWhitespaceTest.TestEqualsWithoutWhitespace" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                  <test-case name="NGit.Diff.RawTextIgnoreTrailingWhitespaceTest.TestEqualsWithWhitespace" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RawTextIgnoreWhitespaceChangeTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-case name="NGit.Diff.RawTextIgnoreWhitespaceChangeTest.TestEqualsWithoutWhitespace" executed="True" result="Success" success="True" time="0.002" asserts="8" />
                  <test-case name="NGit.Diff.RawTextIgnoreWhitespaceChangeTest.TestEqualsWithWhitespace" executed="True" result="Success" success="True" time="0.001" asserts="12" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RawTextTest" executed="True" result="Success" success="True" time="0.017" asserts="0">
                <results>
                  <test-case name="NGit.Diff.RawTextTest.TestComparatorReduceCommonStartButLastLineNoEol" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Diff.RawTextTest.TestComparatorReduceCommonStartButLastLineNoEol_2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Diff.RawTextTest.TestComparatorReduceCommonStartEnd" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                  <test-case name="NGit.Diff.RawTextTest.TestComparatorReduceCommonStartEnd_EmptyLine" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Diff.RawTextTest.TestEmpty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Diff.RawTextTest.TestEquals" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                  <test-case name="NGit.Diff.RawTextTest.TestLineDelimiter" executed="True" result="Success" success="True" time="0.002" asserts="20" />
                  <test-case name="NGit.Diff.RawTextTest.TestWriteLine1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Diff.RawTextTest.TestWriteLine2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Diff.RawTextTest.TestWriteLine3" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RenameDetectorTest" executed="True" result="Success" success="True" time="0.561" asserts="0">
                <results>
                  <test-case name="NGit.Diff.RenameDetectorTest.TestBreakModify_BreakAll" executed="True" result="Success" success="True" time="0.028" asserts="17" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestBreakModify_BreakBelowScore" executed="True" result="Success" success="True" time="0.019" asserts="17" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestBreakModify_BreakNone" executed="True" result="Success" success="True" time="0.019" asserts="4" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestBreakModify_DontBreakAboveScore" executed="True" result="Success" success="True" time="0.019" asserts="4" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestBreakModify_RejoinIfUnpaired" executed="True" result="Success" success="True" time="0.030" asserts="10" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestExactRename_DifferentObjects" executed="True" result="Success" success="True" time="0.020" asserts="5" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestExactRename_ManyRenames" executed="True" result="Success" success="True" time="0.019" asserts="18" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestExactRename_MultipleIdenticalDeletes" executed="True" result="Success" success="True" time="0.018" asserts="12" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestExactRename_OneDeleteManyAdds" executed="True" result="Success" success="True" time="0.018" asserts="26" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestExactRename_OneRename" executed="True" result="Success" success="True" time="0.016" asserts="10" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestExactRename_OneRenameOneModify" executed="True" result="Success" success="True" time="0.019" asserts="11" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestExactRename_PathBreaksTie" executed="True" result="Success" success="True" time="0.017" asserts="26" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestInexactRename_LastByteDifferent" executed="True" result="Success" success="True" time="0.020" asserts="10" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestInexactRename_NewlinesOnly" executed="True" result="Success" success="True" time="0.020" asserts="10" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestInexactRename_OnePair" executed="True" result="Success" success="True" time="0.020" asserts="10" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestInexactRename_OneRenameTwoUnrelatedFiles" executed="True" result="Success" success="True" time="0.026" asserts="12" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestInexactRename_SameContentMultipleTimes" executed="True" result="Success" success="True" time="0.020" asserts="10" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestInexactRenames_OnePair2" executed="True" result="Success" success="True" time="0.021" asserts="10" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestNoRenames_EmptyFile1" executed="True" result="Success" success="True" time="0.017" asserts="3" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestNoRenames_EmptyFile2" executed="True" result="Success" success="True" time="0.019" asserts="4" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestNoRenames_GitlinkAndFile" executed="True" result="Success" success="True" time="0.017" asserts="4" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestNoRenames_SingleByteFiles" executed="True" result="Success" success="True" time="0.020" asserts="4" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestNoRenames_SymlinkAndFile" executed="True" result="Success" success="True" time="0.017" asserts="4" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestNoRenames_SymlinkAndFileSamePath" executed="True" result="Success" success="True" time="0.016" asserts="4" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestRenameLimit" executed="True" result="Success" success="True" time="0.025" asserts="7" />
                  <test-case name="NGit.Diff.RenameDetectorTest.TestSetRenameScore_IllegalArgs" executed="True" result="Success" success="True" time="0.013" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SimilarityIndexTest" executed="True" result="Success" success="True" time="0.011" asserts="0">
                <results>
                  <test-case name="NGit.Diff.SimilarityIndexTest.TestCommonScore_EmptyFiles" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Diff.SimilarityIndexTest.TestCommonScore_SameFiles" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Diff.SimilarityIndexTest.TestCommonScore_SimiliarBy75" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Diff.SimilarityIndexTest.TestCommonScore_TotallyDifferentFiles" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Diff.SimilarityIndexTest.TestIndexingLargeObject" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Diff.SimilarityIndexTest.TestIndexingSmallObject" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Dircache" executed="True" result="Success" success="True" time="0.775" asserts="0">
            <results>
              <test-suite type="TestFixture" name="DirCacheBasicTest" executed="True" result="Success" success="True" time="0.170" asserts="0">
                <results>
                  <test-case name="NGit.Dircache.DirCacheBasicTest.TestBuildThenClear" executed="True" result="Success" success="True" time="0.014" asserts="5" />
                  <test-case name="NGit.Dircache.DirCacheBasicTest.TestDetectUnmergedPaths" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                  <test-case name="NGit.Dircache.DirCacheBasicTest.TestFindOnEmpty" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                  <test-case name="NGit.Dircache.DirCacheBasicTest.TestLockMissing_RealIndex" executed="True" result="Success" success="True" time="0.014" asserts="9" />
                  <test-case name="NGit.Dircache.DirCacheBasicTest.TestLockMissing_TempIndex" executed="True" result="Success" success="True" time="0.013" asserts="9" />
                  <test-case name="NGit.Dircache.DirCacheBasicTest.TestReadMissing_RealIndex" executed="True" result="Success" success="True" time="0.013" asserts="4" />
                  <test-case name="NGit.Dircache.DirCacheBasicTest.TestReadMissing_TempIndex" executed="True" result="Success" success="True" time="0.014" asserts="4" />
                  <test-case name="NGit.Dircache.DirCacheBasicTest.TestWriteEmptyCommit_RealIndex" executed="True" result="Success" success="True" time="0.015" asserts="9" />
                  <test-case name="NGit.Dircache.DirCacheBasicTest.TestWriteEmptyLockEmpty_RealIndex" executed="True" result="Success" success="True" time="0.016" asserts="8" />
                  <test-case name="NGit.Dircache.DirCacheBasicTest.TestWriteEmptyReadEmpty_RealIndex" executed="True" result="Success" success="True" time="0.015" asserts="6" />
                  <test-case name="NGit.Dircache.DirCacheBasicTest.TestWriteEmptyUnlock_RealIndex" executed="True" result="Success" success="True" time="0.014" asserts="7" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DirCacheBuilderIteratorTest" executed="True" result="Success" success="True" time="0.014" asserts="0">
                <results>
                  <test-case name="NGit.Dircache.DirCacheBuilderIteratorTest.TestPathFilterGroup_DoesNotSkipTail" executed="True" result="Success" success="True" time="0.014" asserts="15" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DirCacheBuilderTest" executed="True" result="Success" success="True" time="0.144" asserts="0">
                <results>
                  <test-case name="NGit.Dircache.DirCacheBuilderTest.TestAdd_InGitSortOrder" executed="True" result="Success" success="True" time="0.014" asserts="18" />
                  <test-case name="NGit.Dircache.DirCacheBuilderTest.TestAdd_ReverseGitSortOrder" executed="True" result="Success" success="True" time="0.014" asserts="18" />
                  <test-case name="NGit.Dircache.DirCacheBuilderTest.TestBuildEmpty" executed="True" result="Success" success="True" time="0.015" asserts="4" />
                  <test-case name="NGit.Dircache.DirCacheBuilderTest.TestBuilderClear" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Dircache.DirCacheBuilderTest.TestBuildOneFile_Commit" executed="True" result="Success" success="True" time="0.016" asserts="23" />
                  <test-case name="NGit.Dircache.DirCacheBuilderTest.TestBuildOneFile_Commit_IndexChangedEvent" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                  <test-case name="NGit.Dircache.DirCacheBuilderTest.TestBuildOneFile_FinishWriteCommit" executed="True" result="Success" success="True" time="0.015" asserts="22" />
                  <test-case name="NGit.Dircache.DirCacheBuilderTest.TestBuildRejectsUnsetFileMode" executed="True" result="Success" success="True" time="0.013" asserts="4" />
                  <test-case name="NGit.Dircache.DirCacheBuilderTest.TestFindSingleFile" executed="True" result="Success" success="True" time="0.014" asserts="12" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DirCacheCGitCompatabilityTest" executed="True" result="Success" success="True" time="0.072" asserts="0">
                <results>
                  <test-case name="NGit.Dircache.DirCacheCGitCompatabilityTest.TestCorruptChecksumAtFooter" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="NGit.Dircache.DirCacheCGitCompatabilityTest.TestReadIndex_DirCacheTree" executed="True" result="Success" success="True" time="0.012" asserts="61" />
                  <test-case name="NGit.Dircache.DirCacheCGitCompatabilityTest.TestReadIndex_LsFiles" executed="True" result="Success" success="True" time="0.012" asserts="8624" />
                  <test-case name="NGit.Dircache.DirCacheCGitCompatabilityTest.TestReadWriteV3" executed="True" result="Success" success="True" time="0.005" asserts="32" />
                  <test-case name="NGit.Dircache.DirCacheCGitCompatabilityTest.TestTreeWalk_LsFiles" executed="True" result="Success" success="True" time="0.026" asserts="11499" />
                  <test-case name="NGit.Dircache.DirCacheCGitCompatabilityTest.TestUnsupportedOptionalExtension" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Dircache.DirCacheCGitCompatabilityTest.TestUnsupportedRequiredExtension" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DirCacheEntryTest" executed="True" result="Success" success="True" time="0.012" asserts="0">
                <results>
                  <test-case name="NGit.Dircache.DirCacheEntryTest.TestCopyMetaDataWithoutStage" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Dircache.DirCacheEntryTest.TestCopyMetaDataWithStage" executed="True" result="Success" success="True" time="0.000" asserts="9" />
                  <test-case name="NGit.Dircache.DirCacheEntryTest.TestCreate_ByStringPath" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Dircache.DirCacheEntryTest.TestCreate_ByStringPathAndStage" executed="True" result="Success" success="True" time="0.001" asserts="11" />
                  <test-case name="NGit.Dircache.DirCacheEntryTest.TestIsValidPath" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                  <test-case name="NGit.Dircache.DirCacheEntryTest.TestSetFileMode" executed="True" result="Success" success="True" time="0.001" asserts="11" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DirCacheFindTest" executed="True" result="Success" success="True" time="0.015" asserts="0">
                <results>
                  <test-case name="NGit.Dircache.DirCacheFindTest.TestEntriesWithin" executed="True" result="Success" success="True" time="0.015" asserts="30" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DirCacheIteratorTest" executed="True" result="Success" success="True" time="0.137" asserts="0">
                <results>
                  <test-case name="NGit.Dircache.DirCacheIteratorTest.TestEmptyTree_NoTreeWalk" executed="True" result="Success" success="True" time="0.012" asserts="3" />
                  <test-case name="NGit.Dircache.DirCacheIteratorTest.TestEmptyTree_WithTreeWalk" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Dircache.DirCacheIteratorTest.TestNoSubtree_NoTreeWalk" executed="True" result="Success" success="True" time="0.014" asserts="6" />
                  <test-case name="NGit.Dircache.DirCacheIteratorTest.TestNoSubtree_WithTreeWalk" executed="True" result="Success" success="True" time="0.014" asserts="14" />
                  <test-case name="NGit.Dircache.DirCacheIteratorTest.TestRemovedSubtree" executed="True" result="Success" success="True" time="0.015" asserts="9" />
                  <test-case name="NGit.Dircache.DirCacheIteratorTest.TestSingleSubtree_NoRecursion" executed="True" result="Success" success="True" time="0.015" asserts="19" />
                  <test-case name="NGit.Dircache.DirCacheIteratorTest.TestSingleSubtree_Recursive" executed="True" result="Success" success="True" time="0.013" asserts="32" />
                  <test-case name="NGit.Dircache.DirCacheIteratorTest.TestTwoLevelSubtree_FilterPath" executed="True" result="Success" success="True" time="0.014" asserts="49" />
                  <test-case name="NGit.Dircache.DirCacheIteratorTest.TestTwoLevelSubtree_Recursive" executed="True" result="Success" success="True" time="0.013" asserts="38" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DirCacheLargePathTest" executed="True" result="Success" success="True" time="0.099" asserts="0">
                <results>
                  <test-case name="NGit.Dircache.DirCacheLargePathTest.TestPath_16384" executed="True" result="Success" success="True" time="0.022" asserts="12" />
                  <test-case name="NGit.Dircache.DirCacheLargePathTest.TestPath_4090" executed="True" result="Success" success="True" time="0.017" asserts="12" />
                  <test-case name="NGit.Dircache.DirCacheLargePathTest.TestPath_4094" executed="True" result="Success" success="True" time="0.017" asserts="12" />
                  <test-case name="NGit.Dircache.DirCacheLargePathTest.TestPath_4095" executed="True" result="Success" success="True" time="0.016" asserts="12" />
                  <test-case name="NGit.Dircache.DirCacheLargePathTest.TestPath_4096" executed="True" result="Success" success="True" time="0.017" asserts="12" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DirCachePathEditTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                <results>
                  <test-case name="NGit.Dircache.DirCachePathEditTest.TestAddDeletePathAndTreeNormalNames" executed="True" result="Success" success="True" time="0.002" asserts="8" />
                  <test-case name="NGit.Dircache.DirCachePathEditTest.TestAddDeleteTrickyNames" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DirCacheTreeTest" executed="True" result="Success" success="True" time="0.091" asserts="0">
                <results>
                  <test-case name="NGit.Dircache.DirCacheTreeTest.TestEmptyCache_Clear_NoCacheTree" executed="True" result="Success" success="True" time="0.013" asserts="4" />
                  <test-case name="NGit.Dircache.DirCacheTreeTest.TestEmptyCache_CreateEmptyCacheTree" executed="True" result="Success" success="True" time="0.013" asserts="9" />
                  <test-case name="NGit.Dircache.DirCacheTreeTest.TestEmptyCache_NoCacheTree" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                  <test-case name="NGit.Dircache.DirCacheTreeTest.TestSingleSubtree" executed="True" result="Success" success="True" time="0.013" asserts="16" />
                  <test-case name="NGit.Dircache.DirCacheTreeTest.TestTwoLevelSubtree" executed="True" result="Success" success="True" time="0.014" asserts="23" />
                  <test-case name="NGit.Dircache.DirCacheTreeTest.TestWriteReadTree" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="DirCacheCheckoutTest" executed="True" result="Success" success="True" time="1.899" asserts="0">
            <results>
              <test-case name="NGit.DirCacheCheckoutTest.TestCheckoutHierarchy" executed="True" result="Success" success="True" time="0.067" asserts="20" />
              <test-case name="NGit.DirCacheCheckoutTest.TestCheckoutOutChanges" executed="True" result="Success" success="True" time="0.061" asserts="40" />
              <test-case name="NGit.DirCacheCheckoutTest.TestCheckoutOutChangesAutoCRLFfalse" executed="True" result="Success" success="True" time="0.034" asserts="10" />
              <test-case name="NGit.DirCacheCheckoutTest.TestCheckoutOutChangesAutoCRLFInput" executed="True" result="Success" success="True" time="0.034" asserts="10" />
              <test-case name="NGit.DirCacheCheckoutTest.TestCheckoutOutChangesAutoCRLFtrue" executed="True" result="Success" success="True" time="0.037" asserts="10" />
              <test-case name="NGit.DirCacheCheckoutTest.TestCheckoutOutChangesAutoCRLFtrueBinary" executed="True" result="Success" success="True" time="0.035" asserts="10" />
              <test-case name="NGit.DirCacheCheckoutTest.TestCheckoutUncachedChanges" executed="True" result="Success" success="True" time="0.025" asserts="11" />
              <test-case name="NGit.DirCacheCheckoutTest.TestCloseNameConflicts1" executed="True" result="Success" success="True" time="0.056" asserts="28" />
              <test-case name="NGit.DirCacheCheckoutTest.TestCloseNameConflictsX0" executed="True" result="Success" success="True" time="0.050" asserts="28" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_1" executed="True" result="Success" success="True" time="0.035" asserts="6" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_10" executed="True" result="Success" success="True" time="0.042" asserts="5" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_11" executed="True" result="Success" success="True" time="0.033" asserts="4" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_12" executed="True" result="Success" success="True" time="0.044" asserts="6" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_13" executed="True" result="Success" success="True" time="0.044" asserts="6" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_14" executed="True" result="Success" success="True" time="0.045" asserts="6" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_15" executed="True" result="Success" success="True" time="0.031" asserts="4" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_15b" executed="True" result="Success" success="True" time="0.037" asserts="4" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_16" executed="True" result="Success" success="True" time="0.046" asserts="6" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_17" executed="True" result="Success" success="True" time="0.044" asserts="5" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_18" executed="True" result="Success" success="True" time="0.049" asserts="4" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_19" executed="True" result="Success" success="True" time="0.050" asserts="4" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_2" executed="True" result="Success" success="True" time="0.032" asserts="4" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_3" executed="True" result="Success" success="True" time="0.027" asserts="5" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_4" executed="True" result="Success" success="True" time="0.036" asserts="5" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_5" executed="True" result="Success" success="True" time="0.030" asserts="4" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_6" executed="True" result="Success" success="True" time="0.030" asserts="4" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_7" executed="True" result="Success" success="True" time="0.085" asserts="14" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_8" executed="True" result="Success" success="True" time="0.027" asserts="4" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileConflicts_9" executed="True" result="Success" success="True" time="0.032" asserts="5" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirectoryFileSimple" executed="True" result="Success" success="True" time="0.037" asserts="9" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirtyFileModeEqualHeadMerge" executed="True" result="Success" success="True" time="0.014" asserts="1" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDirtyFileModeEqualIndexMerge" executed="True" result="Success" success="True" time="0.014" asserts="1" />
              <test-case name="NGit.DirCacheCheckoutTest.TestDontOverwriteDirtyFile" executed="True" result="Success" success="True" time="0.030" asserts="12" />
              <test-case name="NGit.DirCacheCheckoutTest.TestFileModeChangeAndContentChangeConflict" executed="True" result="Success" success="True" time="0.014" asserts="1" />
              <test-case name="NGit.DirCacheCheckoutTest.TestFileModeChangeAndContentChangeNoConflict" executed="True" result="Success" success="True" time="0.014" asserts="1" />
              <test-case name="NGit.DirCacheCheckoutTest.TestFileModeChangeWithNoContentChangeUpdate" executed="True" result="Success" success="True" time="0.014" asserts="1" />
              <test-case name="NGit.DirCacheCheckoutTest.TestResetHard" executed="True" result="Success" success="True" time="0.173" asserts="71" />
              <test-case name="NGit.DirCacheCheckoutTest.TestResetHardFromIndexEntryWithoutFileToTreeWithoutFile" executed="True" result="Success" success="True" time="0.070" asserts="4" />
              <test-case name="NGit.DirCacheCheckoutTest.TestRules1thru3_NoIndexEntry" executed="True" result="Success" success="True" time="0.031" asserts="4" />
              <test-case name="NGit.DirCacheCheckoutTest.TestRules4thru13_IndexEntryNotInHead" executed="True" result="Success" success="True" time="0.069" asserts="52" />
              <test-case name="NGit.DirCacheCheckoutTest.TestUntrackedConflicts" executed="True" result="Success" success="True" time="0.060" asserts="29" />
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Events" executed="True" result="Success" success="True" time="0.019" asserts="0">
            <results>
              <test-suite type="TestFixture" name="ConfigChangeEventTest" executed="True" result="Success" success="True" time="0.019" asserts="0">
                <results>
                  <test-case name="NGit.Events.ConfigChangeEventTest.TestFileRepository_ChangeEventsOnlyOnSave" executed="True" result="Success" success="True" time="0.018" asserts="8" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Fnmatch" executed="True" result="Success" success="True" time="0.246" asserts="0">
            <results>
              <test-suite type="TestFixture" name="FileNameMatcherTest" executed="True" result="Success" success="True" time="0.246" asserts="0">
                <results>
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.Test2AlphaGroupsCase0" executed="True" result="Success" success="True" time="0.021" asserts="4" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestAlnumGroupCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestAlnumGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestAlnumGroupCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestAlphaGroupCase0" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestAlphaGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestAlphaGroupCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestBlankGroupCase0" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestBlankGroupCase1" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestBlankGroupCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestBlankGroupCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestBlankGroupCase4" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestCntrlGroupCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestCntrlGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestCombinedRangesInOneGroupCase0" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestCombinedRangesInOneGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestCombinedRangesInOneGroupCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestCopyConstructor" executed="True" result="Success" success="True" time="0.002" asserts="20" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestCreateMatcherForSuffix" executed="True" result="Success" success="True" time="0.002" asserts="20" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestDigitGroupCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestDigitGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestDigitGroupCase2" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestDigitGroupCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestDigitGroupCase4" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestDigitGroupCase5" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestFilePathCase0" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestFilePathCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestFilePathCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestFilePathCase3" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestFilePathSimpleCase" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestGraphGroupCase0" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestGraphGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestGraphGroupCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestGraphGroupCase3" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestGraphGroupCase4" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestGraphGroupCase5" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestIncompleteRangesInOneGroupCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestIncompleteRangesInOneGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestIncompleteRangesInOneGroupCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestInversedGroupCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestInversedGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestInversedGroupCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestInversedGroupCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestLowerGroupCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestLowerGroupCase1" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestLowerGroupCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestLowerGroupCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestLowerGroupCase4" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestLowerGroupCase5" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestManySolutionsCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestManySolutionsCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestManySolutionsCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestManySolutionsCase3" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestManySolutionsCase4" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestMixedGroupCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestMixedGroupCase1" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestMixedGroupCase2" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestMixedGroupCase3" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestMixedGroupCase4" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestMixedGroupCase5" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestMixedGroupCase6" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestMixedGroupCase7" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestMixedGroupCase8" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestMixedGroupCase9" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestPrintGroupCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestPrintGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestPrintGroupCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestPrintGroupCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestPrintGroupCase4" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestPrintGroupCase5" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestPunctGroupCase0" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestPunctGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestPunctGroupCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestPunctGroupCase3" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestReset" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSimpleStarCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSimpleStarCase1" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSimpleStarCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSimpleStarCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpaceGroupCase0" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpaceGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpaceGroupCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpaceGroupCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpaceGroupCase4" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpecialGroupCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpecialGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpecialGroupCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpecialGroupCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpecialGroupCase4" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpecialGroupCase5" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpecialGroupCase6" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpecialGroupCase7" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpecialGroupCase8" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestSpecialGroupCase9" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestTwoGroupsCase0" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestTwoGroupsCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestTwoGroupsCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestTwoGroupsCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestTwoRangesInOneGroupCase0" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestTwoRangesInOneGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestTwoRangesInOneGroupCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestTwoRangesInOneGroupCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestTwoRangesInOneGroupCase4" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestTwoRangesInOneGroupCase5" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestUnsupportedGroupCase0" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestUnsupportedGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestUpperGroupCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestUpperGroupCase1" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestUpperGroupCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestUpperGroupCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestUpperGroupCase4" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestUpperGroupCase5" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleGroupCase0" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleGroupCase2" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleGroupRangeCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleGroupRangeCase1" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleGroupRangeCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleGroupRangeCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleGroupRangeCase4" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleGroupRangeCase5" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimplePatternCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimplePatternCase1" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimplePatternCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimplePatternCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimplePatternCase4" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleStarCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleStarCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleStarCase2" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleWildCardCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleWildCardCase2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleWildCardCase3" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestVerySimpleWirdcardCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestWordroupCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestWordroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestWordroupCase2" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestWordroupCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestWordroupCase4" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestWordroupCase5" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestXDigitGroupCase0" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestXDigitGroupCase1" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestXDigitGroupCase2" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestXDigitGroupCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestXDigitGroupCase4" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestXDigitGroupCase5" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestXDigitGroupCase6" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Fnmatch.FileNameMatcherTest.TestXDigitGroupCase7" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Ignore" executed="True" result="Success" success="True" time="0.117" asserts="0">
            <results>
              <test-suite type="TestFixture" name="IgnoreMatcherTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="NGit.Ignore.IgnoreMatcherTest.TestBasic" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Ignore.IgnoreMatcherTest.TestFileNameWildcards" executed="True" result="Success" success="True" time="0.001" asserts="37" />
                  <test-case name="NGit.Ignore.IgnoreMatcherTest.TestGetters" executed="True" result="Success" success="True" time="0.002" asserts="28" />
                  <test-case name="NGit.Ignore.IgnoreMatcherTest.TestNameOnlyMatches" executed="True" result="Success" success="True" time="0.001" asserts="38" />
                  <test-case name="NGit.Ignore.IgnoreMatcherTest.TestNegation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Ignore.IgnoreMatcherTest.TestParentDirectoryGitIgnores" executed="True" result="Success" success="True" time="0.000" asserts="17" />
                  <test-case name="NGit.Ignore.IgnoreMatcherTest.TestTargetWithoutLeadingSlash" executed="True" result="Success" success="True" time="0.001" asserts="37" />
                  <test-case name="NGit.Ignore.IgnoreMatcherTest.TestTrailingSlash" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="IgnoreNodeTest" executed="True" result="Success" success="True" time="0.099" asserts="0">
                <results>
                  <test-case name="NGit.Ignore.IgnoreNodeTest.TestNegation" executed="True" result="Success" success="True" time="0.021" asserts="36" />
                  <test-case name="NGit.Ignore.IgnoreNodeTest.TestRules" executed="True" result="Success" success="True" time="0.034" asserts="86" />
                  <test-case name="NGit.Ignore.IgnoreNodeTest.TestSlashOnlyMatchesDirectory" executed="True" result="Success" success="True" time="0.018" asserts="26" />
                  <test-case name="NGit.Ignore.IgnoreNodeTest.TestWithSlashDoesNotMatchInSubDirectory" executed="True" result="Success" success="True" time="0.019" asserts="41" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="IndexDiffTest" executed="True" result="Success" success="True" time="0.728" asserts="0">
            <results>
              <test-case name="NGit.IndexDiffTest.TestAdded" executed="True" result="Success" success="True" time="0.035" asserts="8" />
              <test-case name="NGit.IndexDiffTest.TestAssumeUnchanged" executed="True" result="Success" success="True" time="0.056" asserts="12" />
              <test-case name="NGit.IndexDiffTest.TestConflicting" executed="True" result="Success" success="True" time="0.137" asserts="10" />
              <test-case name="NGit.IndexDiffTest.TestConflictingDeletedAndModified" executed="True" result="Success" success="True" time="0.100" asserts="10" />
              <test-case name="NGit.IndexDiffTest.TestConflictingFromMultipleCreations" executed="True" result="Success" success="True" time="0.103" asserts="10" />
              <test-case name="NGit.IndexDiffTest.TestModified" executed="True" result="Success" success="True" time="0.037" asserts="11" />
              <test-case name="NGit.IndexDiffTest.TestRemoved" executed="True" result="Success" success="True" time="0.022" asserts="9" />
              <test-case name="NGit.IndexDiffTest.TestRemovedUntracked" executed="True" result="Success" success="True" time="0.037" asserts="4" />
              <test-case name="NGit.IndexDiffTest.TestUnchangedComplex" executed="True" result="Success" success="True" time="0.055" asserts="7" />
              <test-case name="NGit.IndexDiffTest.TestUnchangedSimple" executed="True" result="Success" success="True" time="0.043" asserts="7" />
              <test-case name="NGit.IndexDiffTest.TestUntrackedFolders" executed="True" result="Success" success="True" time="0.085" asserts="5" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="IndexModificationTimesTest" executed="True" result="Success" success="True" time="2.154" asserts="0">
            <results>
              <test-case name="NGit.IndexModificationTimesTest.TestLastModifiedTimes" executed="True" result="Success" success="True" time="0.060" asserts="5" />
              <test-case name="NGit.IndexModificationTimesTest.TestModify" executed="True" result="Success" success="True" time="2.092" asserts="3" />
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Merge" executed="True" result="Success" success="True" time="1.320" asserts="0">
            <results>
              <test-suite type="TestFixture" name="CherryPickTest" executed="True" result="Success" success="True" time="0.088" asserts="0">
                <results>
                  <test-case name="NGit.Merge.CherryPickTest.TestPick" executed="True" result="Success" success="True" time="0.046" asserts="12" />
                  <test-case name="NGit.Merge.CherryPickTest.TestRevert" executed="True" result="Success" success="True" time="0.038" asserts="9" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MergeAlgorithmTest" executed="True" result="Success" success="True" time="0.021" asserts="0">
                <results>
                  <test-case name="NGit.Merge.MergeAlgorithmTest.TestAdjacentModifications" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="NGit.Merge.MergeAlgorithmTest.TestConflictAtEnd" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Merge.MergeAlgorithmTest.TestConflictAtStart" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Merge.MergeAlgorithmTest.TestDeleteVsModify" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Merge.MergeAlgorithmTest.TestEmptyTexts" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NGit.Merge.MergeAlgorithmTest.TestInsertVsModify" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Merge.MergeAlgorithmTest.TestNoAgainstOneModification" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Merge.MergeAlgorithmTest.TestOneAgainstTwoConflictingModifications" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Merge.MergeAlgorithmTest.TestSameModification" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Merge.MergeAlgorithmTest.TestSeperateModifications" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Merge.MergeAlgorithmTest.TestTwoComplicatedModifications" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Merge.MergeAlgorithmTest.TestTwoConflictingModifications" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Merge.MergeAlgorithmTest.TestTwoNonConflictingModifications" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Merge.MergeAlgorithmTest.TestTwoSimilarModsAndOneInsert" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MergeMessageFormatterTest" executed="True" result="Success" success="True" time="0.489" asserts="0">
                <results>
                  <test-case name="NGit.Merge.MergeMessageFormatterTest.TestCommit" executed="True" result="Success" success="True" time="0.057" asserts="2" />
                  <test-case name="NGit.Merge.MergeMessageFormatterTest.TestIntoHeadOtherThanMaster" executed="True" result="Success" success="True" time="0.039" asserts="2" />
                  <test-case name="NGit.Merge.MergeMessageFormatterTest.TestIntoOtherThanMaster" executed="True" result="Success" success="True" time="0.038" asserts="2" />
                  <test-case name="NGit.Merge.MergeMessageFormatterTest.TestIntoSymbolicRefHeadPointingToMaster" executed="True" result="Success" success="True" time="0.039" asserts="2" />
                  <test-case name="NGit.Merge.MergeMessageFormatterTest.TestMixed" executed="True" result="Success" success="True" time="0.039" asserts="2" />
                  <test-case name="NGit.Merge.MergeMessageFormatterTest.TestOneBranch" executed="True" result="Success" success="True" time="0.040" asserts="2" />
                  <test-case name="NGit.Merge.MergeMessageFormatterTest.TestPullWithUri" executed="True" result="Success" success="True" time="0.060" asserts="2" />
                  <test-case name="NGit.Merge.MergeMessageFormatterTest.TestRemoteBranch" executed="True" result="Success" success="True" time="0.040" asserts="2" />
                  <test-case name="NGit.Merge.MergeMessageFormatterTest.TestTag" executed="True" result="Success" success="True" time="0.039" asserts="2" />
                  <test-case name="NGit.Merge.MergeMessageFormatterTest.TestThreeBranches" executed="True" result="Success" success="True" time="0.040" asserts="2" />
                  <test-case name="NGit.Merge.MergeMessageFormatterTest.TestTwoBranches" executed="True" result="Success" success="True" time="0.042" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ResolveMergerTest" executed="True" result="Success" success="True" time="0.087" asserts="0">
                <results>
                  <test-case name="NGit.Merge.ResolveMergerTest.FailingPathsShouldNotResultInOKReturnValue" executed="True" result="Success" success="True" time="0.086" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SimpleMergeTest" executed="True" result="Success" success="True" time="0.581" asserts="0">
                <results>
                  <test-case name="NGit.Merge.SimpleMergeTest.TestOurs" executed="True" result="Success" success="True" time="0.030" asserts="3" />
                  <test-case name="NGit.Merge.SimpleMergeTest.TestTheirs" executed="True" result="Success" success="True" time="0.029" asserts="3" />
                  <test-case name="NGit.Merge.SimpleMergeTest.TestTrivialTwoWay" executed="True" result="Success" success="True" time="0.029" asserts="3" />
                  <test-case name="NGit.Merge.SimpleMergeTest.TestTrivialTwoWay_concurrentSubtreeChange" executed="True" result="Success" success="True" time="0.069" asserts="9" />
                  <test-case name="NGit.Merge.SimpleMergeTest.TestTrivialTwoWay_conflict" executed="True" result="Success" success="True" time="0.028" asserts="2" />
                  <test-case name="NGit.Merge.SimpleMergeTest.TestTrivialTwoWay_conflictSubtreeChange" executed="True" result="Success" success="True" time="0.055" asserts="2" />
                  <test-case name="NGit.Merge.SimpleMergeTest.TestTrivialTwoWay_disjointhistories" executed="True" result="Success" success="True" time="0.029" asserts="3" />
                  <test-case name="NGit.Merge.SimpleMergeTest.TestTrivialTwoWay_leftDFconflict1" executed="True" result="Success" success="True" time="0.051" asserts="2" />
                  <test-case name="NGit.Merge.SimpleMergeTest.TestTrivialTwoWay_leftDFconflict2" executed="True" result="Success" success="True" time="0.052" asserts="2" />
                  <test-case name="NGit.Merge.SimpleMergeTest.TestTrivialTwoWay_ok" executed="True" result="Success" success="True" time="0.029" asserts="3" />
                  <test-case name="NGit.Merge.SimpleMergeTest.TestTrivialTwoWay_rightDFconflict1" executed="True" result="Success" success="True" time="0.052" asserts="2" />
                  <test-case name="NGit.Merge.SimpleMergeTest.TestTrivialTwoWay_rightDFconflict2" executed="True" result="Success" success="True" time="0.049" asserts="2" />
                  <test-case name="NGit.Merge.SimpleMergeTest.TestTrivialTwoWay_validSubtreeSort" executed="True" result="Success" success="True" time="0.060" asserts="12" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SquashMessageFormatterTest" executed="True" result="Success" success="True" time="0.043" asserts="0">
                <results>
                  <test-case name="NGit.Merge.SquashMessageFormatterTest.TestCommit" executed="True" result="Success" success="True" time="0.042" asserts="2" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MergeHeadMsgTest" executed="True" result="Success" success="True" time="0.036" asserts="0">
            <results>
              <test-case name="NGit.MergeHeadMsgTest.TestReadWriteMergeHeads" executed="True" result="Success" success="True" time="0.018" asserts="13" />
              <test-case name="NGit.MergeHeadMsgTest.TestReadWriteMergeMsg" executed="True" result="Success" success="True" time="0.015" asserts="8" />
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Nls" executed="True" result="Success" success="True" time="0.022" asserts="0">
            <results>
              <test-suite type="TestFixture" name="NLSTest" executed="True" result="Success" success="True" time="0.013" asserts="0">
                <results>
                  <test-case name="NGit.Nls.NLSTest.TestJVMDefaultLocale" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Nls.NLSTest.TestNLSLocale" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Nls.NLSTest.TestParallelThreadsWithDifferentLocales" executed="True" result="Success" success="True" time="0.007" asserts="2" />
                  <test-case name="NGit.Nls.NLSTest.TestThreadTranslationBundleInheritance" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[.NET does not have inherited thread locals]]></message>
                    </reason>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TranslationBundleTest" executed="True" result="Success" success="True" time="0.007" asserts="0">
                <results>
                  <test-case name="NGit.Nls.TranslationBundleTest.TestGermanTranslation" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NGit.Nls.TranslationBundleTest.TestMissingPropertiesFile" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Nls.TranslationBundleTest.TestMissingString" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                  <test-case name="NGit.Nls.TranslationBundleTest.TestNonTranslatedBundle" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[This does not pass. Not sure why EffectiveLocale would ever equal NLS.ROOT_LOCALE]]></message>
                    </reason>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Notes" executed="True" result="Success" success="True" time="15.062" asserts="0">
            <results>
              <test-suite type="TestFixture" name="DefaultNoteMergerTest" executed="True" result="Success" success="True" time="0.163" asserts="0">
                <results>
                  <test-case name="NGit.Notes.DefaultNoteMergerTest.TestAddAdd" executed="True" result="Success" success="True" time="0.038" asserts="5" />
                  <test-case name="NGit.Notes.DefaultNoteMergerTest.TestDeleteDelete" executed="True" result="Success" success="True" time="0.018" asserts="2" />
                  <test-case name="NGit.Notes.DefaultNoteMergerTest.TestEditDelete" executed="True" result="Success" success="True" time="0.021" asserts="3" />
                  <test-case name="NGit.Notes.DefaultNoteMergerTest.TestEditEdit" executed="True" result="Success" success="True" time="0.032" asserts="5" />
                  <test-case name="NGit.Notes.DefaultNoteMergerTest.TestIdenticalAdd" executed="True" result="Success" success="True" time="0.022" asserts="2" />
                  <test-case name="NGit.Notes.DefaultNoteMergerTest.TestIdenticalEdit" executed="True" result="Success" success="True" time="0.022" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="LeafBucketTest" executed="True" result="Success" success="True" time="0.024" asserts="0">
                <results>
                  <test-case name="NGit.Notes.LeafBucketTest.TestEmpty" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Notes.LeafBucketTest.TestParseFive" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                  <test-case name="NGit.Notes.LeafBucketTest.TestRemoveFirst" executed="True" result="Success" success="True" time="0.001" asserts="13" />
                  <test-case name="NGit.Notes.LeafBucketTest.TestRemoveLast" executed="True" result="Success" success="True" time="0.001" asserts="13" />
                  <test-case name="NGit.Notes.LeafBucketTest.TestRemoveMakesEmpty" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Notes.LeafBucketTest.TestRemoveMiddle" executed="True" result="Success" success="True" time="0.001" asserts="13" />
                  <test-case name="NGit.Notes.LeafBucketTest.TestRemoveMissingNote" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Notes.LeafBucketTest.TestSet_Replace" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NGit.Notes.LeafBucketTest.TestSetFive_InOrder" executed="True" result="Success" success="True" time="0.001" asserts="12" />
                  <test-case name="NGit.Notes.LeafBucketTest.TestSetFive_MixedOrder" executed="True" result="Success" success="True" time="0.000" asserts="12" />
                  <test-case name="NGit.Notes.LeafBucketTest.TestSetFive_ReverseOrder" executed="True" result="Success" success="True" time="0.001" asserts="12" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NoteMapMergerTest" executed="True" result="Success" success="True" time="14.232" asserts="0">
                <results>
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestAddDifferentNotes" executed="True" result="Success" success="True" time="0.056" asserts="5" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestAddSameNoteDifferentContent" executed="True" result="Success" success="True" time="0.045" asserts="4" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestBaseEqualsOurs" executed="True" result="Success" success="True" time="0.035" asserts="12" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestBaseEqualsTheirs" executed="True" result="Success" success="True" time="0.036" asserts="12" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestCollapseFanoutAfterMerge" executed="True" result="Success" success="True" time="1.970" asserts="4" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestDeleteDifferentNotes" executed="True" result="Success" success="True" time="0.039" asserts="2" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestEditDeleteConflict" executed="True" result="Success" success="True" time="0.041" asserts="4" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestEditDifferentNotes" executed="True" result="Success" success="True" time="0.047" asserts="4" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestEditSameNoteDifferentContent" executed="True" result="Success" success="True" time="0.051" asserts="3" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestFanoutAndLeafWitConflict" executed="True" result="Success" success="True" time="2.493" asserts="3" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestFanoutAndLeafWithoutConflict" executed="True" result="Success" success="True" time="1.853" asserts="2" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestLargeTreesWithConflict" executed="True" result="Success" success="True" time="3.706" asserts="5" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestLargeTreesWithoutConflict" executed="True" result="Success" success="True" time="3.606" asserts="5" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestNoChange" executed="True" result="Success" success="True" time="0.038" asserts="5" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestNonNotesWithNonNoteConflict" executed="True" result="Success" success="True" time="0.076" asserts="1" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestNonNotesWithoutNonNoteConflict" executed="True" result="Success" success="True" time="0.077" asserts="2" />
                  <test-case name="NGit.Notes.NoteMapMergerTest.TestOursEqualsTheirs" executed="True" result="Success" success="True" time="0.036" asserts="14" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NoteMapTest" executed="True" result="Success" success="True" time="0.635" asserts="0">
                <results>
                  <test-case name="NGit.Notes.NoteMapTest.TestCreateFromEmpty" executed="True" result="Success" success="True" time="0.025" asserts="9" />
                  <test-case name="NGit.Notes.NoteMapTest.TestEditFanout2_38" executed="True" result="Success" success="True" time="0.050" asserts="12" />
                  <test-case name="NGit.Notes.NoteMapTest.TestEditFlat" executed="True" result="Success" success="True" time="0.040" asserts="52" />
                  <test-case name="NGit.Notes.NoteMapTest.TestGetCachedBytes" executed="True" result="Success" success="True" time="0.024" asserts="3" />
                  <test-case name="NGit.Notes.NoteMapTest.TestLeafSplitsWhenFull" executed="True" result="Success" success="True" time="0.099" asserts="258" />
                  <test-case name="NGit.Notes.NoteMapTest.TestReadFanout2_2_36" executed="True" result="Success" success="True" time="0.044" asserts="8" />
                  <test-case name="NGit.Notes.NoteMapTest.TestReadFanout2_38" executed="True" result="Success" success="True" time="0.037" asserts="8" />
                  <test-case name="NGit.Notes.NoteMapTest.TestReadFlatTwoNotes" executed="True" result="Success" success="True" time="0.031" asserts="8" />
                  <test-case name="NGit.Notes.NoteMapTest.TestReadFullyFannedOut" executed="True" result="Success" success="True" time="0.144" asserts="8" />
                  <test-case name="NGit.Notes.NoteMapTest.TestRemoveDeletesTreeFanout2_38" executed="True" result="Success" success="True" time="0.035" asserts="2" />
                  <test-case name="NGit.Notes.NoteMapTest.TestWriteUnchangedFanout2_38" executed="True" result="Success" success="True" time="0.051" asserts="7" />
                  <test-case name="NGit.Notes.NoteMapTest.TestWriteUnchangedFlat" executed="True" result="Success" success="True" time="0.036" asserts="5" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ObjectCheckerTest" executed="True" result="Success" success="True" time="0.152" asserts="0">
            <results>
              <test-case name="NGit.ObjectCheckerTest.TestCheckBlob" executed="True" result="Success" success="True" time="0.001" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidAuthor1" executed="True" result="Success" success="True" time="0.003" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidAuthor2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidAuthor3" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidAuthor4" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidAuthor5" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidAuthor6" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidAuthor7" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidCommitter" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidParent1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidParent2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidParent3" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidParent4" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidParent5" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidTree1" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidTree2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidTree3" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitInvalidTree4" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitNoAuthor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitNoCommitter1" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitNoCommitter2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitNoTree1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitNoTree2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitNoTree3" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidCommitNoTree4" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagInvalidTaggerHeader1" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagInvalidTaggerHeader3" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagNoObject1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagNoObject2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagNoObject3" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagNoObject4" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagNoObject5" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagNoObject6" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagNoTagHeader1" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagNoTagHeader2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagNoTagHeader3" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagNoType1" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagNoType2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagNoType3" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTagNoType4" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeBadSorting1" executed="True" result="Success" success="True" time="0.003" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeBadSorting2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeBadSorting3" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeDuplicateNames1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeDuplicateNames2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeDuplicateNames3" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeDuplicateNames4" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeModeMissingName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeModeNotOctal1" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeModeNotOctal2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeModeNotSupportedMode1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeModeNotSupportedMode2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeModeStartsWithZero1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeModeStartsWithZero2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeModeStartsWithZero3" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeNameContainsSlash" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeNameIsDot" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeNameIsDotDot" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeNameIsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeTruncatedInName" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidTreeTruncatedInObjectId" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestInvalidType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectCheckerTest.TestValidCommit128Parent" executed="True" result="Success" success="True" time="0.001" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidCommit1Parent" executed="True" result="Success" success="True" time="0.001" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidCommit2Parent" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidCommitBlankAuthor" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidCommitNoParent" executed="True" result="Success" success="True" time="0.001" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidCommitNormalTime" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidEmptyTree" executed="True" result="Success" success="True" time="0.001" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTag" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTagHasNoTaggerHeader" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTree1" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTree2" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTree3" executed="True" result="Success" success="True" time="0.001" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTree4" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTree5" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTree6" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTreeSorting1" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTreeSorting2" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTreeSorting3" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTreeSorting4" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTreeSorting5" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTreeSorting6" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTreeSorting7" executed="True" result="Success" success="True" time="0.000" asserts="0" />
              <test-case name="NGit.ObjectCheckerTest.TestValidTreeSorting8" executed="True" result="Success" success="True" time="0.000" asserts="0" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ObjectIdOwnerMapTest" executed="True" result="Success" success="True" time="0.031" asserts="0">
            <results>
              <test-case name="NGit.ObjectIdOwnerMapTest.TestAddGetAndContains" executed="True" result="Success" success="True" time="0.002" asserts="10" />
              <test-case name="NGit.ObjectIdOwnerMapTest.TestAddGrowsWithObjects" executed="True" result="Success" success="True" time="0.007" asserts="16354" />
              <test-case name="NGit.ObjectIdOwnerMapTest.TestAddIfAbsent" executed="True" result="Success" success="True" time="0.001" asserts="9" />
              <test-case name="NGit.ObjectIdOwnerMapTest.TestAddIfAbsentGrowsWithObjects" executed="True" result="Success" success="True" time="0.007" asserts="16354" />
              <test-case name="NGit.ObjectIdOwnerMapTest.TestClear" executed="True" result="Success" success="True" time="0.001" asserts="6" />
              <test-case name="NGit.ObjectIdOwnerMapTest.TestEmptyMap" executed="True" result="Success" success="True" time="0.000" asserts="5" />
              <test-case name="NGit.ObjectIdOwnerMapTest.TestIterator" executed="True" result="Success" success="True" time="0.003" asserts="8" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ObjectIdRefTest" executed="True" result="Success" success="True" time="0.005" asserts="0">
            <results>
              <test-case name="NGit.ObjectIdRefTest.TestConstructor_Peeled" executed="True" result="Success" success="True" time="0.001" asserts="12" />
              <test-case name="NGit.ObjectIdRefTest.TestConstructor_PeeledStatusNotKnown" executed="True" result="Success" success="True" time="0.000" asserts="18" />
              <test-case name="NGit.ObjectIdRefTest.TestToString" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ObjectIdSubclassMapTest" executed="True" result="Success" success="True" time="0.023" asserts="0">
            <results>
              <test-case name="NGit.ObjectIdSubclassMapTest.TestAddGetAndContains" executed="True" result="Success" success="True" time="0.003" asserts="10" />
              <test-case name="NGit.ObjectIdSubclassMapTest.TestAddGrowsWithObjects" executed="True" result="Success" success="True" time="0.003" asserts="7970" />
              <test-case name="NGit.ObjectIdSubclassMapTest.TestAddIfAbsent" executed="True" result="Success" success="True" time="0.001" asserts="9" />
              <test-case name="NGit.ObjectIdSubclassMapTest.TestAddIfAbsentGrowsWithObjects" executed="True" result="Success" success="True" time="0.002" asserts="7970" />
              <test-case name="NGit.ObjectIdSubclassMapTest.TestClear" executed="True" result="Success" success="True" time="0.001" asserts="6" />
              <test-case name="NGit.ObjectIdSubclassMapTest.TestEmptyMap" executed="True" result="Success" success="True" time="0.000" asserts="5" />
              <test-case name="NGit.ObjectIdSubclassMapTest.TestIterator" executed="True" result="Success" success="True" time="0.002" asserts="8" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ObjectIdTest" executed="True" result="Success" success="True" time="0.018" asserts="0">
            <results>
              <test-case name="NGit.ObjectIdTest.Test001_toString" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectIdTest.Test002_toString" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectIdTest.Test003_equals" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="NGit.ObjectIdTest.Test004_isId" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectIdTest.Test005_notIsId" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectIdTest.Test006_notIsId" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectIdTest.Test007_isId" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectIdTest.Test008_notIsId" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectIdTest.Test009_toString" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectIdTest.Test010_toString" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectIdTest.Test011_toString" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ObjectIdTest.TestGetByte" executed="True" result="Success" success="True" time="0.001" asserts="21" />
              <test-case name="NGit.ObjectIdTest.TestSetByte" executed="True" result="Success" success="True" time="0.001" asserts="81" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ObjectLoaderTest" executed="True" result="Success" success="True" time="0.013" asserts="0">
            <results>
              <test-case name="NGit.ObjectLoaderTest.TestLargeObjectLoader" executed="True" result="Success" success="True" time="0.004" asserts="15" />
              <test-case name="NGit.ObjectLoaderTest.TestLimitedGetCachedBytes" executed="True" result="Success" success="True" time="0.000" asserts="5" />
              <test-case name="NGit.ObjectLoaderTest.TestLimitedGetCachedBytesExceedsJavaLimits" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ObjectLoaderTest.TestSmallObjectLoader" executed="True" result="Success" success="True" time="0.002" asserts="23" />
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Patch" executed="True" result="Failure" success="False" time="0.156" asserts="0">
            <results>
              <test-suite type="TestFixture" name="EditListTest" executed="True" result="Success" success="True" time="0.005" asserts="0">
                <results>
                  <test-case name="NGit.Patch.EditListTest.TestFileHeader" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Patch.EditListTest.TestHunkHeader" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Patch.EditListTest.TestTypes" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="FileHeaderTest" executed="True" result="Success" success="True" time="0.039" asserts="0">
                <results>
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseAbbrIndexLine_NoMode" executed="True" result="Success" success="True" time="0.001" asserts="15" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseAbbrIndexLine_WithMode" executed="True" result="Success" success="True" time="0.001" asserts="15" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseCopy100" executed="True" result="Success" success="True" time="0.002" asserts="14" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseFullIndexLine_NoMode" executed="True" result="Success" success="True" time="0.000" asserts="13" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseFullIndexLine_WithMode" executed="True" result="Success" success="True" time="0.000" asserts="13" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseGitFileName_DqFooSpLfNulBar" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[This test does not pass and am not sure why]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseGitFileName_DqFooTabBar" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseGitFileName_Empty" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseGitFileName_EmptyHeader" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseGitFileName_FailFooBar" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseGitFileName_Foo" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseGitFileName_FooSpBar" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseGitFileName_NoLF" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseGitFileName_NoSecondLine" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseGitFileName_SrcFooC" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseGitFileName_SrcFooCNonStandardPrefix" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseModeChange" executed="True" result="Success" success="True" time="0.000" asserts="12" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseRename100_NewStyle" executed="True" result="Success" success="True" time="0.000" asserts="14" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseRename100_OldStyle" executed="True" result="Success" success="True" time="0.000" asserts="14" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseUnicodeName_DeleteFile" executed="True" result="Success" success="True" time="0.000" asserts="13" />
                  <test-case name="NGit.Patch.FileHeaderTest.TestParseUnicodeName_NewFile" executed="True" result="Success" success="True" time="0.001" asserts="13" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="GetTextTest" executed="True" result="Failure" success="False" time="0.011" asserts="0">
                <results>
                  <test-case name="NGit.Patch.GetTextTest.TestGetText_BothISO88591" executed="True" result="Success" success="True" time="0.004" asserts="4" />
                  <test-case name="NGit.Patch.GetTextTest.TestGetText_Convert" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Test relies on java regex and java character escape codes]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Patch.GetTextTest.TestGetText_DiffCc" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Test relies on java regex and java character escape codes]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Patch.GetTextTest.TestGetText_NoBinary" executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[NGit.Errors.InvalidObjectIdException : Invalid id : 4433c54]]></message>
                      <stack-trace><![CDATA[at NGit.AbbreviatedObjectId.FromHexString(Byte[] bs, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 174
at NGit.AbbreviatedObjectId.FromString(Byte[] buf, Int32 offset, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 119
at NGit.Patch.FileHeader.ParseIndexLine(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\FileHeader.cs:line 730
at NGit.Patch.FileHeader.ParseGitHeaders(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\FileHeader.cs:line 584
at NGit.Patch.Patch.ParseDiffGit(Byte[] buf, Int32 start, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 260
at NGit.Patch.Patch.ParseFile(Byte[] buf, Int32 c, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 202
at NGit.Patch.Patch.Parse(Byte[] buf, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 180
at NGit.Patch.Patch.Parse(InputStream is) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 143
at NGit.Patch.GetTextTest.ParseTestPatchFile() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\GetTextTest.cs:line 139
at NGit.Patch.GetTextTest.TestGetText_NoBinary() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\GetTextTest.cs:line 73
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PatchCcErrorTest" executed="True" result="Failure" success="False" time="0.006" asserts="0">
                <results>
                  <test-case name="NGit.Patch.PatchCcErrorTest.TestError_CcTruncatedOld" executed="True" result="Error" success="False" time="0.005" asserts="0">
                    <failure>
                      <message><![CDATA[NGit.Errors.InvalidObjectIdException : Invalid id : fd85931]]></message>
                      <stack-trace><![CDATA[at NGit.AbbreviatedObjectId.FromHexString(Byte[] bs, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 174
at NGit.AbbreviatedObjectId.FromString(Byte[] buf, Int32 offset, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 119
at NGit.Patch.CombinedFileHeader.ParseIndexLine(Int32 ptr, Int32 eol) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\CombinedFileHeader.cs:line 219
at NGit.Patch.CombinedFileHeader.ParseGitHeaders(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\CombinedFileHeader.cs:line 164
at NGit.Patch.Patch.ParseDiffCombined(Byte[] hdr, Byte[] buf, Int32 start, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 275
at NGit.Patch.Patch.ParseFile(Byte[] buf, Int32 c, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 206
at NGit.Patch.Patch.Parse(Byte[] buf, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 180
at NGit.Patch.Patch.Parse(InputStream is) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 143
at NGit.Patch.PatchCcErrorTest.ParseTestPatchFile() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchCcErrorTest.cs:line 104
at NGit.Patch.PatchCcErrorTest.TestError_CcTruncatedOld() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchCcErrorTest.cs:line 58
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PatchCcTest" executed="True" result="Failure" success="False" time="0.013" asserts="0">
                <results>
                  <test-case name="NGit.Patch.PatchCcTest.TestParse_CcDeleteFile" executed="True" result="Error" success="False" time="0.002" asserts="0">
                    <failure>
                      <message><![CDATA[NGit.Errors.InvalidObjectIdException : Invalid id : 0000000]]></message>
                      <stack-trace><![CDATA[at NGit.AbbreviatedObjectId.FromHexString(Byte[] bs, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 174
at NGit.AbbreviatedObjectId.FromString(Byte[] buf, Int32 offset, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 119
at NGit.Patch.CombinedFileHeader.ParseIndexLine(Int32 ptr, Int32 eol) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\CombinedFileHeader.cs:line 219
at NGit.Patch.CombinedFileHeader.ParseGitHeaders(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\CombinedFileHeader.cs:line 164
at NGit.Patch.Patch.ParseDiffCombined(Byte[] hdr, Byte[] buf, Int32 start, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 275
at NGit.Patch.Patch.ParseFile(Byte[] buf, Int32 c, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 206
at NGit.Patch.Patch.Parse(Byte[] buf, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 180
at NGit.Patch.Patch.Parse(InputStream is) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 143
at NGit.Patch.PatchCcTest.ParseTestPatchFile() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchCcTest.cs:line 189
at NGit.Patch.PatchCcTest.TestParse_CcDeleteFile() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchCcTest.cs:line 153
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Patch.PatchCcTest.TestParse_CcNewFile" executed="True" result="Error" success="False" time="0.003" asserts="0">
                    <failure>
                      <message><![CDATA[NGit.Errors.InvalidObjectIdException : Invalid id : 4bcfe98]]></message>
                      <stack-trace><![CDATA[at NGit.AbbreviatedObjectId.FromHexString(Byte[] bs, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 174
at NGit.AbbreviatedObjectId.FromString(Byte[] buf, Int32 offset, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 119
at NGit.Patch.CombinedFileHeader.ParseIndexLine(Int32 ptr, Int32 eol) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\CombinedFileHeader.cs:line 219
at NGit.Patch.CombinedFileHeader.ParseGitHeaders(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\CombinedFileHeader.cs:line 164
at NGit.Patch.Patch.ParseDiffCombined(Byte[] hdr, Byte[] buf, Int32 start, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 275
at NGit.Patch.Patch.ParseFile(Byte[] buf, Int32 c, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 206
at NGit.Patch.Patch.Parse(Byte[] buf, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 180
at NGit.Patch.Patch.Parse(InputStream is) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 143
at NGit.Patch.PatchCcTest.ParseTestPatchFile() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchCcTest.cs:line 189
at NGit.Patch.PatchCcTest.TestParse_CcNewFile() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchCcTest.cs:line 107
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Patch.PatchCcTest.TestParse_OneFileCc" executed="True" result="Error" success="False" time="0.002" asserts="0">
                    <failure>
                      <message><![CDATA[NGit.Errors.InvalidObjectIdException : Invalid id : fd85931]]></message>
                      <stack-trace><![CDATA[at NGit.AbbreviatedObjectId.FromHexString(Byte[] bs, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 174
at NGit.AbbreviatedObjectId.FromString(Byte[] buf, Int32 offset, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 119
at NGit.Patch.CombinedFileHeader.ParseIndexLine(Int32 ptr, Int32 eol) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\CombinedFileHeader.cs:line 219
at NGit.Patch.CombinedFileHeader.ParseGitHeaders(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\CombinedFileHeader.cs:line 164
at NGit.Patch.Patch.ParseDiffCombined(Byte[] hdr, Byte[] buf, Int32 start, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 275
at NGit.Patch.Patch.ParseFile(Byte[] buf, Int32 c, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 206
at NGit.Patch.Patch.Parse(Byte[] buf, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 180
at NGit.Patch.Patch.Parse(InputStream is) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 143
at NGit.Patch.PatchCcTest.ParseTestPatchFile() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchCcTest.cs:line 189
at NGit.Patch.PatchCcTest.TestParse_OneFileCc() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchCcTest.cs:line 60
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PatchErrorTest" executed="True" result="Failure" success="False" time="0.029" asserts="0">
                <results>
                  <test-case name="NGit.Patch.PatchErrorTest.TestError_BodyTooLong" executed="True" result="Failure" success="False" time="0.003" asserts="5">
                    <failure>
                      <message><![CDATA[  Expected: 349
  But was:  353
]]></message>
                      <stack-trace><![CDATA[at NGit.Patch.PatchErrorTest.TestError_BodyTooLong() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchErrorTest.cs:line 117
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Patch.PatchErrorTest.TestError_DisconnectedHunk" executed="True" result="Failure" success="False" time="0.002" asserts="2">
                    <failure>
                      <message><![CDATA[  Expected string length 63 but was 64. Strings differ at index 63.
  Expected: "org.eclipse.jgit/src/org/spearce/jgit/lib/RepositoryConfig.java"
  But was:  "org.eclipse.jgit/src/org/spearce/jgit/lib/RepositoryConfig.java\r"
  --------------------------------------------------------------------------^
]]></message>
                      <stack-trace><![CDATA[at NGit.Patch.PatchErrorTest.TestError_DisconnectedHunk() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchErrorTest.cs:line 61
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Patch.PatchErrorTest.TestError_GarbageBetweenFiles" executed="True" result="Failure" success="False" time="0.002" asserts="2">
                    <failure>
                      <message><![CDATA[  Expected string length 72 but was 73. Strings differ at index 72.
  Expected: "...jgit.test/tst/org/spearce/jgit/lib/RepositoryConfigTest.java"
  But was:  "...jgit.test/tst/org/spearce/jgit/lib/RepositoryConfigTest.java\r"
  --------------------------------------------------------------------------^
]]></message>
                      <stack-trace><![CDATA[at NGit.Patch.PatchErrorTest.TestError_GarbageBetweenFiles() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchErrorTest.cs:line 130
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Patch.PatchErrorTest.TestError_GitBinaryNoForwardHunk" executed="True" result="Error" success="False" time="0.002" asserts="0">
                    <failure>
                      <message><![CDATA[System.ArgumentException : Invalid id length 41; should be 40]]></message>
                      <stack-trace><![CDATA[at NGit.AbbreviatedObjectId.FromString(Byte[] buf, Int32 offset, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 119
at NGit.Patch.FileHeader.ParseIndexLine(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\FileHeader.cs:line 730
at NGit.Patch.FileHeader.ParseGitHeaders(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\FileHeader.cs:line 584
at NGit.Patch.Patch.ParseDiffGit(Byte[] buf, Int32 start, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 260
at NGit.Patch.Patch.ParseFile(Byte[] buf, Int32 c, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 202
at NGit.Patch.Patch.Parse(Byte[] buf, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 180
at NGit.Patch.Patch.Parse(InputStream is) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 143
at NGit.Patch.PatchErrorTest.ParseTestPatchFile() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchErrorTest.cs:line 194
at NGit.Patch.PatchErrorTest.TestError_GitBinaryNoForwardHunk() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchErrorTest.cs:line 152
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Patch.PatchErrorTest.TestError_TruncatedNew" executed="True" result="Failure" success="False" time="0.002" asserts="5">
                    <failure>
                      <message><![CDATA[  Expected: 313
  But was:  317
]]></message>
                      <stack-trace><![CDATA[at NGit.Patch.PatchErrorTest.TestError_TruncatedNew() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchErrorTest.cs:line 101
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Patch.PatchErrorTest.TestError_TruncatedOld" executed="True" result="Failure" success="False" time="0.001" asserts="5">
                    <failure>
                      <message><![CDATA[  Expected: 313
  But was:  317
]]></message>
                      <stack-trace><![CDATA[at NGit.Patch.PatchErrorTest.TestError_TruncatedOld() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchErrorTest.cs:line 85
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PatchTest" executed="True" result="Failure" success="False" time="0.034" asserts="0">
                <results>
                  <test-case name="NGit.Patch.PatchTest.TestEmpty" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Patch.PatchTest.TestParse_AddNoNewline" executed="True" result="Failure" success="False" time="0.003" asserts="2">
                    <failure>
                      <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[at NGit.Patch.PatchTest.TestParse_AddNoNewline() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchTest.cs:line 313
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Patch.PatchTest.TestParse_ConfigCaseInsensitive" executed="True" result="Failure" success="False" time="0.003" asserts="2">
                    <failure>
                      <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[at NGit.Patch.PatchTest.TestParse_ConfigCaseInsensitive() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchTest.cs:line 69
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Patch.PatchTest.TestParse_FixNoNewline" executed="True" result="Failure" success="False" time="0.001" asserts="2">
                    <failure>
                      <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[at NGit.Patch.PatchTest.TestParse_FixNoNewline() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchTest.cs:line 281
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Patch.PatchTest.TestParse_GitBinaryDelta" executed="True" result="Error" success="False" time="0.002" asserts="2">
                    <failure>
                      <message><![CDATA[System.NullReferenceException : Object reference not set to an instance of an object.]]></message>
                      <stack-trace><![CDATA[at NGit.Patch.PatchTest.TestParse_GitBinaryDelta() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchTest.cs:line 249
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Patch.PatchTest.TestParse_GitBinaryLiteral" executed="True" result="Error" success="False" time="0.003" asserts="0">
                    <failure>
                      <message><![CDATA[System.ArgumentException : Invalid id length 41; should be 40]]></message>
                      <stack-trace><![CDATA[at NGit.AbbreviatedObjectId.FromString(Byte[] buf, Int32 offset, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 119
at NGit.Patch.FileHeader.ParseIndexLine(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\FileHeader.cs:line 730
at NGit.Patch.FileHeader.ParseGitHeaders(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\FileHeader.cs:line 584
at NGit.Patch.Patch.ParseDiffGit(Byte[] buf, Int32 start, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 260
at NGit.Patch.Patch.ParseFile(Byte[] buf, Int32 c, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 202
at NGit.Patch.Patch.Parse(Byte[] buf, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 180
at NGit.Patch.Patch.Parse(InputStream is) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 143
at NGit.Patch.PatchTest.ParseTestPatchFile() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchTest.cs:line 353
at NGit.Patch.PatchTest.TestParse_GitBinaryLiteral() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchTest.cs:line 196
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Patch.PatchTest.TestParse_NoBinary" executed="True" result="Error" success="False" time="0.002" asserts="0">
                    <failure>
                      <message><![CDATA[NGit.Errors.InvalidObjectIdException : Invalid id : 4433c54]]></message>
                      <stack-trace><![CDATA[at NGit.AbbreviatedObjectId.FromHexString(Byte[] bs, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 174
at NGit.AbbreviatedObjectId.FromString(Byte[] buf, Int32 offset, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit\AbbreviatedObjectId.cs:line 119
at NGit.Patch.FileHeader.ParseIndexLine(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\FileHeader.cs:line 730
at NGit.Patch.FileHeader.ParseGitHeaders(Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\FileHeader.cs:line 584
at NGit.Patch.Patch.ParseDiffGit(Byte[] buf, Int32 start, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 260
at NGit.Patch.Patch.ParseFile(Byte[] buf, Int32 c, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 202
at NGit.Patch.Patch.Parse(Byte[] buf, Int32 ptr, Int32 end) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 180
at NGit.Patch.Patch.Parse(InputStream is) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Patch\Patch.cs:line 143
at NGit.Patch.PatchTest.ParseTestPatchFile() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchTest.cs:line 353
at NGit.Patch.PatchTest.TestParse_NoBinary() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Patch\PatchTest.cs:line 156
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ReflogConfigTest" executed="True" result="Success" success="True" time="0.055" asserts="0">
            <results>
              <test-case name="NGit.ReflogConfigTest.TestlogAllRefUpdates" executed="True" result="Success" success="True" time="0.054" asserts="7" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ReflogResolveTest" executed="True" result="Success" success="True" time="0.211" asserts="0">
            <results>
              <test-case name="NGit.ReflogResolveTest.ResolveDate" executed="True" result="Success" success="True" time="0.035" asserts="2" />
              <test-case name="NGit.ReflogResolveTest.ResolveMasterCommits" executed="True" result="Success" success="True" time="0.054" asserts="3" />
              <test-case name="NGit.ReflogResolveTest.ResolveNegativeEntryNumber" executed="True" result="Success" success="True" time="0.033" asserts="2" />
              <test-case name="NGit.ReflogResolveTest.ResolveNonExistingBranch" executed="True" result="Success" success="True" time="0.033" asserts="2" />
              <test-case name="NGit.ReflogResolveTest.ResolveReflogParent" executed="True" result="Success" success="True" time="0.050" asserts="2" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="RefTest" executed="True" result="Success" success="True" time="0.276" asserts="0">
            <results>
              <test-case name="NGit.RefTest.TestReadAllIncludingSymrefs" executed="True" result="Success" success="True" time="0.051" asserts="9" />
              <test-case name="NGit.RefTest.TestReadLoosePackedRef" executed="True" result="Success" success="True" time="0.028" asserts="3" />
              <test-case name="NGit.RefTest.TestReadLooseRef" executed="True" result="Success" success="True" time="0.031" asserts="3" />
              <test-case name="NGit.RefTest.TestReadSimplePackedRefSameRepo" executed="True" result="Success" success="True" time="0.034" asserts="4" />
              <test-case name="NGit.RefTest.TestReadSymRefToLoosePacked" executed="True" result="Success" success="True" time="0.035" asserts="5" />
              <test-case name="NGit.RefTest.TestReadSymRefToPacked" executed="True" result="Success" success="True" time="0.032" asserts="5" />
              <test-case name="NGit.RefTest.TestResolvedNamesBranch" executed="True" result="Success" success="True" time="0.026" asserts="2" />
              <test-case name="NGit.RefTest.TestResolvedSymRef" executed="True" result="Success" success="True" time="0.026" asserts="9" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="RepositoryCacheTest" executed="True" result="Success" success="True" time="0.118" asserts="0">
            <results>
              <test-case name="NGit.RepositoryCacheTest.TestBareFileKey" executed="True" result="Success" success="True" time="0.025" asserts="6" />
              <test-case name="NGit.RepositoryCacheTest.TestCacheOpen" executed="True" result="Success" success="True" time="0.018" asserts="3" />
              <test-case name="NGit.RepositoryCacheTest.TestCacheRegisterOpen" executed="True" result="Success" success="True" time="0.013" asserts="4" />
              <test-case name="NGit.RepositoryCacheTest.TestFileKeyOpenExisting" executed="True" result="Success" success="True" time="0.015" asserts="5" />
              <test-case name="NGit.RepositoryCacheTest.TestFileKeyOpenNew" executed="True" result="Success" success="True" time="0.025" asserts="7" />
              <test-case name="NGit.RepositoryCacheTest.TestNonBareFileKey" executed="True" result="Success" success="True" time="0.014" asserts="7" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="RepositoryResolveTest" executed="True" result="Success" success="True" time="0.534" asserts="0">
            <results>
              <test-case name="NGit.RepositoryResolveTest.TestDerefBlob" executed="True" result="Success" success="True" time="0.028" asserts="5" />
              <test-case name="NGit.RepositoryResolveTest.TestDerefCommit" executed="True" result="Success" success="True" time="0.028" asserts="4" />
              <test-case name="NGit.RepositoryResolveTest.TestDerefTag" executed="True" result="Success" success="True" time="0.033" asserts="12" />
              <test-case name="NGit.RepositoryResolveTest.TestDerefTree" executed="True" result="Success" success="True" time="0.028" asserts="4" />
              <test-case name="NGit.RepositoryResolveTest.TestDistance" executed="True" result="Success" success="True" time="0.027" asserts="11" />
              <test-case name="NGit.RepositoryResolveTest.TestHEAD" executed="True" result="Success" success="True" time="0.027" asserts="2" />
              <test-case name="NGit.RepositoryResolveTest.TestObjectId_existing" executed="True" result="Success" success="True" time="0.025" asserts="2" />
              <test-case name="NGit.RepositoryResolveTest.TestObjectId_nonexisting" executed="True" result="Success" success="True" time="0.026" asserts="2" />
              <test-case name="NGit.RepositoryResolveTest.TestObjectId_objectid_explicit_firstparent" executed="True" result="Success" success="True" time="0.027" asserts="4" />
              <test-case name="NGit.RepositoryResolveTest.TestObjectId_objectid_explicit_otherparents" executed="True" result="Success" success="True" time="0.027" asserts="5" />
              <test-case name="NGit.RepositoryResolveTest.TestObjectId_objectid_implicit_firstparent" executed="True" result="Success" success="True" time="0.027" asserts="4" />
              <test-case name="NGit.RepositoryResolveTest.TestObjectId_objectid_self" executed="True" result="Success" success="True" time="0.029" asserts="4" />
              <test-case name="NGit.RepositoryResolveTest.TestParseGitDescribeOutput" executed="True" result="Success" success="True" time="0.037" asserts="7" />
              <test-case name="NGit.RepositoryResolveTest.TestParseLookupPath" executed="True" result="Success" success="True" time="0.033" asserts="11" />
              <test-case name="NGit.RepositoryResolveTest.TestParseNonGitDescribe" executed="True" result="Success" success="True" time="0.049" asserts="11" />
              <test-case name="NGit.RepositoryResolveTest.TestRef_refname" executed="True" result="Success" success="True" time="0.028" asserts="4" />
              <test-case name="NGit.RepositoryResolveTest.TestTree" executed="True" result="Success" success="True" time="0.029" asserts="3" />
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Revplot" executed="True" result="Success" success="True" time="0.306" asserts="0">
            <results>
              <test-suite type="TestFixture" name="PlotCommitListTest" executed="True" result="Success" success="True" time="0.306" asserts="0">
                <results>
                  <test-case name="NGit.Revplot.PlotCommitListTest.Test2SideBranches" executed="True" result="Success" success="True" time="0.063" asserts="21" />
                  <test-case name="NGit.Revplot.PlotCommitListTest.TestBug300282_1" executed="True" result="Success" success="True" time="0.039" asserts="36" />
                  <test-case name="NGit.Revplot.PlotCommitListTest.TestEgitHistory" executed="True" result="Success" success="True" time="0.114" asserts="151" />
                  <test-case name="NGit.Revplot.PlotCommitListTest.TestLinear" executed="True" result="Success" success="True" time="0.025" asserts="16" />
                  <test-case name="NGit.Revplot.PlotCommitListTest.TestMerged" executed="True" result="Success" success="True" time="0.029" asserts="22" />
                  <test-case name="NGit.Revplot.PlotCommitListTest.TestSideBranch" executed="True" result="Success" success="True" time="0.027" asserts="16" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Revwalk" executed="True" result="Success" success="True" time="14.378" asserts="0">
            <results>
              <test-suite type="TestFixture" name="AlwaysEmptyRevQueueTest" executed="True" result="Success" success="True" time="0.053" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.AlwaysEmptyRevQueueTest.TestAddFails" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                  <test-case name="NGit.Revwalk.AlwaysEmptyRevQueueTest.TestClear" executed="True" result="Success" success="True" time="0.014" asserts="5" />
                  <test-case name="NGit.Revwalk.AlwaysEmptyRevQueueTest.TestEmpty" executed="True" result="Success" success="True" time="0.014" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DateRevQueueTest" executed="True" result="Success" success="True" time="0.158" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.DateRevQueueTest.RevQueueTestCase`1.TestClear" executed="True" result="Success" success="True" time="0.022" asserts="2" />
                  <test-case name="NGit.Revwalk.DateRevQueueTest.RevQueueTestCase`1.TestHasFlags" executed="True" result="Success" success="True" time="0.022" asserts="7" />
                  <test-case name="NGit.Revwalk.DateRevQueueTest.TestCloneEmpty" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                  <test-case name="NGit.Revwalk.DateRevQueueTest.TestCloneFIFO" executed="True" result="Success" success="True" time="0.026" asserts="9" />
                  <test-case name="NGit.Revwalk.DateRevQueueTest.TestEmpty" executed="True" result="Success" success="True" time="0.014" asserts="6" />
                  <test-case name="NGit.Revwalk.DateRevQueueTest.TestInsertOutOfOrder" executed="True" result="Success" success="True" time="0.030" asserts="6" />
                  <test-case name="NGit.Revwalk.DateRevQueueTest.TestInsertTie" executed="True" result="Success" success="True" time="0.022" asserts="7" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="FIFORevQueueTest" executed="True" result="Success" success="True" time="2.250" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.FIFORevQueueTest.RevQueueTestCase`1.TestClear" executed="True" result="Success" success="True" time="0.022" asserts="2" />
                  <test-case name="NGit.Revwalk.FIFORevQueueTest.RevQueueTestCase`1.TestHasFlags" executed="True" result="Success" success="True" time="0.023" asserts="7" />
                  <test-case name="NGit.Revwalk.FIFORevQueueTest.TestAddLargeBlocks" executed="True" result="Success" success="True" time="2.146" asserts="769" />
                  <test-case name="NGit.Revwalk.FIFORevQueueTest.TestCloneEmpty" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                  <test-case name="NGit.Revwalk.FIFORevQueueTest.TestEmpty" executed="True" result="Success" success="True" time="0.013" asserts="5" />
                  <test-case name="NGit.Revwalk.FIFORevQueueTest.TestUnpopAtFront" executed="True" result="Success" success="True" time="0.025" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="FooterLineTest" executed="True" result="Success" success="True" time="0.293" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.FooterLineTest.TestEmptyValueNoLF" executed="True" result="Success" success="True" time="0.016" asserts="6" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestEmptyValueWithLF" executed="True" result="Success" success="True" time="0.013" asserts="6" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestFilterFootersIgnoreCase" executed="True" result="Success" success="True" time="0.016" asserts="5" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestMatchesBugId" executed="True" result="Success" success="True" time="0.014" asserts="9" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestNoFooters_EmptyBody" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestNoFooters_NewlineOnlyBody1" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestNoFooters_NewlineOnlyBody5" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestNoFooters_OneLineBodyNoLF" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestNoFooters_OneLineBodyWithLF" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestNoFooters_ShortBodyNoLF" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestNoFooters_ShortBodyWithLF" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestNonDelimtedEmail" executed="True" result="Success" success="True" time="0.014" asserts="6" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestNotEmail" executed="True" result="Success" success="True" time="0.014" asserts="6" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestShortKey" executed="True" result="Success" success="True" time="0.014" asserts="6" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestSignedOffBy_IgnoreWhitespace" executed="True" result="Success" success="True" time="0.013" asserts="6" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestSignedOffBy_ManyUsers" executed="True" result="Success" success="True" time="0.014" asserts="15" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestSignedOffBy_OneUserNoLF" executed="True" result="Success" success="True" time="0.013" asserts="6" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestSignedOffBy_OneUserWithLF" executed="True" result="Success" success="True" time="0.013" asserts="6" />
                  <test-case name="NGit.Revwalk.FooterLineTest.TestSignedOffBy_SkipNonFooter" executed="True" result="Success" success="True" time="0.013" asserts="11" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="LIFORevQueueTest" executed="True" result="Success" success="True" time="2.054" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.LIFORevQueueTest.RevQueueTestCase`1.TestClear" executed="True" result="Success" success="True" time="0.022" asserts="2" />
                  <test-case name="NGit.Revwalk.LIFORevQueueTest.RevQueueTestCase`1.TestHasFlags" executed="True" result="Success" success="True" time="0.021" asserts="7" />
                  <test-case name="NGit.Revwalk.LIFORevQueueTest.TestAddLargeBlocks" executed="True" result="Success" success="True" time="1.976" asserts="769" />
                  <test-case name="NGit.Revwalk.LIFORevQueueTest.TestCloneEmpty" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                  <test-case name="NGit.Revwalk.LIFORevQueueTest.TestEmpty" executed="True" result="Success" success="True" time="0.013" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MaxCountRevFilterTest" executed="True" result="Success" success="True" time="0.058" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.MaxCountRevFilterTest.TestMaxCountRevFilter" executed="True" result="Success" success="True" time="0.035" asserts="6" />
                  <test-case name="NGit.Revwalk.MaxCountRevFilterTest.TestMaxCountRevFilter0" executed="True" result="Success" success="True" time="0.021" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ObjectWalkTest" executed="True" result="Success" success="True" time="0.289" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.ObjectWalkTest.TestCull" executed="True" result="Success" success="True" time="0.064" asserts="12" />
                  <test-case name="NGit.Revwalk.ObjectWalkTest.TestEmptyTreeCorruption" executed="True" result="Success" success="True" time="0.027" asserts="9" />
                  <test-case name="NGit.Revwalk.ObjectWalkTest.TestNoCommits" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Revwalk.ObjectWalkTest.TestOneCommitOneTreeTwoBlob" executed="True" result="Success" success="True" time="0.026" asserts="7" />
                  <test-case name="NGit.Revwalk.ObjectWalkTest.TestTwoCommitDeepTree1" executed="True" result="Success" success="True" time="0.044" asserts="13" />
                  <test-case name="NGit.Revwalk.ObjectWalkTest.TestTwoCommitDeepTree2" executed="True" result="Success" success="True" time="0.044" asserts="13" />
                  <test-case name="NGit.Revwalk.ObjectWalkTest.TestTwoCommitsEmptyTree" executed="True" result="Success" success="True" time="0.022" asserts="6" />
                  <test-case name="NGit.Revwalk.ObjectWalkTest.TestTwoCommitTwoTreeTwoBlob" executed="True" result="Success" success="True" time="0.035" asserts="10" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevCommitListTest" executed="True" result="Success" success="True" time="6.100" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.RevCommitListTest.TestFillToCommit" executed="True" result="Success" success="True" time="0.051" asserts="5" />
                  <test-case name="NGit.Revwalk.RevCommitListTest.TestFillToHighMark2" executed="True" result="Success" success="True" time="0.066" asserts="5" />
                  <test-case name="NGit.Revwalk.RevCommitListTest.TestFillToHighMark4" executed="True" result="Success" success="True" time="0.046" asserts="5" />
                  <test-case name="NGit.Revwalk.RevCommitListTest.TestFillToHighMarkAll" executed="True" result="Success" success="True" time="0.046" asserts="4" />
                  <test-case name="NGit.Revwalk.RevCommitListTest.TestFillToHighMarkMulitpleBlocks" executed="True" result="Success" success="True" time="3.004" asserts="2" />
                  <test-case name="NGit.Revwalk.RevCommitListTest.TestFillToNullCommit" executed="True" result="Success" success="True" time="0.045" asserts="2" />
                  <test-case name="NGit.Revwalk.RevCommitListTest.TestFillToUnknownCommit" executed="True" result="Success" success="True" time="2.830" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevCommitParseTest" executed="True" result="Success" success="True" time="0.208" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_explicit_bad_encoded" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[.NET does not handle broken encodings the same as java does]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_explicit_bad_encoded2" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[.NET does not handle broken encodings the same as java does]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_explicit_encoded" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[JGit does not appear to use EUC-JP when decoding the buffer so it works by chance]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_GitStyleMessage" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_implicit_mixed_encoded" executed="True" result="Success" success="True" time="0.014" asserts="5" />
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_implicit_UTF8_encoded" executed="True" result="Success" success="True" time="0.017" asserts="5" />
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_incompleteAuthorAndCommitter" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_NoMessage" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_NoParents" executed="True" result="Success" success="True" time="0.015" asserts="19" />
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_OnlyLFMessage" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_PublicParseMethod" executed="True" result="Success" success="True" time="0.014" asserts="7" />
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_ShortLineOnlyEmbeddedAndEndingLF" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_ShortLineOnlyEmbeddedLF" executed="True" result="Success" success="True" time="0.012" asserts="3" />
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_ShortLineOnlyEndLF" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_ShortLineOnlyNoLF" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Revwalk.RevCommitParseTest.TestParse_WeirdHeaderOnlyCommit" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevFlagSetTest" executed="True" result="Success" success="True" time="0.114" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.RevFlagSetTest.TestAddOne" executed="True" result="Success" success="True" time="0.015" asserts="10" />
                  <test-case name="NGit.Revwalk.RevFlagSetTest.TestAddTwo" executed="True" result="Success" success="True" time="0.014" asserts="6" />
                  <test-case name="NGit.Revwalk.RevFlagSetTest.TestContains" executed="True" result="Success" success="True" time="0.013" asserts="4" />
                  <test-case name="NGit.Revwalk.RevFlagSetTest.TestContainsAll" executed="True" result="Success" success="True" time="0.015" asserts="6" />
                  <test-case name="NGit.Revwalk.RevFlagSetTest.TestEmpty" executed="True" result="Success" success="True" time="0.014" asserts="5" />
                  <test-case name="NGit.Revwalk.RevFlagSetTest.TestEquals" executed="True" result="Success" success="True" time="0.015" asserts="5" />
                  <test-case name="NGit.Revwalk.RevFlagSetTest.TestRemove" executed="True" result="Success" success="True" time="0.018" asserts="7" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevObjectTest" executed="True" result="Success" success="True" time="0.216" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.RevObjectTest.TestAddRevFlag" executed="True" result="Success" success="True" time="0.018" asserts="4" />
                  <test-case name="NGit.Revwalk.RevObjectTest.TestAddRevFlagSet" executed="True" result="Success" success="True" time="0.019" asserts="3" />
                  <test-case name="NGit.Revwalk.RevObjectTest.TestEquals" executed="True" result="Success" success="True" time="0.022" asserts="15" />
                  <test-case name="NGit.Revwalk.RevObjectTest.TestHasAllFlag" executed="True" result="Success" success="True" time="0.018" asserts="4" />
                  <test-case name="NGit.Revwalk.RevObjectTest.TestHasAnyFlag" executed="True" result="Success" success="True" time="0.019" asserts="3" />
                  <test-case name="NGit.Revwalk.RevObjectTest.TestHasRevFlag" executed="True" result="Success" success="True" time="0.018" asserts="3" />
                  <test-case name="NGit.Revwalk.RevObjectTest.TestRemoveRevFlag" executed="True" result="Success" success="True" time="0.019" asserts="3" />
                  <test-case name="NGit.Revwalk.RevObjectTest.TestRemoveRevFlagSet" executed="True" result="Success" success="True" time="0.019" asserts="3" />
                  <test-case name="NGit.Revwalk.RevObjectTest.TestRevId" executed="True" result="Success" success="True" time="0.018" asserts="2" />
                  <test-case name="NGit.Revwalk.RevObjectTest.TestRevObjectTypes" executed="True" result="Success" success="True" time="0.027" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevTagParseTest" executed="True" result="Success" success="True" time="0.268" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParse_explicit_bad_encoded" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[We don't handle bad encodings the same way]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParse_explicit_bad_encoded2" executed="True" result="Success" success="True" time="0.015" asserts="4" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParse_explicit_encoded" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[jgit does not appear to use euc-jp when decoding the name]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParse_GitStyleMessage" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParse_implicit_mixed_encoded" executed="True" result="Success" success="True" time="0.014" asserts="4" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParse_implicit_UTF8_encoded" executed="True" result="Success" success="True" time="0.014" asserts="4" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParse_NoMessage" executed="True" result="Success" success="True" time="0.012" asserts="3" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParse_OnlyLFMessage" executed="True" result="Success" success="True" time="0.015" asserts="3" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParse_PublicParseMethod" executed="True" result="Success" success="True" time="0.014" asserts="6" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParse_ShortLineOnlyEmbeddedAndEndingLF" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParse_ShortLineOnlyEmbeddedLF" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParse_ShortLineOnlyEndLF" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParse_ShortLineOnlyNoLF" executed="True" result="Success" success="True" time="0.015" asserts="3" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParseAllFields" executed="True" result="Success" success="True" time="0.015" asserts="12" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestParseOldStyleNoTagger" executed="True" result="Success" success="True" time="0.015" asserts="11" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestTagBlob" executed="True" result="Success" success="True" time="0.015" asserts="6" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestTagCommit" executed="True" result="Success" success="True" time="0.014" asserts="6" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestTagTag" executed="True" result="Success" success="True" time="0.013" asserts="6" />
                  <test-case name="NGit.Revwalk.RevTagParseTest.TestTagTree" executed="True" result="Success" success="True" time="0.013" asserts="6" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevWalkCullTest" executed="True" result="Success" success="True" time="0.167" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.RevWalkCullTest.TestProperlyCullAllAncestors_LongHistory" executed="True" result="Success" success="True" time="0.102" asserts="4" />
                  <test-case name="NGit.Revwalk.RevWalkCullTest.TestProperlyCullAllAncestors1" executed="True" result="Success" success="True" time="0.029" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkCullTest.TestProperlyCullAllAncestors2" executed="True" result="Success" success="True" time="0.032" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevWalkFilterTest" executed="True" result="Success" success="True" time="0.418" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestCommitTimeRevFilter" executed="True" result="Success" success="True" time="0.039" asserts="17" />
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestFilter_ALL" executed="True" result="Success" success="True" time="0.024" asserts="5" />
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestFilter_ALL_And_NONE" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestFilter_ALL_Or_NONE" executed="True" result="Success" success="True" time="0.026" asserts="5" />
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestFilter_MY_ALL_And_NONE" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestFilter_MY_ALL_Or_NONE" executed="True" result="Success" success="True" time="0.025" asserts="5" />
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestFilter_Negate_ALL" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestFilter_NO_MERGES" executed="True" result="Success" success="True" time="0.033" asserts="7" />
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestFilter_NONE" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestFilter_NONE_And_ALL" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestFilter_NONE_And_MY_ALL" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestFilter_NONE_Or_ALL" executed="True" result="Success" success="True" time="0.025" asserts="5" />
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestFilter_NONE_Or_MY_ALL" executed="True" result="Success" success="True" time="0.024" asserts="5" />
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestFilter_NOT_ALL" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkFilterTest.TestFilter_NOT_NONE" executed="True" result="Success" success="True" time="0.024" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevWalkFollowFilterTest" executed="True" result="Success" success="True" time="0.100" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.RevWalkFollowFilterTest.TestMultiRename" executed="True" result="Success" success="True" time="0.045" asserts="22" />
                  <test-case name="NGit.Revwalk.RevWalkFollowFilterTest.TestNoRename" executed="True" result="Success" success="True" time="0.024" asserts="4" />
                  <test-case name="NGit.Revwalk.RevWalkFollowFilterTest.TestSingleRename" executed="True" result="Success" success="True" time="0.028" asserts="10" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevWalkMergeBaseTest" executed="True" result="Success" success="True" time="0.271" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.RevWalkMergeBaseTest.TestCrissCross" executed="True" result="Success" success="True" time="0.031" asserts="4" />
                  <test-case name="NGit.Revwalk.RevWalkMergeBaseTest.TestDisallowTreeFilter" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                  <test-case name="NGit.Revwalk.RevWalkMergeBaseTest.TestMultipleHeads_SameBase1" executed="True" result="Success" success="True" time="0.060" asserts="3" />
                  <test-case name="NGit.Revwalk.RevWalkMergeBaseTest.TestMultipleHeads_SameBase2" executed="True" result="Success" success="True" time="0.065" asserts="3" />
                  <test-case name="NGit.Revwalk.RevWalkMergeBaseTest.TestNone" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkMergeBaseTest.TestSimple" executed="True" result="Success" success="True" time="0.051" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevWalkPathFilter1Test" executed="True" result="Success" success="True" time="0.370" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.RevWalkPathFilter1Test.TestEdits_MatchAll" executed="True" result="Success" success="True" time="0.050" asserts="6" />
                  <test-case name="NGit.Revwalk.RevWalkPathFilter1Test.TestEdits_MatchNone" executed="True" result="Success" success="True" time="0.047" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkPathFilter1Test.TestEmpty_EmptyTree" executed="True" result="Success" success="True" time="0.019" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkPathFilter1Test.TestEmpty_NoMatch" executed="True" result="Success" success="True" time="0.022" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkPathFilter1Test.TestSimple1" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                  <test-case name="NGit.Revwalk.RevWalkPathFilter1Test.TestStringOfPearls_DirPath2" executed="True" result="Success" success="True" time="0.045" asserts="7" />
                  <test-case name="NGit.Revwalk.RevWalkPathFilter1Test.TestStringOfPearls_FilePath1" executed="True" result="Success" success="True" time="0.041" asserts="7" />
                  <test-case name="NGit.Revwalk.RevWalkPathFilter1Test.TestStringOfPearls_FilePath2" executed="True" result="Success" success="True" time="0.043" asserts="7" />
                  <test-case name="NGit.Revwalk.RevWalkPathFilter1Test.TestStringOfPearls_FilePath3" executed="True" result="Success" success="True" time="0.068" asserts="10" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevWalkPathFilter6012Test" executed="True" result="Success" success="True" time="0.487" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.RevWalkPathFilter6012Test.Test1" executed="True" result="Success" success="True" time="0.075" asserts="20" />
                  <test-case name="NGit.Revwalk.RevWalkPathFilter6012Test.Test2" executed="True" result="Success" success="True" time="0.066" asserts="1" />
                  <test-case name="NGit.Revwalk.RevWalkPathFilter6012Test.Test3" executed="True" result="Success" success="True" time="0.065" asserts="1" />
                  <test-case name="NGit.Revwalk.RevWalkPathFilter6012Test.Test4" executed="True" result="Success" success="True" time="0.065" asserts="1" />
                  <test-case name="NGit.Revwalk.RevWalkPathFilter6012Test.Test5" executed="True" result="Success" success="True" time="0.065" asserts="1" />
                  <test-case name="NGit.Revwalk.RevWalkPathFilter6012Test.Test6" executed="True" result="Success" success="True" time="0.072" asserts="8" />
                  <test-case name="NGit.Revwalk.RevWalkPathFilter6012Test.Test7" executed="True" result="Success" success="True" time="0.069" asserts="8" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevWalkResetTest" executed="True" result="Success" success="True" time="0.028" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.RevWalkResetTest.TestRevFilterReceivesParsedCommits" executed="True" result="Success" success="True" time="0.028" asserts="11" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevWalkSortTest" executed="True" result="Success" success="True" time="0.217" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.RevWalkSortTest.TestSort_COMMIT_TIME_DESC" executed="True" result="Success" success="True" time="0.027" asserts="6" />
                  <test-case name="NGit.Revwalk.RevWalkSortTest.TestSort_COMMIT_TIME_DESC_OutOfOrder1" executed="True" result="Success" success="True" time="0.031" asserts="8" />
                  <test-case name="NGit.Revwalk.RevWalkSortTest.TestSort_COMMIT_TIME_DESC_OutOfOrder2" executed="True" result="Success" success="True" time="0.031" asserts="7" />
                  <test-case name="NGit.Revwalk.RevWalkSortTest.TestSort_Default" executed="True" result="Success" success="True" time="0.027" asserts="6" />
                  <test-case name="NGit.Revwalk.RevWalkSortTest.TestSort_REVERSE" executed="True" result="Success" success="True" time="0.027" asserts="6" />
                  <test-case name="NGit.Revwalk.RevWalkSortTest.TestSort_TOPO" executed="True" result="Success" success="True" time="0.031" asserts="7" />
                  <test-case name="NGit.Revwalk.RevWalkSortTest.TestSort_TOPO_REVERSE" executed="True" result="Success" success="True" time="0.032" asserts="7" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RevWalkUtilsCountTest" executed="True" result="Success" success="True" time="0.150" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.RevWalkUtilsCountTest.ShouldReturnZeroOnSameCommit" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkUtilsCountTest.ShouldReturnZeroWhenMergedInto" executed="True" result="Success" success="True" time="0.022" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkUtilsCountTest.ShouldWorkForNormalCase" executed="True" result="Success" success="True" time="0.021" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkUtilsCountTest.ShouldWorkWithMerges" executed="True" result="Success" success="True" time="0.028" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkUtilsCountTest.ShouldWorkWithoutCommonAncestor" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                  <test-case name="NGit.Revwalk.RevWalkUtilsCountTest.ShouldWorkWithZeroAsEnd" executed="True" result="Success" success="True" time="0.021" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SkipRevFilterTest" executed="True" result="Success" success="True" time="0.055" asserts="0">
                <results>
                  <test-case name="NGit.Revwalk.SkipRevFilterTest.TestSkipRevFilter" executed="True" result="Success" success="True" time="0.031" asserts="4" />
                  <test-case name="NGit.Revwalk.SkipRevFilterTest.TestSkipRevFilter0" executed="True" result="Success" success="True" time="0.022" asserts="4" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="SquashCommitMsgTest" executed="True" result="Success" success="True" time="0.017" asserts="0">
            <results>
              <test-case name="NGit.SquashCommitMsgTest.TestReadWriteMergeMsg" executed="True" result="Success" success="True" time="0.016" asserts="8" />
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Storage" executed="True" result="Failure" success="False" time="14.436" asserts="0">
            <results>
              <test-suite type="Namespace" name="File" executed="True" result="Failure" success="False" time="13.397" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AbbreviationTest" executed="True" result="Success" success="True" time="0.110" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.AbbreviationTest.TestAbbreviateIsActuallyUnique" executed="True" result="Success" success="True" time="0.020" asserts="520" />
                      <test-case name="NGit.Storage.File.AbbreviationTest.TestAbbreviateLooseBlob" executed="True" result="Success" success="True" time="0.019" asserts="10" />
                      <test-case name="NGit.Storage.File.AbbreviationTest.TestAbbreviateOnEmptyRepository" executed="True" result="Success" success="True" time="0.017" asserts="12" />
                      <test-case name="NGit.Storage.File.AbbreviationTest.TestAbbreviatePackedBlob" executed="True" result="Success" success="True" time="0.049" asserts="10" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ConcurrentRepackTest" executed="True" result="Success" success="True" time="0.192" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.ConcurrentRepackTest.TestObjectInNewPack" executed="True" result="Success" success="True" time="0.046" asserts="3" />
                      <test-case name="NGit.Storage.File.ConcurrentRepackTest.TestObjectMovedToNewPack1" executed="True" result="Success" success="True" time="0.040" asserts="7" />
                      <test-case name="NGit.Storage.File.ConcurrentRepackTest.TestObjectMovedToNewPack2" executed="True" result="Success" success="True" time="0.039" asserts="13" />
                      <test-case name="NGit.Storage.File.ConcurrentRepackTest.TestObjectMovedWithinPack" executed="True" result="Success" success="True" time="0.061" asserts="5" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FileRepositoryBuilderTest" executed="True" result="Success" success="True" time="0.125" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.FileRepositoryBuilderTest.AbsoluteGitDirRef" executed="True" result="Success" success="True" time="0.018" asserts="3" />
                      <test-case name="NGit.Storage.File.FileRepositoryBuilderTest.EmptyRepositoryFormatVersion" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NGit.Storage.File.FileRepositoryBuilderTest.InvalidRepositoryFormatVersion" executed="True" result="Success" success="True" time="0.017" asserts="2" />
                      <test-case name="NGit.Storage.File.FileRepositoryBuilderTest.RelativeGitDirRef" executed="True" result="Success" success="True" time="0.016" asserts="4" />
                      <test-case name="NGit.Storage.File.FileRepositoryBuilderTest.ScanWithGitDirRef" executed="True" result="Success" success="True" time="0.017" asserts="4" />
                      <test-case name="NGit.Storage.File.FileRepositoryBuilderTest.TestShouldAutomagicallyDetectGitDirectory" executed="True" result="Success" success="True" time="0.015" asserts="2" />
                      <test-case name="NGit.Storage.File.FileRepositoryBuilderTest.UnknownRepositoryFormatVersion" executed="True" result="Success" success="True" time="0.015" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FileSnapshotTest" executed="True" result="Success" success="True" time="6.517" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.FileSnapshotTest.TestActuallyIsModifiedTrivial" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                      <test-case name="NGit.Storage.File.FileSnapshotTest.TestNewFileNoWait" executed="True" result="Success" success="True" time="1.502" asserts="1" />
                      <test-case name="NGit.Storage.File.FileSnapshotTest.TestNewFileWithWait" executed="True" result="Success" success="True" time="1.503" asserts="1" />
                      <test-case name="NGit.Storage.File.FileSnapshotTest.TestOldFile" executed="True" result="Success" success="True" time="3.502" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LockFileTest" executed="True" result="Success" success="True" time="0.068" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.LockFileTest.LockFailedExceptionRecovery" executed="True" result="Success" success="True" time="0.067" asserts="5" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PackFileTest" executed="True" result="Success" success="True" time="0.168" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.PackFileTest.TestDelta_LargeObjectChain" executed="True" result="Success" success="True" time="0.051" asserts="12" />
                      <test-case name="NGit.Storage.File.PackFileTest.TestDelta_SmallObjectChain" executed="True" result="Success" success="True" time="0.020" asserts="13" />
                      <test-case name="NGit.Storage.File.PackFileTest.TestWhole_LargeObject" executed="True" result="Success" success="True" time="0.048" asserts="12" />
                      <test-case name="NGit.Storage.File.PackFileTest.TestWhole_SmallObject" executed="True" result="Success" success="True" time="0.043" asserts="12" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PackIndexV1Test" executed="True" result="Success" success="True" time="0.079" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.PackIndexV1Test.PackIndexTestCase.TestCompareEntriesOffsetsWithFindOffsets" executed="True" result="Success" success="True" time="0.016" asserts="77" />
                      <test-case name="NGit.Storage.File.PackIndexV1Test.PackIndexTestCase.TestIteratorMethodsContract" executed="True" result="Success" success="True" time="0.013" asserts="1" />
                      <test-case name="NGit.Storage.File.PackIndexV1Test.PackIndexTestCase.TestIteratorReturnedValues1" executed="True" result="Success" success="True" time="0.014" asserts="10" />
                      <test-case name="NGit.Storage.File.PackIndexV1Test.PackIndexTestCase.TestIteratorReturnedValues2" executed="True" result="Success" success="True" time="0.014" asserts="4" />
                      <test-case name="NGit.Storage.File.PackIndexV1Test.TestCRC32" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PackIndexV2Test" executed="True" result="Success" success="True" time="0.074" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.PackIndexV2Test.PackIndexTestCase.TestCompareEntriesOffsetsWithFindOffsets" executed="True" result="Success" success="True" time="0.014" asserts="77" />
                      <test-case name="NGit.Storage.File.PackIndexV2Test.PackIndexTestCase.TestIteratorMethodsContract" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                      <test-case name="NGit.Storage.File.PackIndexV2Test.PackIndexTestCase.TestIteratorReturnedValues1" executed="True" result="Success" success="True" time="0.013" asserts="10" />
                      <test-case name="NGit.Storage.File.PackIndexV2Test.PackIndexTestCase.TestIteratorReturnedValues2" executed="True" result="Success" success="True" time="0.012" asserts="4" />
                      <test-case name="NGit.Storage.File.PackIndexV2Test.TestCRC32" executed="True" result="Success" success="True" time="0.013" asserts="10" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PackReverseIndexTest" executed="True" result="Success" success="True" time="0.061" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.PackReverseIndexTest.TestFindNextOffset" executed="True" result="Success" success="True" time="0.016" asserts="82" />
                      <test-case name="NGit.Storage.File.PackReverseIndexTest.TestFindNextOffsetWrongOffset" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                      <test-case name="NGit.Storage.File.PackReverseIndexTest.TestFindObject" executed="True" result="Success" success="True" time="0.013" asserts="41" />
                      <test-case name="NGit.Storage.File.PackReverseIndexTest.TestFindObjectWrongOffset" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PackWriterTest" executed="True" result="Success" success="True" time="1.227" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.PackWriterTest.TestContructor" executed="True" result="Success" success="True" time="0.046" asserts="6" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestExclude" executed="True" result="Success" success="True" time="0.102" asserts="11" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestIgnoreNonExistingObjects" executed="True" result="Success" success="True" time="0.046" asserts="3" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestModifySettings" executed="True" result="Success" success="True" time="0.039" asserts="7" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestNotIgnoreNonExistingObjects" executed="True" result="Success" success="True" time="0.040" asserts="2" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWriteEmptyPack1" executed="True" result="Success" success="True" time="0.042" asserts="6" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWriteEmptyPack2" executed="True" result="Success" success="True" time="0.041" asserts="6" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWriteIndex" executed="True" result="Success" success="True" time="0.067" asserts="22" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWritePack1" executed="True" result="Success" success="True" time="0.055" asserts="13" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWritePack1NoObjectReuse" executed="True" result="Success" success="True" time="0.053" asserts="13" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWritePack2" executed="True" result="Success" success="True" time="0.054" asserts="11" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWritePack2DeltasCRC32Copy" executed="True" result="Success" success="True" time="0.051" asserts="11" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWritePack2DeltasReuseOffsets" executed="True" result="Success" success="True" time="0.051" asserts="11" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWritePack2DeltasReuseRefs" executed="True" result="Success" success="True" time="0.048" asserts="11" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWritePack2SizeDeltasVsNoDeltas" executed="True" result="Success" success="True" time="0.104" asserts="23" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWritePack2SizeOffsetsVsRefs" executed="True" result="Success" success="True" time="0.097" asserts="23" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWritePack3" executed="True" result="Success" success="True" time="0.053" asserts="12" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWritePack4" executed="True" result="Success" success="True" time="0.050" asserts="8" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWritePack4SizeThinVsNoThin" executed="True" result="Success" success="True" time="0.107" asserts="18" />
                      <test-case name="NGit.Storage.File.PackWriterTest.TestWritePack4ThinPack" executed="True" result="Success" success="True" time="0.048" asserts="9" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RefDirectoryTest" executed="True" result="Success" success="True" time="1.299" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestCreate" executed="True" result="Success" success="True" time="0.026" asserts="15" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRef_AnyHeadWithGarbage" executed="True" result="Success" success="True" time="0.025" asserts="6" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRef_CorruptObjectIdReference" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRef_CorruptSymbolicReference" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRef_DiscoversDeletedLoose" executed="True" result="Success" success="True" time="0.026" asserts="5" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRef_DiscoversModifiedLoose" executed="True" result="Success" success="True" time="0.026" asserts="3" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRef_EmptyDatabase" executed="True" result="Success" success="True" time="0.025" asserts="12" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRef_FetchHead" executed="True" result="Success" success="True" time="0.025" asserts="6" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRef_PackedNotPeeled_WrongSort" executed="True" result="Success" success="True" time="0.026" asserts="14" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_CorruptObjectIdReference" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_CorruptSymbolicReference" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_CycleInSymbolicRef" executed="True" result="Success" success="True" time="0.034" asserts="21" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_DeatchedHead1" executed="True" result="Success" success="True" time="0.024" asserts="7" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_DeatchedHead2" executed="True" result="Success" success="True" time="0.025" asserts="10" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_DeeplyNestedBranch" executed="True" result="Success" success="True" time="0.031" asserts="6" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_DiscoversDeletedLoose1" executed="True" result="Success" success="True" time="0.026" asserts="12" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_DiscoversDeletedLoose2" executed="True" result="Success" success="True" time="0.026" asserts="6" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_DiscoversDeletedLoose3" executed="True" result="Success" success="True" time="0.027" asserts="9" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_DiscoversDeletedLoose4" executed="True" result="Success" success="True" time="0.026" asserts="10" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_DiscoversDeletedLoose5" executed="True" result="Success" success="True" time="0.027" asserts="8" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_DiscoversModifiedLoose" executed="True" result="Success" success="True" time="0.025" asserts="3" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_DiscoversNewLoose1" executed="True" result="Success" success="True" time="0.026" asserts="11" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_DiscoversNewLoose2" executed="True" result="Success" success="True" time="0.027" asserts="10" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_EmptyDatabase" executed="True" result="Success" success="True" time="0.024" asserts="4" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_HeadBranchNotBorn" executed="True" result="Success" success="True" time="0.025" asserts="7" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_HeadOnOneBranch" executed="True" result="Success" success="True" time="0.024" asserts="12" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_HeadsOnly_AllLoose" executed="True" result="Success" success="True" time="0.026" asserts="6" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_HeadsOnly_AllPacked1" executed="True" result="Success" success="True" time="0.025" asserts="5" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_HeadsOnly_Mixed" executed="True" result="Success" success="True" time="0.026" asserts="6" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_HeadsOnly_SymrefToPacked" executed="True" result="Success" success="True" time="0.025" asserts="7" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_IgnoresGarbageRef1" executed="True" result="Success" success="True" time="0.025" asserts="4" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_IgnoresGarbageRef2" executed="True" result="Success" success="True" time="0.025" asserts="4" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_IgnoresGarbageRef3" executed="True" result="Success" success="True" time="0.025" asserts="4" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_IgnoresGarbageRef4" executed="True" result="Success" success="True" time="0.027" asserts="11" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_InvalidName" executed="True" result="Success" success="True" time="0.024" asserts="4" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_LooseOverridesPacked" executed="True" result="Success" success="True" time="0.025" asserts="4" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_LooseSortedCorrectly" executed="True" result="Success" success="True" time="0.026" asserts="4" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_LooseSorting_Bug_348834" executed="True" result="Success" success="True" time="0.030" asserts="5" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_PackedNotPeeled_Sorted" executed="True" result="Success" success="True" time="0.025" asserts="15" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_PackedWithPeeled" executed="True" result="Success" success="True" time="0.025" asserts="15" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_SkipsLockFiles" executed="True" result="Success" success="True" time="0.025" asserts="5" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_TagsOnly_AllLoose" executed="True" result="Success" success="True" time="0.024" asserts="4" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestGetRefs_TagsOnly_AllPacked" executed="True" result="Success" success="True" time="0.024" asserts="5" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestIsNameConflicting" executed="True" result="Success" success="True" time="0.031" asserts="9" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestPeelCommit" executed="True" result="Success" success="True" time="0.024" asserts="13" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestPeelLooseTag" executed="True" result="Success" success="True" time="0.027" asserts="29" />
                      <test-case name="NGit.Storage.File.RefDirectoryTest.TestRefsChangedStackOverflow" executed="True" result="Success" success="True" time="0.036" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReflogReaderTest" executed="True" result="Success" success="True" time="0.241" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.ReflogReaderTest.TestCheckout" executed="True" result="Success" success="True" time="0.030" asserts="5" />
                      <test-case name="NGit.Storage.File.ReflogReaderTest.TestNoLog" executed="True" result="Success" success="True" time="0.028" asserts="3" />
                      <test-case name="NGit.Storage.File.ReflogReaderTest.TestReadLineWithMissingComment" executed="True" result="Success" success="True" time="0.028" asserts="8" />
                      <test-case name="NGit.Storage.File.ReflogReaderTest.TestReadOneLine" executed="True" result="Success" success="True" time="0.026" asserts="8" />
                      <test-case name="NGit.Storage.File.ReflogReaderTest.TestReadRightLog" executed="True" result="Success" success="True" time="0.031" asserts="4" />
                      <test-case name="NGit.Storage.File.ReflogReaderTest.TestReadTwoLine" executed="True" result="Success" success="True" time="0.029" asserts="16" />
                      <test-case name="NGit.Storage.File.ReflogReaderTest.TestReadWhileAppendIsInProgress" executed="True" result="Success" success="True" time="0.029" asserts="9" />
                      <test-case name="NGit.Storage.File.ReflogReaderTest.TestSpecificEntryNumber" executed="True" result="Success" success="True" time="0.028" asserts="16" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RefUpdateTest" executed="True" result="Success" success="True" time="1.705" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestDeleteFastForward" executed="True" result="Success" success="True" time="0.038" asserts="4" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestDeleteForce" executed="True" result="Success" success="True" time="0.037" asserts="7" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestDeleteHead" executed="True" result="Success" success="True" time="0.029" asserts="6" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestDeleteHEADreferencedRef" executed="True" result="Success" success="True" time="0.035" asserts="6" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestDeleteLooseAndItsDirectory" executed="True" result="Success" success="True" time="0.038" asserts="8" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestDeleteLoosePacked" executed="True" result="Success" success="True" time="0.038" asserts="4" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestDeleteLoosePackedRejected" executed="True" result="Success" success="True" time="0.030" asserts="3" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestDeleteNotFound" executed="True" result="Success" success="True" time="0.033" asserts="4" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestLooseDelete" executed="True" result="Success" success="True" time="0.038" asserts="5" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestNewNamespaceConflictWithLoosePrefixNameExists" executed="True" result="Success" success="True" time="0.033" asserts="5" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestNewNamespaceConflictWithLoosePrefixOfExisting" executed="True" result="Success" success="True" time="0.038" asserts="6" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestNewNamespaceConflictWithPackedPrefixNameExists" executed="True" result="Success" success="True" time="0.028" asserts="4" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestNewNamespaceConflictWithPackedPrefixOfExisting" executed="True" result="Success" success="True" time="0.028" asserts="4" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestNoCacheObjectIdSubclass" executed="True" result="Success" success="True" time="0.035" asserts="14" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRefKeySameAsName" executed="True" result="Success" success="True" time="0.026" asserts="26" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRefsCacheAfterUpdate" executed="True" result="Success" success="True" time="0.040" asserts="7" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRefsCacheAfterUpdateLooseOnly" executed="True" result="Success" success="True" time="0.042" asserts="6" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRenameBranchAlsoInPack" executed="True" result="Success" success="True" time="0.059" asserts="15" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRenameBranchCannotLockAFileHEADisFromLockFrom" executed="True" result="Success" success="True" time="0.058" asserts="13" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRenameBranchCannotLockAFileHEADisFromLockHEAD" executed="True" result="Success" success="True" time="0.046" asserts="14" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRenameBranchCannotLockAFileHEADisFromLockTo" executed="True" result="Success" success="True" time="0.069" asserts="13" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRenameBranchCannotLockAFileHEADisOtherLockFrom" executed="True" result="Success" success="True" time="0.085" asserts="13" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRenameBranchCannotLockAFileHEADisOtherLockTo" executed="True" result="Success" success="True" time="0.058" asserts="13" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRenameBranchCannotLockAFileHEADisToLockFrom" executed="True" result="Success" success="True" time="0.045" asserts="12" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRenameBranchCannotLockAFileHEADisToLockTo" executed="True" result="Success" success="True" time="0.056" asserts="12" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRenameBranchHasPreviousLog" executed="True" result="Success" success="True" time="0.050" asserts="11" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRenameBranchNoPreviousLog" executed="True" result="Success" success="True" time="0.048" asserts="10" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRenameCurrentBranch" executed="True" result="Success" success="True" time="0.062" asserts="12" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRenameRefNameColission1avoided" executed="True" result="Success" success="True" time="0.069" asserts="12" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestRenameRefNameColission2avoided" executed="True" result="Success" success="True" time="0.073" asserts="12" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestUpdateRefDetached" executed="True" result="Success" success="True" time="0.034" asserts="11" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestUpdateRefDetachedUnbornHead" executed="True" result="Success" success="True" time="0.040" asserts="11" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestUpdateRefForward" executed="True" result="Success" success="True" time="0.037" asserts="5" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestUpdateRefForwardWithCheck1" executed="True" result="Success" success="True" time="0.037" asserts="5" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestUpdateRefForwardWithCheck2" executed="True" result="Success" success="True" time="0.039" asserts="5" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestUpdateRefLockFailureLocked" executed="True" result="Success" success="True" time="0.033" asserts="5" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestUpdateRefLockFailureWrongOldValue" executed="True" result="Success" success="True" time="0.030" asserts="3" />
                      <test-case name="NGit.Storage.File.RefUpdateTest.TestUpdateRefNoChange" executed="True" result="Success" success="True" time="0.029" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RepositorySetupWorkDirTest" executed="True" result="Success" success="True" time="0.059" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.RepositorySetupWorkDirTest.TestBare_CreateRepositoryFromGitDirOnlyWithBareConfigTrue" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                      <test-case name="NGit.Storage.File.RepositorySetupWorkDirTest.TestExceptionThrown_BareRepoGetIndex" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                      <test-case name="NGit.Storage.File.RepositorySetupWorkDirTest.TestExceptionThrown_BareRepoGetIndexFile" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                      <test-case name="NGit.Storage.File.RepositorySetupWorkDirTest.TestExceptionThrown_BareRepoGetWorkDir" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                      <test-case name="NGit.Storage.File.RepositorySetupWorkDirTest.TestIsBare_CreateRepositoryFromArbitraryGitDir" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NGit.Storage.File.RepositorySetupWorkDirTest.TestNotBare_CreateRepositoryFromDotGitGitDir" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                      <test-case name="NGit.Storage.File.RepositorySetupWorkDirTest.TestNotBare_CreateRepositoryFromGitDirOnlyWithBareConfigFalse" executed="True" result="Success" success="True" time="0.005" asserts="3" />
                      <test-case name="NGit.Storage.File.RepositorySetupWorkDirTest.TestNotBare_CreateRepositoryFromGitDirOnlyWithWorktreeConfig" executed="True" result="Success" success="True" time="0.006" asserts="3" />
                      <test-case name="NGit.Storage.File.RepositorySetupWorkDirTest.TestNotBare_CreateRepositoryFromWorkDirOnly" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                      <test-case name="NGit.Storage.File.RepositorySetupWorkDirTest.TestWorkdirIsDotGit_CreateRepositoryFromWorkDirOnly" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                      <test-case name="NGit.Storage.File.RepositorySetupWorkDirTest.TestWorkdirIsParent_CreateRepositoryFromGitDirOnlyWithBareConfigFalse" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                      <test-case name="NGit.Storage.File.RepositorySetupWorkDirTest.TestWorkdirIsParentDir_CreateRepositoryFromDotGitGitDir" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="T0003_BasicTest" executed="True" result="Failure" success="False" time="0.915" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test000_openrepo_alternate_index_file_and_objdirs" executed="True" result="Success" success="True" time="0.043" asserts="6" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test000_openrepo_default_absolute_workdirconfig" executed="True" result="Success" success="True" time="0.043" asserts="5" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test000_openrepo_default_gitDirAndWorkTreeSet" executed="True" result="Success" success="True" time="0.038" asserts="5" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test000_openrepo_default_gitDirSet" executed="True" result="Success" success="True" time="0.038" asserts="5" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test000_openrepo_default_relative_workdirconfig" executed="True" result="Success" success="True" time="0.043" asserts="5" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test000_openrepo_default_workDirSet" executed="True" result="Success" success="True" time="0.037" asserts="5" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test000_openRepoBadArgs" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test001_Initalize" executed="True" result="Success" success="True" time="0.026" asserts="12" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test002_WriteEmptyTree" executed="True" result="Success" success="True" time="0.040" asserts="5" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test002_WriteEmptyTree2" executed="True" result="Success" success="True" time="0.027" asserts="3" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test006_ReadUglyConfig" executed="True" result="Success" success="True" time="0.028" asserts="6" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test007_Open" executed="True" result="Success" success="True" time="0.027" asserts="4" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test008_FailOnWrongVersion" executed="True" result="Success" success="True" time="0.027" asserts="2" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test009_CreateCommitOldFormat" executed="True" result="Error" success="False" time="0.033" asserts="7">
                        <failure>
                          <message><![CDATA[System.NotSupportedException : Specified method is not supported.]]></message>
                          <stack-trace><![CDATA[at Sharpen.WrappedSystemStream.Seek(Int64 offset, SeekOrigin origin) in C:\Users\dprothero\Documents\GitHub\ngit\Sharpen\Sharpen\WrappedSystemStream.cs:line 70
at System.IO.BufferedStream.FlushRead()
at System.IO.BufferedStream.Flush()
at System.IO.BufferedStream.Dispose(Boolean disposing)
at System.IO.Stream.Close()
at Sharpen.InputStream.Close() in C:\Users\dprothero\Documents\GitHub\ngit\Sharpen\Sharpen\InputStream.cs:line 33
at NGit.Storage.File.T0003_BasicTest.Test009_CreateCommitOldFormat() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Storage.File\T0003_BasicTest.cs:line 390
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test012_SubtreeExternalSorting" executed="True" result="Success" success="True" time="0.042" asserts="2" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test020_createBlobTag" executed="True" result="Success" success="True" time="0.034" asserts="6" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test021_createTreeTag" executed="True" result="Success" success="True" time="0.040" asserts="6" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test022_createCommitTag" executed="True" result="Success" success="True" time="0.039" asserts="6" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test023_createCommitNonAnullii" executed="True" result="Success" success="True" time="0.036" asserts="3" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test024_createCommitNonAscii" executed="True" result="Success" success="True" time="0.036" asserts="2" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test025_computeSha1NoStore" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test026_CreateCommitMultipleparents" executed="True" result="Success" success="True" time="0.049" asserts="34" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test027_UnpackedRefHigherPriorityThanPacked" executed="True" result="Success" success="True" time="0.027" asserts="2" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test028_LockPackedRef" executed="True" result="Success" success="True" time="0.040" asserts="10" />
                      <test-case name="NGit.Storage.File.T0003_BasicTest.Test30_stripWorkDir" executed="True" result="Success" success="True" time="0.027" asserts="10" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="T0004_PackReaderTest" executed="True" result="Success" success="True" time="0.056" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.T0004_PackReaderTest.Test003_lookupCompressedObject" executed="True" result="Success" success="True" time="0.026" asserts="4" />
                      <test-case name="NGit.Storage.File.T0004_PackReaderTest.Test004_lookupDeltifiedObject" executed="True" result="Success" success="True" time="0.027" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UnpackedObjectTest" executed="True" result="Success" success="True" time="0.247" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestPackFormat_DeltaNotAllowed" executed="True" result="Success" success="True" time="0.017" asserts="5" />
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestPackFormat_LargeObject" executed="True" result="Success" success="True" time="0.017" asserts="11" />
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestPackFormat_SmallObject" executed="True" result="Success" success="True" time="0.013" asserts="10" />
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestStandardFormat_GarbageAfterSize" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestStandardFormat_InvalidType" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestStandardFormat_LargeObject" executed="True" result="Success" success="True" time="0.017" asserts="11" />
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestStandardFormat_LargeObject_CorruptZLibStream" executed="True" result="Success" success="True" time="0.017" asserts="2" />
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestStandardFormat_LargeObject_TrailingGarbage" executed="True" result="Success" success="True" time="0.017" asserts="2" />
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestStandardFormat_LargeObject_TruncatedZLibStream" executed="True" result="Success" success="True" time="0.017" asserts="2" />
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestStandardFormat_NegativeSize" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestStandardFormat_NoHeader" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestStandardFormat_SmallObject" executed="True" result="Success" success="True" time="0.013" asserts="11" />
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestStandardFormat_SmallObject_CorruptZLibStream" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestStandardFormat_SmallObject_TrailingGarbage" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                      <test-case name="NGit.Storage.File.UnpackedObjectTest.TestStandardFormat_SmallObject_TruncatedZLibStream" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WindowCacheGetTest" executed="True" result="Success" success="True" time="0.098" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.WindowCacheGetTest.TestCache_Defaults" executed="True" result="Success" success="True" time="0.032" asserts="200" />
                      <test-case name="NGit.Storage.File.WindowCacheGetTest.TestCache_TooFewFiles" executed="True" result="Success" success="True" time="0.032" asserts="198" />
                      <test-case name="NGit.Storage.File.WindowCacheGetTest.TestCache_TooSmallLimit" executed="True" result="Success" success="True" time="0.030" asserts="198" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WindowCacheReconfigureTest" executed="True" result="Success" success="True" time="0.106" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.File.WindowCacheReconfigureTest.TestConfigureCache_Limits1" executed="True" result="Success" success="True" time="0.013" asserts="1" />
                      <test-case name="NGit.Storage.File.WindowCacheReconfigureTest.TestConfigureCache_PackedGitLimit_0" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                      <test-case name="NGit.Storage.File.WindowCacheReconfigureTest.TestConfigureCache_PackedGitOpenFiles_0" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                      <test-case name="NGit.Storage.File.WindowCacheReconfigureTest.TestConfigureCache_PackedGitWindowSize_0" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                      <test-case name="NGit.Storage.File.WindowCacheReconfigureTest.TestConfigureCache_PackedGitWindowSize_4097" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                      <test-case name="NGit.Storage.File.WindowCacheReconfigureTest.TestConfigureCache_PackedGitWindowSize_512" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                      <test-case name="NGit.Storage.File.WindowCacheReconfigureTest.TestConfigureCache_PackedGitWindowSizeAbovePackedGitLimit" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Pack" executed="True" result="Success" success="True" time="1.023" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DeltaIndexTest" executed="True" result="Success" success="True" time="0.027" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.Pack.DeltaIndexTest.TestCopyWholeObject_Length123" executed="True" result="Success" success="True" time="0.004" asserts="5" />
                      <test-case name="NGit.Storage.Pack.DeltaIndexTest.TestCopyWholeObject_Length128" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="NGit.Storage.Pack.DeltaIndexTest.TestCopyZeros_Length128" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                      <test-case name="NGit.Storage.Pack.DeltaIndexTest.TestIndexSize" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NGit.Storage.Pack.DeltaIndexTest.TestInsertHeadMiddle" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="NGit.Storage.Pack.DeltaIndexTest.TestInsertTail" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="NGit.Storage.Pack.DeltaIndexTest.TestInsertWholeObject_Length12" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                      <test-case name="NGit.Storage.Pack.DeltaIndexTest.TestLimitObjectSize_InsertFrontFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NGit.Storage.Pack.DeltaIndexTest.TestLimitObjectSize_Length12InsertFails" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NGit.Storage.Pack.DeltaIndexTest.TestLimitObjectSize_Length130CopyFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NGit.Storage.Pack.DeltaIndexTest.TestLimitObjectSize_Length130CopyOk" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NGit.Storage.Pack.DeltaIndexTest.TestLimitObjectSize_Length130InsertFails" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NGit.Storage.Pack.DeltaIndexTest.TestShuffleSegments" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DeltaStreamTest" executed="True" result="Success" success="True" time="0.989" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.Pack.DeltaStreamTest.TestCopy_64k" executed="True" result="Success" success="True" time="0.008" asserts="13" />
                      <test-case name="NGit.Storage.Pack.DeltaStreamTest.TestCopy_Gap" executed="True" result="Success" success="True" time="0.001" asserts="13" />
                      <test-case name="NGit.Storage.Pack.DeltaStreamTest.TestCopy_MaxSize" executed="True" result="Success" success="True" time="0.959" asserts="12" />
                      <test-case name="NGit.Storage.Pack.DeltaStreamTest.TestCopy_OutOfOrder" executed="True" result="Success" success="True" time="0.005" asserts="13" />
                      <test-case name="NGit.Storage.Pack.DeltaStreamTest.TestCopy_SingleOp" executed="True" result="Success" success="True" time="0.000" asserts="12" />
                      <test-case name="NGit.Storage.Pack.DeltaStreamTest.TestIncorrectBaseSize" executed="True" result="Success" success="True" time="0.001" asserts="14" />
                      <test-case name="NGit.Storage.Pack.DeltaStreamTest.TestInsert_SingleOp" executed="True" result="Success" success="True" time="0.001" asserts="12" />
                      <test-case name="NGit.Storage.Pack.DeltaStreamTest.TestInsertAndCopy" executed="True" result="Success" success="True" time="0.001" asserts="16" />
                      <test-case name="NGit.Storage.Pack.DeltaStreamTest.TestSkip" executed="True" result="Success" success="True" time="0.001" asserts="67" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="IntSetTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NGit.Storage.Pack.IntSetTest.TestAdd" executed="True" result="Success" success="True" time="0.001" asserts="133" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Submodule" executed="True" result="Success" success="True" time="1.345" asserts="0">
            <results>
              <test-suite type="TestFixture" name="SubmoduleAddTest" executed="True" result="Success" success="True" time="0.387" asserts="0">
                <results>
                  <test-case name="NGit.Submodule.SubmoduleAddTest.AddExistentSubmodule" executed="True" result="Success" success="True" time="0.018" asserts="2" />
                  <test-case name="NGit.Submodule.SubmoduleAddTest.AddSubmodule" executed="True" result="Success" success="True" time="0.104" asserts="12" />
                  <test-case name="NGit.Submodule.SubmoduleAddTest.AddSubmoduleWithExistingSubmoduleDefined" executed="True" result="Success" success="True" time="0.098" asserts="7" />
                  <test-case name="NGit.Submodule.SubmoduleAddTest.AddSubmoduleWithRelativeUri" executed="True" result="Success" success="True" time="0.104" asserts="13" />
                  <test-case name="NGit.Submodule.SubmoduleAddTest.CommandWithEmptyPath" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                  <test-case name="NGit.Submodule.SubmoduleAddTest.CommandWithEmptyUri" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                  <test-case name="NGit.Submodule.SubmoduleAddTest.CommandWithNullPath" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                  <test-case name="NGit.Submodule.SubmoduleAddTest.CommandWithNullUri" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SubmoduleInitTest" executed="True" result="Success" success="True" time="0.159" asserts="0">
                <results>
                  <test-case name="NGit.Submodule.SubmoduleInitTest.RepositoryWithNoSubmodules" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                  <test-case name="NGit.Submodule.SubmoduleInitTest.RepositoryWithUninitializedModule" executed="True" result="Success" success="True" time="0.021" asserts="10" />
                  <test-case name="NGit.Submodule.SubmoduleInitTest.ResolveInvalidParentUrl" executed="True" result="Success" success="True" time="0.021" asserts="5" />
                  <test-case name="NGit.Submodule.SubmoduleInitTest.ResolveOneLevelHigherRelativeUrl" executed="True" result="Success" success="True" time="0.023" asserts="10" />
                  <test-case name="NGit.Submodule.SubmoduleInitTest.ResolveSameLevelRelativeUrl" executed="True" result="Success" success="True" time="0.023" asserts="10" />
                  <test-case name="NGit.Submodule.SubmoduleInitTest.ResolveTwoLevelHigherRelativeUrl" executed="True" result="Success" success="True" time="0.022" asserts="10" />
                  <test-case name="NGit.Submodule.SubmoduleInitTest.ResolveWorkingDirectoryRelativeUrl" executed="True" result="Success" success="True" time="0.023" asserts="10" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SubmoduleStatusTest" executed="True" result="Success" success="True" time="0.188" asserts="0">
                <results>
                  <test-case name="NGit.Submodule.SubmoduleStatusTest.RepositoryWithDifferentRevCheckedOutSubmodule" executed="True" result="Success" success="True" time="0.038" asserts="11" />
                  <test-case name="NGit.Submodule.SubmoduleStatusTest.RepositoryWithInitializedSubmodule" executed="True" result="Success" success="True" time="0.037" asserts="10" />
                  <test-case name="NGit.Submodule.SubmoduleStatusTest.RepositoryWithMissingSubmodule" executed="True" result="Success" success="True" time="0.016" asserts="9" />
                  <test-case name="NGit.Submodule.SubmoduleStatusTest.RepositoryWithNoHeadInSubmodule" executed="True" result="Success" success="True" time="0.032" asserts="10" />
                  <test-case name="NGit.Submodule.SubmoduleStatusTest.RepositoryWithNoSubmoduleRepository" executed="True" result="Success" success="True" time="0.020" asserts="9" />
                  <test-case name="NGit.Submodule.SubmoduleStatusTest.RepositoryWithNoSubmodules" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                  <test-case name="NGit.Submodule.SubmoduleStatusTest.RepositoryWithUninitializedSubmodule" executed="True" result="Success" success="True" time="0.019" asserts="9" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SubmoduleSyncTest" executed="True" result="Success" success="True" time="0.222" asserts="0">
                <results>
                  <test-case name="NGit.Submodule.SubmoduleSyncTest.RepositoryWithNoSubmodules" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                  <test-case name="NGit.Submodule.SubmoduleSyncTest.RepositoryWithRelativeUriSubmodule" executed="True" result="Success" success="True" time="0.105" asserts="12" />
                  <test-case name="NGit.Submodule.SubmoduleSyncTest.RepositoryWithSubmodule" executed="True" result="Success" success="True" time="0.099" asserts="12" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SubmoduleUpdateTest" executed="True" result="Success" success="True" time="0.163" asserts="0">
                <results>
                  <test-case name="NGit.Submodule.SubmoduleUpdateTest.RepositoryWithInitializedSubmodule" executed="True" result="Success" success="True" time="0.027" asserts="4" />
                  <test-case name="NGit.Submodule.SubmoduleUpdateTest.RepositoryWithNoSubmodules" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                  <test-case name="NGit.Submodule.SubmoduleUpdateTest.RepositoryWithSubmodule" executed="True" result="Success" success="True" time="0.099" asserts="7" />
                  <test-case name="NGit.Submodule.SubmoduleUpdateTest.RepositoryWithUnconfiguredSubmodule" executed="True" result="Success" success="True" time="0.017" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SubmoduleWalkTest" executed="True" result="Success" success="True" time="0.213" asserts="0">
                <results>
                  <test-case name="NGit.Submodule.SubmoduleWalkTest.GeneratorFilteredToOneOfTwoSubmodules" executed="True" result="Success" success="True" time="0.016" asserts="5" />
                  <test-case name="NGit.Submodule.SubmoduleWalkTest.IndexWithGitmodules" executed="True" result="Success" success="True" time="0.022" asserts="12" />
                  <test-case name="NGit.Submodule.SubmoduleWalkTest.RepositoryWithNestedSubmodule" executed="True" result="Success" success="True" time="0.016" asserts="12" />
                  <test-case name="NGit.Submodule.SubmoduleWalkTest.RepositoryWithNoSubmodules" executed="True" result="Success" success="True" time="0.015" asserts="4" />
                  <test-case name="NGit.Submodule.SubmoduleWalkTest.RepositoryWithRootLevelSubmodule" executed="True" result="Success" success="True" time="0.016" asserts="12" />
                  <test-case name="NGit.Submodule.SubmoduleWalkTest.RepositoryWithRootLevelSubmoduleAbsoluteRef" executed="True" result="Success" success="True" time="0.033" asserts="14" />
                  <test-case name="NGit.Submodule.SubmoduleWalkTest.RepositoryWithRootLevelSubmoduleRelativeRef" executed="True" result="Success" success="True" time="0.032" asserts="14" />
                  <test-case name="NGit.Submodule.SubmoduleWalkTest.TestTreeIteratorWithGitmodules" executed="True" result="Success" success="True" time="0.026" asserts="11" />
                  <test-case name="NGit.Submodule.SubmoduleWalkTest.TreeIdWithGitmodules" executed="True" result="Success" success="True" time="0.023" asserts="11" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="SymbolicRefTest" executed="True" result="Success" success="True" time="0.009" asserts="0">
            <results>
              <test-case name="NGit.SymbolicRefTest.TestConstructor" executed="True" result="Success" success="True" time="0.001" asserts="16" />
              <test-case name="NGit.SymbolicRefTest.TestLeaf" executed="True" result="Success" success="True" time="0.000" asserts="16" />
              <test-case name="NGit.SymbolicRefTest.TestToString" executed="True" result="Success" success="True" time="0.001" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="T0001_PersonIdentTest" executed="True" result="Failure" success="False" time="0.006" asserts="0">
            <results>
              <test-case name="NGit.T0001_PersonIdentTest.Test001_NewIdent" executed="True" result="Error" success="False" time="0.001" asserts="0">
                <failure>
                  <message><![CDATA[System.ArgumentOutOfRangeException : startIndex cannot be larger than length of string.
Parameter name: startIndex]]></message>
                  <stack-trace><![CDATA[at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
at System.String.Substring(Int32 startIndex)
at Sharpen.Extensions.GetTimeZone(String tzone) in C:\Users\dprothero\Documents\GitHub\ngit\Sharpen\Sharpen\Extensions.cs:line 266
at NGit.T0001_PersonIdentTest.Test001_NewIdent() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit\T0001_PersonIdentTest.cs:line 56
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="NGit.T0001_PersonIdentTest.Test002_NewIdent" executed="True" result="Success" success="True" time="0.001" asserts="4" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="T0002_TreeTest" executed="True" result="Success" success="True" time="0.409" asserts="0">
            <results>
              <test-case name="NGit.T0002_TreeTest.Test000_sort_01" executed="True" result="Success" success="True" time="0.029" asserts="2" />
              <test-case name="NGit.T0002_TreeTest.Test000_sort_02" executed="True" result="Success" success="True" time="0.030" asserts="3" />
              <test-case name="NGit.T0002_TreeTest.Test000_sort_03" executed="True" result="Success" success="True" time="0.025" asserts="7" />
              <test-case name="NGit.T0002_TreeTest.Test000_sort_04" executed="True" result="Success" success="True" time="0.025" asserts="3" />
              <test-case name="NGit.T0002_TreeTest.Test000_sort_05" executed="True" result="Success" success="True" time="0.025" asserts="3" />
              <test-case name="NGit.T0002_TreeTest.Test001_createEmpty" executed="True" result="Success" success="True" time="0.026" asserts="14" />
              <test-case name="NGit.T0002_TreeTest.Test002_addFile" executed="True" result="Success" success="True" time="0.026" asserts="15" />
              <test-case name="NGit.T0002_TreeTest.Test004_addTree" executed="True" result="Success" success="True" time="0.027" asserts="19" />
              <test-case name="NGit.T0002_TreeTest.Test005_addRecursiveFile" executed="True" result="Success" success="True" time="0.027" asserts="6" />
              <test-case name="NGit.T0002_TreeTest.Test005_addRecursiveTree" executed="True" result="Success" success="True" time="0.027" asserts="6" />
              <test-case name="NGit.T0002_TreeTest.Test006_addDeepTree" executed="True" result="Success" success="True" time="0.027" asserts="31" />
              <test-case name="NGit.T0002_TreeTest.Test007_manyFileLookup" executed="True" result="Success" success="True" time="0.033" asserts="2032" />
              <test-case name="NGit.T0002_TreeTest.Test008_SubtreeInternalSorting" executed="True" result="Success" success="True" time="0.026" asserts="6" />
              <test-case name="NGit.T0002_TreeTest.Test009_SymlinkAndGitlink" executed="True" result="Success" success="True" time="0.032" asserts="3" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ThreadSafeProgressMonitorTest" executed="True" result="Success" success="True" time="0.015" asserts="0">
            <results>
              <test-case name="NGit.ThreadSafeProgressMonitorTest.TestFailsMethodsOnBackgroundThread" executed="True" result="Success" success="True" time="0.006" asserts="3" />
              <test-case name="NGit.ThreadSafeProgressMonitorTest.TestMethodsOkOnMainThread" executed="True" result="Success" success="True" time="0.001" asserts="7" />
              <test-case name="NGit.ThreadSafeProgressMonitorTest.TestUpdateOnBackgroundThreads" executed="True" result="Success" success="True" time="0.003" asserts="7" />
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Transport" executed="True" result="Failure" success="False" time="3.733" asserts="0">
            <results>
              <test-suite type="TestFixture" name="BundleWriterTest" executed="True" result="Failure" success="False" time="0.186" asserts="0">
                <results>
                  <test-case name="NGit.Transport.BundleWriterTest.TestWrite0" executed="True" result="Success" success="True" time="0.075" asserts="4" />
                  <test-case name="NGit.Transport.BundleWriterTest.TestWrite1" executed="True" result="Error" success="False" time="0.110" asserts="10">
                    <failure>
                      <message><![CDATA[System.NotSupportedException : Specified method is not supported.]]></message>
                      <stack-trace><![CDATA[at Sharpen.WrappedSystemStream.Seek(Int64 offset, SeekOrigin origin) in C:\Users\dprothero\Documents\GitHub\ngit\Sharpen\Sharpen\WrappedSystemStream.cs:line 70
at System.IO.BufferedStream.FlushRead()
at System.IO.BufferedStream.Flush()
at System.IO.BufferedStream.Dispose(Boolean disposing)
at System.IO.Stream.Close()
at Sharpen.InputStream.Close() in C:\Users\dprothero\Documents\GitHub\ngit\Sharpen\Sharpen\InputStream.cs:line 33
at NGit.Transport.BundleFetchConnection.Close() in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Transport\BundleFetchConnection.cs:line 334
at NGit.Transport.FetchProcess.CloseConnection(FetchResult result) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Transport\FetchProcess.cs:line 300
at NGit.Transport.FetchProcess.ExecuteImp(ProgressMonitor monitor, FetchResult result) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Transport\FetchProcess.cs:line 209
at NGit.Transport.FetchProcess.Execute(ProgressMonitor monitor, FetchResult result) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Transport\FetchProcess.cs:line 108
at NGit.Transport.Transport.Fetch(ProgressMonitor monitor, ICollection`1 toFetch) in C:\Users\dprothero\Documents\GitHub\ngit\NGit\NGit.Transport\Transport.cs:line 1274
at NGit.Transport.BundleWriterTest.FetchFromBundle(Repository newRepo, Byte[] bundle) in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Transport\BundleWriterTest.cs:line 132
at NGit.Transport.BundleWriterTest.TestWrite1() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Transport\BundleWriterTest.cs:line 112
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="LongMapTest" executed="True" result="Success" success="True" time="0.112" asserts="0">
                <results>
                  <test-case name="NGit.Transport.LongMapTest.TestEmptyMap" executed="True" result="Success" success="True" time="0.003" asserts="6" />
                  <test-case name="NGit.Transport.LongMapTest.TestInsertMinValue" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NGit.Transport.LongMapTest.TestLargeMap" executed="True" result="Success" success="True" time="0.094" asserts="200000" />
                  <test-case name="NGit.Transport.LongMapTest.TestRemoveCollision1" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NGit.Transport.LongMapTest.TestRemoveCollision2" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NGit.Transport.LongMapTest.TestRemoveOne" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Transport.LongMapTest.TestReplaceMaxValue" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Transport.LongMapTest.TestSmallMap" executed="True" result="Success" success="True" time="0.001" asserts="16" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="OpenSshConfigTest" executed="True" result="Success" success="True" time="0.242" asserts="0">
                <results>
                  <test-case name="NGit.Transport.OpenSshConfigTest.TestAlias_BatchModeDefault" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                  <test-case name="NGit.Transport.OpenSshConfigTest.TestAlias_BatchModeYes" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                  <test-case name="NGit.Transport.OpenSshConfigTest.TestAlias_DoesNotMatch" executed="True" result="Success" success="True" time="0.016" asserts="6" />
                  <test-case name="NGit.Transport.OpenSshConfigTest.TestAlias_InheritBatchMode" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                  <test-case name="NGit.Transport.OpenSshConfigTest.TestAlias_InheritPreferredAuthentications" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                  <test-case name="NGit.Transport.OpenSshConfigTest.TestAlias_OptionsInherit" executed="True" result="Success" success="True" time="0.016" asserts="6" />
                  <test-case name="NGit.Transport.OpenSshConfigTest.TestAlias_OptionsKeywordCaseInsensitive" executed="True" result="Success" success="True" time="0.017" asserts="6" />
                  <test-case name="NGit.Transport.OpenSshConfigTest.TestAlias_OptionsSet" executed="True" result="Success" success="True" time="0.016" asserts="6" />
                  <test-case name="NGit.Transport.OpenSshConfigTest.TestAlias_PreferredAuthentications" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                  <test-case name="NGit.Transport.OpenSshConfigTest.TestAlias_PreferredAuthenticationsDefault" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                  <test-case name="NGit.Transport.OpenSshConfigTest.TestNoConfig" executed="True" result="Success" success="True" time="0.014" asserts="6" />
                  <test-case name="NGit.Transport.OpenSshConfigTest.TestQuoteParsing" executed="True" result="Success" success="True" time="0.017" asserts="11" />
                  <test-case name="NGit.Transport.OpenSshConfigTest.TestSeparatorParsing" executed="True" result="Success" success="True" time="0.016" asserts="11" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PacketLineInTest" executed="True" result="Success" success="True" time="0.043" asserts="0">
                <results>
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadACK_ACK1" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadACK_ACKcommon1" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadACK_ACKcontinue1" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadACK_ACKready1" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadACK_ERR" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadACK_Invalid1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadACK_Invalid2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadACK_Invalid3" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadACK_Invalid4" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadACK_NAK" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadString_End" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadString_Len0001" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadString_Len0002" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadString_Len0003" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadString_Len0004" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadString_LenHELO" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadString1" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadString2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadString4" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadString5" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadStringRaw_End" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadStringRaw1" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadStringRaw2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadStringRaw3" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Transport.PacketLineInTest.TestReadStringRaw4" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PacketLineOutTest" executed="True" result="Success" success="True" time="0.030" asserts="0">
                <results>
                  <test-case name="NGit.Transport.PacketLineOutTest.TestFlush" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.PacketLineOutTest.TestWriteEnd" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Transport.PacketLineOutTest.TestWritePacket1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.PacketLineOutTest.TestWritePacket2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.PacketLineOutTest.TestWritePacket3" executed="True" result="Success" success="True" time="0.018" asserts="65517" />
                  <test-case name="NGit.Transport.PacketLineOutTest.TestWriteString1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.PacketLineOutTest.TestWriteString2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.PacketLineOutTest.TestWriteString3" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PackParserTest" executed="True" result="Success" success="True" time="0.610" asserts="0">
                <results>
                  <test-case name="NGit.Transport.PackParserTest.Test1" executed="True" result="Success" success="True" time="0.023" asserts="9" />
                  <test-case name="NGit.Transport.PackParserTest.Test2" executed="True" result="Success" success="True" time="0.033" asserts="13" />
                  <test-case name="NGit.Transport.PackParserTest.TestDataAfterPackFooterSingleRead" executed="True" result="Success" success="True" time="0.023" asserts="2" />
                  <test-case name="NGit.Transport.PackParserTest.TestDataAfterPackFooterSplitHeaderRead" executed="True" result="Success" success="True" time="0.099" asserts="2" />
                  <test-case name="NGit.Transport.PackParserTest.TestDataAfterPackFooterSplitObjectRead" executed="True" result="Success" success="True" time="0.253" asserts="2" />
                  <test-case name="NGit.Transport.PackParserTest.TestMaxObjectSizeDeltaBlock" executed="True" result="Success" success="True" time="0.034" asserts="3" />
                  <test-case name="NGit.Transport.PackParserTest.TestMaxObjectSizeDeltaResultSize" executed="True" result="Success" success="True" time="0.024" asserts="3" />
                  <test-case name="NGit.Transport.PackParserTest.TestMaxObjectSizeFullBlob" executed="True" result="Success" success="True" time="0.025" asserts="3" />
                  <test-case name="NGit.Transport.PackParserTest.TestNonMarkingInputStream" executed="True" result="Success" success="True" time="0.018" asserts="2" />
                  <test-case name="NGit.Transport.PackParserTest.TestPackWithDuplicateBlob" executed="True" result="Success" success="True" time="0.021" asserts="2" />
                  <test-case name="NGit.Transport.PackParserTest.TestPackWithTrailingGarbage" executed="True" result="Success" success="True" time="0.019" asserts="2" />
                  <test-case name="NGit.Transport.PackParserTest.TestTinyThinPack" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PushProcessTest" executed="True" result="Success" success="True" time="0.507" asserts="0">
                <results>
                  <test-case name="NGit.Transport.PushProcessTest.TestPushResult" executed="True" result="Success" success="True" time="0.039" asserts="8" />
                  <test-case name="NGit.Transport.PushProcessTest.TestTrackingRefUpdateDisabled" executed="True" result="Success" success="True" time="0.028" asserts="3" />
                  <test-case name="NGit.Transport.PushProcessTest.TestTrackingRefUpdateEnabled" executed="True" result="Success" success="True" time="0.036" asserts="5" />
                  <test-case name="NGit.Transport.PushProcessTest.TestTrackingRefUpdateOnReject" executed="True" result="Success" success="True" time="0.028" asserts="3" />
                  <test-case name="NGit.Transport.PushProcessTest.TestUpdateCreateRef" executed="True" result="Success" success="True" time="0.027" asserts="4" />
                  <test-case name="NGit.Transport.PushProcessTest.TestUpdateDelete" executed="True" result="Success" success="True" time="0.027" asserts="4" />
                  <test-case name="NGit.Transport.PushProcessTest.TestUpdateDeleteNonExisting" executed="True" result="Success" success="True" time="0.029" asserts="2" />
                  <test-case name="NGit.Transport.PushProcessTest.TestUpdateExpectedRemote" executed="True" result="Success" success="True" time="0.028" asserts="4" />
                  <test-case name="NGit.Transport.PushProcessTest.TestUpdateFastForward" executed="True" result="Success" success="True" time="0.027" asserts="4" />
                  <test-case name="NGit.Transport.PushProcessTest.TestUpdateMixedCases" executed="True" result="Success" success="True" time="0.025" asserts="5" />
                  <test-case name="NGit.Transport.PushProcessTest.TestUpdateNonFastForward" executed="True" result="Success" success="True" time="0.027" asserts="2" />
                  <test-case name="NGit.Transport.PushProcessTest.TestUpdateNonFastForwardForced" executed="True" result="Success" success="True" time="0.027" asserts="4" />
                  <test-case name="NGit.Transport.PushProcessTest.TestUpdateNonFastForwardUnknownObject" executed="True" result="Success" success="True" time="0.028" asserts="2" />
                  <test-case name="NGit.Transport.PushProcessTest.TestUpdateRejectedByConnection" executed="True" result="Success" success="True" time="0.026" asserts="3" />
                  <test-case name="NGit.Transport.PushProcessTest.TestUpdateUnexpectedRemote" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                  <test-case name="NGit.Transport.PushProcessTest.TestUpdateUnexpectedRemoteVsForce" executed="True" result="Success" success="True" time="0.026" asserts="2" />
                  <test-case name="NGit.Transport.PushProcessTest.TestUpdateUpToDate" executed="True" result="Success" success="True" time="0.027" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ReceivePackAdvertiseRefsHookTest" executed="True" result="Success" success="True" time="0.757" asserts="0">
                <results>
                  <test-case name="NGit.Transport.ReceivePackAdvertiseRefsHookTest.TestCreateBranchAtHiddenCommitFails" executed="True" result="Success" success="True" time="0.134" asserts="12" />
                  <test-case name="NGit.Transport.ReceivePackAdvertiseRefsHookTest.TestFilterHidesPrivate" executed="True" result="Success" success="True" time="0.085" asserts="10" />
                  <test-case name="NGit.Transport.ReceivePackAdvertiseRefsHookTest.TestSuccess" executed="True" result="Success" success="True" time="0.119" asserts="10" />
                  <test-case name="NGit.Transport.ReceivePackAdvertiseRefsHookTest.TestUsingHiddenCommonBlobFails" executed="True" result="Success" success="True" time="0.108" asserts="12" />
                  <test-case name="NGit.Transport.ReceivePackAdvertiseRefsHookTest.TestUsingHiddenDeltaBaseFails" executed="True" result="Success" success="True" time="0.100" asserts="12" />
                  <test-case name="NGit.Transport.ReceivePackAdvertiseRefsHookTest.TestUsingUnknownBlobFails" executed="True" result="Success" success="True" time="0.103" asserts="12" />
                  <test-case name="NGit.Transport.ReceivePackAdvertiseRefsHookTest.TestUsingUnknownTreeFails" executed="True" result="Success" success="True" time="0.098" asserts="12" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ReceivePackRefFilterTest" executed="True" result="Success" success="True" time="0.697" asserts="0">
                <results>
                  <test-case name="NGit.Transport.ReceivePackRefFilterTest.TestCreateBranchAtHiddenCommitFails" executed="True" result="Success" success="True" time="0.093" asserts="12" />
                  <test-case name="NGit.Transport.ReceivePackRefFilterTest.TestFilterHidesPrivate" executed="True" result="Success" success="True" time="0.084" asserts="10" />
                  <test-case name="NGit.Transport.ReceivePackRefFilterTest.TestSuccess" executed="True" result="Success" success="True" time="0.116" asserts="10" />
                  <test-case name="NGit.Transport.ReceivePackRefFilterTest.TestUsingHiddenCommonBlobFails" executed="True" result="Success" success="True" time="0.100" asserts="12" />
                  <test-case name="NGit.Transport.ReceivePackRefFilterTest.TestUsingHiddenDeltaBaseFails" executed="True" result="Success" success="True" time="0.099" asserts="12" />
                  <test-case name="NGit.Transport.ReceivePackRefFilterTest.TestUsingUnknownBlobFails" executed="True" result="Success" success="True" time="0.100" asserts="12" />
                  <test-case name="NGit.Transport.ReceivePackRefFilterTest.TestUsingUnknownTreeFails" executed="True" result="Success" success="True" time="0.096" asserts="12" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RefSpecTest" executed="True" result="Success" success="True" time="0.030" asserts="0">
                <results>
                  <test-case name="NGit.Transport.RefSpecTest.TestCreateEmpty" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                  <test-case name="NGit.Transport.RefSpecTest.TestDeleteMaster" executed="True" result="Success" success="True" time="0.002" asserts="11" />
                  <test-case name="NGit.Transport.RefSpecTest.TestExpandFromDestination_NonWildcard" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NGit.Transport.RefSpecTest.TestExpandFromDestination_Wildcard" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NGit.Transport.RefSpecTest.TestForceMaster" executed="True" result="Success" success="True" time="0.001" asserts="11" />
                  <test-case name="NGit.Transport.RefSpecTest.TestForceMasterMaster" executed="True" result="Success" success="True" time="0.001" asserts="11" />
                  <test-case name="NGit.Transport.RefSpecTest.TestForceRemotesOrigin" executed="True" result="Success" success="True" time="0.001" asserts="17" />
                  <test-case name="NGit.Transport.RefSpecTest.TestMaster" executed="True" result="Success" success="True" time="0.001" asserts="11" />
                  <test-case name="NGit.Transport.RefSpecTest.TestMasterMaster" executed="True" result="Success" success="True" time="0.001" asserts="11" />
                  <test-case name="NGit.Transport.RefSpecTest.TestSetDestination" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Transport.RefSpecTest.TestSetDestination_SourceNull" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Transport.RefSpecTest.TestSetForceUpdate" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                  <test-case name="NGit.Transport.RefSpecTest.TestSetSource" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Transport.RefSpecTest.TestSetSourceDestination" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Transport.RefSpecTest.TestSplitLastColon" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RemoteConfigTest" executed="True" result="Success" success="True" time="0.058" asserts="0">
                <results>
                  <test-case name="NGit.Transport.RemoteConfigTest.MultipleInsteadOf" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                  <test-case name="NGit.Transport.RemoteConfigTest.MultiplePushInsteadOf" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Transport.RemoteConfigTest.NoInsteadOf" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Transport.RemoteConfigTest.NoPushInsteadOf" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Transport.RemoteConfigTest.SingleInsteadOf" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Transport.RemoteConfigTest.SinglePushInsteadOf" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestAddURI" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestBackup" executed="True" result="Success" success="True" time="0.001" asserts="17" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestCreateOrigin" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestMirror" executed="True" result="Success" success="True" time="0.001" asserts="16" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestRemoveFirstURI" executed="True" result="Success" success="True" time="0.001" asserts="11" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestRemoveLastURI" executed="True" result="Success" success="True" time="0.001" asserts="11" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestRemoveMiddleURI" executed="True" result="Success" success="True" time="0.001" asserts="11" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestRemoveOnlyURI" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestSaveAddURI" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestSaveAllTags" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestSaveNoTags" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestSaveRemoveFirstURI" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestSaveRemoveLastURI" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestSaveTimeout" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestSimple" executed="True" result="Success" success="True" time="0.001" asserts="15" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestSimpleAlwaysTags" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestSimpleNoTags" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestSimpleTimeout" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestUnknown" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NGit.Transport.RemoteConfigTest.TestUploadPack" executed="True" result="Success" success="True" time="0.001" asserts="14" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SideBandOutputStreamTest" executed="True" result="Success" success="True" time="0.040" asserts="0">
                <results>
                  <test-case name="NGit.Transport.SideBandOutputStreamTest.TestConstructor_RejectsBadBufferSize" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NGit.Transport.SideBandOutputStreamTest.TestConstructor_RejectsBadChannel" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Transport.SideBandOutputStreamTest.TestFlush" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.SideBandOutputStreamTest.TestWrite_CH_DATA" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.SideBandOutputStreamTest.TestWrite_CH_ERROR" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.SideBandOutputStreamTest.TestWrite_CH_PROGRESS" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.SideBandOutputStreamTest.TestWrite_Large" executed="True" result="Success" success="True" time="0.020" asserts="65518" />
                  <test-case name="NGit.Transport.SideBandOutputStreamTest.TestWrite_Small" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.SideBandOutputStreamTest.TestWrite_SmallBlocks1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.SideBandOutputStreamTest.TestWrite_SmallBlocks2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.SideBandOutputStreamTest.TestWrite_SmallBlocks3" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TransportTest" executed="True" result="Success" success="True" time="0.189" asserts="0">
                <results>
                  <test-case name="NGit.Transport.TransportTest.TestFindRemoteRefUpdatesNoWildcardNoDestination" executed="True" result="Success" success="True" time="0.058" asserts="7" />
                  <test-case name="NGit.Transport.TransportTest.TestFindRemoteRefUpdatesNoWildcardNoTracking" executed="True" result="Success" success="True" time="0.029" asserts="7" />
                  <test-case name="NGit.Transport.TransportTest.TestFindRemoteRefUpdatesTrackingRef" executed="True" result="Success" success="True" time="0.028" asserts="6" />
                  <test-case name="NGit.Transport.TransportTest.TestFindRemoteRefUpdatesTwoRefSpecs" executed="True" result="Success" success="True" time="0.029" asserts="4" />
                  <test-case name="NGit.Transport.TransportTest.TestFindRemoteRefUpdatesWildcardNoTracking" executed="True" result="Success" success="True" time="0.035" asserts="4" />
                  <test-case name="NGit.Transport.TransportTest.TestSpi" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[I've no idea how the transport is being registered anyway...]]></message>
                    </reason>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="URIishTest" executed="True" result="Success" success="True" time="0.109" asserts="0">
                <results>
                  <test-case name="NGit.Transport.URIishTest.ShouldRaiseErrorOnEmptyURI" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="NGit.Transport.URIishTest.ShouldRaiseErrorOnNullURI" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="NGit.Transport.URIishTest.TestALot" executed="True" result="Success" success="True" time="0.006" asserts="1536" />
                  <test-case name="NGit.Transport.URIishTest.TestFileProtocol" executed="True" result="Success" success="True" time="0.003" asserts="26" />
                  <test-case name="NGit.Transport.URIishTest.TestFileProtoUnix" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                  <test-case name="NGit.Transport.URIishTest.TestFileProtoWindows" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                  <test-case name="NGit.Transport.URIishTest.TestFileWithNoneUserHomeWithTilde" executed="True" result="Success" success="True" time="0.001" asserts="13" />
                  <test-case name="NGit.Transport.URIishTest.TestFileWithUserHome" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Resolving ~user is beyond standard Java API and need more support]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Transport.URIishTest.TestGetAbsEmptyHumanishName" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="NGit.Transport.URIishTest.TestGetEmptyHumanishName" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="NGit.Transport.URIishTest.TestGetNullHumanishName" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="NGit.Transport.URIishTest.TestGetSet" executed="True" result="Success" success="True" time="0.001" asserts="14" />
                  <test-case name="NGit.Transport.URIishTest.TestGetSlashesValidSlashHumanishName" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetSlashSlashDotGitSlashHumanishName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetSlashValidSlashDotGitSlashHumanishName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetSlashValidSlashHumanishName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetTwoSlashesDotGitHumanishName" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetValidDotGitHumanishName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetValidDotGitSlashHumanishName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetValidHumanishName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetValidSlashHumanishName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetValidWithEmptySlashDotGitHumanishName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetValidWithSlashDotGitHumanishName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetValidWithSlashDotGitSlashHumanishName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetValidWithSlashesDotGitHumanishName" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetValidWithSlashesDotGitSlashHumanishName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetWindowsPathHumanishName" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGetWithSlashDotGitHumanishName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestGitProtoUnix" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                  <test-case name="NGit.Transport.URIishTest.TestGitProtoUnixPort" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Transport.URIishTest.TestGitProtoWindows" executed="True" result="Success" success="True" time="0.000" asserts="9" />
                  <test-case name="NGit.Transport.URIishTest.TestGitProtoWindowsPort" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Transport.URIishTest.TestGitSshProto" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Transport.URIishTest.TestGitWithUserHome" executed="True" result="Success" success="True" time="0.000" asserts="13" />
                  <test-case name="NGit.Transport.URIishTest.TestMissingPort" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Transport.URIishTest.TestPathSeparator" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Transport.URIishTest.TestRelativePath" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                  <test-case name="NGit.Transport.URIishTest.TestScpStyleNoURIDecoding" executed="True" result="Success" success="True" time="0.000" asserts="9" />
                  <test-case name="NGit.Transport.URIishTest.TestScpStyleWithoutUserAbsolutePath" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Transport.URIishTest.TestScpStyleWithoutUserRelativePath" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Transport.URIishTest.TestScpStyleWithUser" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                  <test-case name="NGit.Transport.URIishTest.TestSshGitProto" executed="True" result="Success" success="True" time="0.000" asserts="9" />
                  <test-case name="NGit.Transport.URIishTest.TestSshProto" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Transport.URIishTest.TestSshProtoWithADUserPassAndPort" executed="True" result="Success" success="True" time="0.001" asserts="13" />
                  <test-case name="NGit.Transport.URIishTest.TestSshProtoWithEscapedADUserPassAndPort" executed="True" result="Success" success="True" time="0.001" asserts="13" />
                  <test-case name="NGit.Transport.URIishTest.TestSshProtoWithUserAndPort" executed="True" result="Success" success="True" time="0.000" asserts="11" />
                  <test-case name="NGit.Transport.URIishTest.TestSshProtoWithUserPassAndPort" executed="True" result="Success" success="True" time="0.000" asserts="13" />
                  <test-case name="NGit.Transport.URIishTest.TestUNC" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                  <test-case name="NGit.Transport.URIishTest.TestUnixFile" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                  <test-case name="NGit.Transport.URIishTest.TestURIEncode_00" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                  <test-case name="NGit.Transport.URIishTest.TestURIEncode_0a" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                  <test-case name="NGit.Transport.URIishTest.TestURIEncode_unicode" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                  <test-case name="NGit.Transport.URIishTest.TestURIEncodeDecode" executed="True" result="Success" success="True" time="0.000" asserts="13" />
                  <test-case name="NGit.Transport.URIishTest.TestUserPasswordAndPort" executed="True" result="Success" success="True" time="0.001" asserts="17" />
                  <test-case name="NGit.Transport.URIishTest.TestWindowsFile" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                  <test-case name="NGit.Transport.URIishTest.TestWindowsFile2" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Treewalk" executed="True" result="Failure" success="False" time="2.876" asserts="0">
            <results>
              <test-suite type="TestFixture" name="AbstractTreeIteratorTest" executed="True" result="Success" success="True" time="0.014" asserts="0">
                <results>
                  <test-case name="NGit.Treewalk.AbstractTreeIteratorTest.TestCreateEmptyTreeIterator" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                  <test-case name="NGit.Treewalk.AbstractTreeIteratorTest.TestEnsurePathCapacityFastCase" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NGit.Treewalk.AbstractTreeIteratorTest.TestEnsurePathCapacityGrows" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                  <test-case name="NGit.Treewalk.AbstractTreeIteratorTest.TestEntryFileMode" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                  <test-case name="NGit.Treewalk.AbstractTreeIteratorTest.TestEntryPath" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NGit.Treewalk.AbstractTreeIteratorTest.TestGrowPath" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NGit.Treewalk.AbstractTreeIteratorTest.TestPathCompare" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CanonicalTreeParserTest" executed="True" result="Success" success="True" time="0.032" asserts="0">
                <results>
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestBackwards_ConfusingPathName" executed="True" result="Success" success="True" time="0.002" asserts="9" />
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestBackwords_Prebuilts1" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestBackwords_Prebuilts2" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestEmptyTree_AtEOF" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestFreakingHugePathName" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestOneEntry_Backwards" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestOneEntry_Forward" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestOneEntry_Seek1IsEOF" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestThreeEntries_BackwardsTwo" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestThreeEntries_Seek2" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestThreeEntries_Seek3IsEOF" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestTwoEntries_BackwardsOneAtATime" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestTwoEntries_BackwardsTwo" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestTwoEntries_ForwardOneAtATime" executed="True" result="Success" success="True" time="0.001" asserts="11" />
                  <test-case name="NGit.Treewalk.CanonicalTreeParserTest.TestTwoEntries_Seek2IsEOF" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="EmptyTreeIteratorTest" executed="True" result="Success" success="True" time="0.091" asserts="0">
                <results>
                  <test-case name="NGit.Treewalk.EmptyTreeIteratorTest.TestAtEOF" executed="True" result="Success" success="True" time="0.015" asserts="3" />
                  <test-case name="NGit.Treewalk.EmptyTreeIteratorTest.TestBackDoesNothing" executed="True" result="Success" success="True" time="0.014" asserts="7" />
                  <test-case name="NGit.Treewalk.EmptyTreeIteratorTest.TestCreateSubtreeIterator" executed="True" result="Success" success="True" time="0.013" asserts="5" />
                  <test-case name="NGit.Treewalk.EmptyTreeIteratorTest.TestEntryObjectId" executed="True" result="Success" success="True" time="0.013" asserts="5" />
                  <test-case name="NGit.Treewalk.EmptyTreeIteratorTest.TestNextDoesNothing" executed="True" result="Success" success="True" time="0.013" asserts="7" />
                  <test-case name="NGit.Treewalk.EmptyTreeIteratorTest.TestStopWalkCallsParent" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="FileTreeIteratorTest" executed="True" result="Failure" success="False" time="0.551" asserts="0">
                <results>
                  <test-case name="NGit.Treewalk.FileTreeIteratorTest.SubmoduleDirectoryIterator" executed="True" result="Success" success="True" time="0.092" asserts="3" />
                  <test-case name="NGit.Treewalk.FileTreeIteratorTest.SubmoduleHeadMatchesIndex" executed="True" result="Success" success="True" time="0.095" asserts="3" />
                  <test-case name="NGit.Treewalk.FileTreeIteratorTest.SubmoduleNestedWithHeadMatchingIndex" executed="True" result="Success" success="True" time="0.092" asserts="3" />
                  <test-case name="NGit.Treewalk.FileTreeIteratorTest.SubmoduleWithNoGitDirectory" executed="True" result="Success" success="True" time="0.041" asserts="6" />
                  <test-case name="NGit.Treewalk.FileTreeIteratorTest.SubmoduleWithNoHead" executed="True" result="Success" success="True" time="0.052" asserts="5" />
                  <test-case name="NGit.Treewalk.FileTreeIteratorTest.TestComputeFileObjectId" executed="True" result="Success" success="True" time="0.017" asserts="3" />
                  <test-case name="NGit.Treewalk.FileTreeIteratorTest.TestEmptyIfRootDoesNotExist" executed="True" result="Success" success="True" time="0.016" asserts="4" />
                  <test-case name="NGit.Treewalk.FileTreeIteratorTest.TestEmptyIfRootIsEmpty" executed="True" result="Success" success="True" time="0.020" asserts="4" />
                  <test-case name="NGit.Treewalk.FileTreeIteratorTest.TestEmptyIfRootIsFile" executed="True" result="Success" success="True" time="0.016" asserts="4" />
                  <test-case name="NGit.Treewalk.FileTreeIteratorTest.TestIsModifiedFileSmudged" executed="True" result="Failure" success="False" time="0.027" asserts="2">
                    <failure>
                      <message><![CDATA[  Expected: SMUDGED
  But was:  DIFFER_BY_TIMESTAMP
]]></message>
                      <stack-trace><![CDATA[at NGit.Treewalk.FileTreeIteratorTest.TestIsModifiedFileSmudged() in C:\Users\dprothero\Documents\GitHub\ngit\NGit.Test\NGit.Treewalk\FileTreeIteratorTest.cs:line 227
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="NGit.Treewalk.FileTreeIteratorTest.TestIsModifiedSymlink" executed="True" result="Success" success="True" time="0.040" asserts="2" />
                  <test-case name="NGit.Treewalk.FileTreeIteratorTest.TestSimpleIterate" executed="True" result="Success" success="True" time="0.019" asserts="30" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Filter" executed="True" result="Success" success="True" time="1.917" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="IndexDiffFilterTest" executed="True" result="Success" success="True" time="1.589" asserts="0">
                    <results>
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestEmptyFolderCommitted" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestEmptyFolderCommittedDeleted" executed="True" result="Success" success="True" time="0.029" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestEmptyFolderCommittedDeletedCommittedComparedWithInitialCommit" executed="True" result="Success" success="True" time="0.046" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestEmptyFolderCommittedDeletedCommittedIgnoredComparedWithInitialCommit" executed="True" result="Success" success="True" time="0.043" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestEmptyFolderIgnored" executed="True" result="Success" success="True" time="0.032" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestEmptyFolderUntracked" executed="True" result="Success" success="True" time="0.030" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileCommitted" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileCommittedChangedNotModified" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileCommittedDeleted" executed="True" result="Success" success="True" time="0.032" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileCommittedDeletedCommittedComparedWithInitialCommit" executed="True" result="Success" success="True" time="0.074" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileCommittedDeletedCommittedIgnoredComparedWithInitialCommit" executed="True" result="Success" success="True" time="0.050" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileCommittedModified" executed="True" result="Success" success="True" time="0.034" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileCommittedModifiedCommittedComparedWithInitialCommit" executed="True" result="Success" success="True" time="0.052" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileCommittedModifiedIgnored" executed="True" result="Success" success="True" time="0.034" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileIgnored" executed="True" result="Success" success="True" time="0.036" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileIgnoredNotHonored" executed="True" result="Success" success="True" time="0.035" asserts="4" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderAllIgnored" executed="True" result="Success" success="True" time="0.041" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderCommitted" executed="True" result="Success" success="True" time="0.036" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderCommittedAllDeleted" executed="True" result="Success" success="True" time="0.035" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderCommittedAllDeletedCommittedAllIgnoredComparedWithInitialCommit" executed="True" result="Success" success="True" time="0.067" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderCommittedAllDeletedCommittedComparedWithInitialCommit" executed="True" result="Success" success="True" time="0.061" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderCommittedChangedNotModified" executed="True" result="Success" success="True" time="0.036" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderCommittedDeleted" executed="True" result="Success" success="True" time="0.036" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderCommittedDeletedCommittedComparedWithInitialCommit" executed="True" result="Success" success="True" time="0.050" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderCommittedDeletedCommittedIgnoredComparedWithInitialCommit" executed="True" result="Success" success="True" time="0.053" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderCommittedModified" executed="True" result="Success" success="True" time="0.037" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderCommittedModifiedAllIgnored" executed="True" result="Success" success="True" time="0.037" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderCommittedModifiedCommittedComparedWithInitialCommit" executed="True" result="Success" success="True" time="0.058" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderCommittedModifiedIgnored" executed="True" result="Success" success="True" time="0.038" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderCommittedNonRecursive" executed="True" result="Success" success="True" time="0.037" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderIgnored" executed="True" result="Success" success="True" time="0.039" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileInFolderUntracked" executed="True" result="Success" success="True" time="0.038" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFileUntracked" executed="True" result="Success" success="True" time="0.033" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFolderChangedToFile" executed="True" result="Success" success="True" time="0.038" asserts="4" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestFolderChangedToFileCommittedComparedWithInitialCommit" executed="True" result="Success" success="True" time="0.054" asserts="4" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestNonRecursiveTreeWalk" executed="True" result="Success" success="True" time="0.038" asserts="9" />
                      <test-case name="NGit.Treewalk.Filter.IndexDiffFilterTest.TestRecursiveTreeWalk" executed="True" result="Success" success="True" time="0.037" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotTreeFilterTest" executed="True" result="Success" success="True" time="0.089" asserts="0">
                    <results>
                      <test-case name="NGit.Treewalk.Filter.NotTreeFilterTest.TestCloneIsDeepClone" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.NotTreeFilterTest.TestCloneIsSparseWhenPossible" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.NotTreeFilterTest.TestNegateIsUnwrap" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.NotTreeFilterTest.TestShouldBeRecursive_ALL" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.NotTreeFilterTest.TestShouldBeRecursive_PathFilter" executed="True" result="Success" success="True" time="0.012" asserts="3" />
                      <test-case name="NGit.Treewalk.Filter.NotTreeFilterTest.TestWrap" executed="True" result="Success" success="True" time="0.013" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PathSuffixFilterTest" executed="True" result="Success" success="True" time="0.057" asserts="0">
                    <results>
                      <test-case name="NGit.Treewalk.Filter.PathSuffixFilterTest.TestNonRecursiveFiltering" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.PathSuffixFilterTest.TestRecursiveFiltering" executed="True" result="Success" success="True" time="0.031" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PathSuffixFilterTestCase" executed="True" result="Success" success="True" time="0.054" asserts="0">
                    <results>
                      <test-case name="NGit.Treewalk.Filter.PathSuffixFilterTestCase.TestNonRecursiveFiltering" executed="True" result="Success" success="True" time="0.022" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.PathSuffixFilterTestCase.TestRecursiveFiltering" executed="True" result="Success" success="True" time="0.030" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TreeFilterTest" executed="True" result="Success" success="True" time="0.116" asserts="0">
                    <results>
                      <test-case name="NGit.Treewalk.Filter.TreeFilterTest.TestALL_IdentityClone" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.TreeFilterTest.TestALL_IncludesAnything" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.TreeFilterTest.TestALL_ShouldNotBeRecursive" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.TreeFilterTest.TestANY_DIFF_IdentityClone" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.TreeFilterTest.TestANY_DIFF_IncludesSingleTreeCase" executed="True" result="Success" success="True" time="0.027" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.TreeFilterTest.TestANY_DIFF_ShouldNotBeRecursive" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                      <test-case name="NGit.Treewalk.Filter.TreeFilterTest.TestNotALL_IncludesNothing" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ForPathTest" executed="True" result="Success" success="True" time="0.028" asserts="0">
                <results>
                  <test-case name="NGit.Treewalk.ForPathTest.TestFindObjects" executed="True" result="Success" success="True" time="0.027" asserts="17" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NameConflictTreeWalkTest" executed="True" result="Success" success="True" time="0.079" asserts="0">
                <results>
                  <test-case name="NGit.Treewalk.NameConflictTreeWalkTest.TestDF_DetectConflict" executed="True" result="Success" success="True" time="0.015" asserts="34" />
                  <test-case name="NGit.Treewalk.NameConflictTreeWalkTest.TestDF_GapByOne" executed="True" result="Success" success="True" time="0.014" asserts="24" />
                  <test-case name="NGit.Treewalk.NameConflictTreeWalkTest.TestDF_NoGap" executed="True" result="Success" success="True" time="0.014" asserts="24" />
                  <test-case name="NGit.Treewalk.NameConflictTreeWalkTest.TestDF_SkipsSeenSubtree" executed="True" result="Success" success="True" time="0.014" asserts="24" />
                  <test-case name="NGit.Treewalk.NameConflictTreeWalkTest.TestNoDF_NoGap" executed="True" result="Success" success="True" time="0.014" asserts="23" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PostOrderTreeWalkTest" executed="True" result="Success" success="True" time="0.094" asserts="0">
                <results>
                  <test-case name="NGit.Treewalk.PostOrderTreeWalkTest.TestInitialize_NoPostOrder" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                  <test-case name="NGit.Treewalk.PostOrderTreeWalkTest.TestInitialize_TogglePostOrder" executed="True" result="Success" success="True" time="0.014" asserts="4" />
                  <test-case name="NGit.Treewalk.PostOrderTreeWalkTest.TestNoPostOrder" executed="True" result="Success" success="True" time="0.015" asserts="19" />
                  <test-case name="NGit.Treewalk.PostOrderTreeWalkTest.TestResetDoesNotAffectPostOrder" executed="True" result="Success" success="True" time="0.014" asserts="5" />
                  <test-case name="NGit.Treewalk.PostOrderTreeWalkTest.TestWithPostOrder_EnterSubtree" executed="True" result="Success" success="True" time="0.014" asserts="24" />
                  <test-case name="NGit.Treewalk.PostOrderTreeWalkTest.TestWithPostOrder_NoEnterSubtree" executed="True" result="Success" success="True" time="0.014" asserts="13" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TreeWalkBasicDiffTest" executed="True" result="Success" success="True" time="0.044" asserts="0">
                <results>
                  <test-case name="NGit.Treewalk.TreeWalkBasicDiffTest.TestMissingSubtree_DetectFileAdded_FileModified" executed="True" result="Success" success="True" time="0.044" asserts="14" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Util" executed="True" result="Success" success="True" time="2.911" asserts="0">
            <results>
              <test-suite type="TestFixture" name="Base64Test" executed="True" result="Success" success="True" time="0.012" asserts="0">
                <results>
                  <test-case name="NGit.Util.Base64Test.TestDecode" executed="True" result="Success" success="True" time="0.004" asserts="4" />
                  <test-case name="NGit.Util.Base64Test.TestDecodeFail_NonBase64Character" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="NGit.Util.Base64Test.TestEncode" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                  <test-case name="NGit.Util.Base64Test.TestEncodeMatchesDecode" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="BlockListTest" executed="True" result="Success" success="True" time="0.038" asserts="0">
                <results>
                  <test-case name="NGit.Util.BlockListTest.TestAddAllFromOtherList" executed="True" result="Success" success="True" time="0.004" asserts="2050" />
                  <test-case name="NGit.Util.BlockListTest.TestAddRejectsBadIndexes" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Util.BlockListTest.TestAddRemoveAdd" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                  <test-case name="NGit.Util.BlockListTest.TestAddSlowPath" executed="True" result="Success" success="True" time="0.002" asserts="12" />
                  <test-case name="NGit.Util.BlockListTest.TestAddToEnd" executed="True" result="Success" success="True" time="0.003" asserts="6148" />
                  <test-case name="NGit.Util.BlockListTest.TestEmptyList" executed="True" result="Success" success="True" time="0.001" asserts="12" />
                  <test-case name="NGit.Util.BlockListTest.TestFastIterator" executed="True" result="Success" success="True" time="0.003" asserts="6146" />
                  <test-case name="NGit.Util.BlockListTest.TestGet" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                  <test-case name="NGit.Util.BlockListTest.TestRemoveFromEnd" executed="True" result="Success" success="True" time="0.002" asserts="6" />
                  <test-case name="NGit.Util.BlockListTest.TestRemoveRejectsBadIndexes" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Util.BlockListTest.TestRemoveSlowPath" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Util.BlockListTest.TestSet" executed="True" result="Success" success="True" time="0.001" asserts="11" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ChangeIdUtilTest" executed="True" result="Success" success="True" time="0.064" asserts="0">
                <results>
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestACommitWithBug_SubButNoBody" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestACommitWithSubject_NoBodySobAndBug" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestACommitWithSubject_NonFooterAndBugAndSob" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestACommitWithSubjectBodyBugBrackersAndSob" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestACommitWithSubjectBodyBugEmptyLineAndSob" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestACommitWithSubjectBodyBugLineWithASpaceAndSob" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestACommitWithSubjectBug_NonFooterLineAndSob" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestATwoLines" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestChangeIdAfterBugOrIssue" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestChangeIdAlreadySet" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestChangeIdAlreadySetWithReplacement" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestClean" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestDirCacheAltersId" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestEmptyMessages" executed="True" result="Success" success="True" time="0.000" asserts="11" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestFirstParentAltersId" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestHasChangeid" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestHasChangeidWithReplacement" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestId" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestKernelStyleFooter" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestMultiLineMessagesWithoutFooter" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestMultiLineMessagesWithSignedOffBy" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestNoteInMiddle" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestOneliner" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestOnelinerFollowedByBlank" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestRegularCommit" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestRegularCommitWithSob_ButNoBody" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestSingleLineMessages" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestSingleLineMessagesWithSignedOffBy" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestTimeAltersId" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Util.ChangeIdUtilTest.TestWithEndingURL" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="FileUtilTest" executed="True" result="Success" success="True" time="0.017" asserts="0">
                <results>
                  <test-case name="NGit.Util.FileUtilTest.TestDeleteFile" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                  <test-case name="NGit.Util.FileUtilTest.TestDeleteRecursive" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                  <test-case name="NGit.Util.FileUtilTest.TestMkdir" executed="True" result="Success" success="True" time="0.003" asserts="5" />
                  <test-case name="NGit.Util.FileUtilTest.TestMkdirs" executed="True" result="Success" success="True" time="0.004" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="GitDateFormatterTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="NGit.Util.GitDateFormatterTest.DEFAULT" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Matching java date formatting is not critical right now]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Util.GitDateFormatterTest.ISO" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Matching java date formatting is not critical right now]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Util.GitDateFormatterTest.LOCAL" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.GitDateFormatterTest.LOCALE" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Matching java date formatting is not critical right now]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Util.GitDateFormatterTest.LOCALELOCAL" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Matching java date formatting is not critical right now]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Util.GitDateFormatterTest.RAW" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Matching java date formatting is not critical right now]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Util.GitDateFormatterTest.RELATIVE" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="NGit.Util.GitDateFormatterTest.RFC" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Matching java date formatting is not critical right now]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Util.GitDateFormatterTest.SHORT" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="IntListTest" executed="True" result="Success" success="True" time="0.018" asserts="0">
                <results>
                  <test-case name="NGit.Util.IntListTest.TestAdd_LargeGroup" executed="True" result="Success" success="True" time="0.001" asserts="502" />
                  <test-case name="NGit.Util.IntListTest.TestAdd_SmallGroup" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                  <test-case name="NGit.Util.IntListTest.TestAdd_ZeroCapacity" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Util.IntListTest.TestClear" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Util.IntListTest.TestEmpty_DefaultCapacity" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Util.IntListTest.TestEmpty_SpecificCapacity" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Util.IntListTest.TestFillTo0" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.IntListTest.TestFillTo1" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Util.IntListTest.TestFillTo100" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Util.IntListTest.TestSet" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                  <test-case name="NGit.Util.IntListTest.TestToString" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="IO" executed="True" result="Success" success="True" time="1.855" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AutoCRLFOutputStreamTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NGit.Util.IO.AutoCRLFOutputStreamTest.Test" executed="True" result="Success" success="True" time="0.004" asserts="180" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EolCanonicalizingInputStreamTest" executed="True" result="Success" success="True" time="0.011" asserts="0">
                    <results>
                      <test-case name="NGit.Util.IO.EolCanonicalizingInputStreamTest.TestBinaryDetect" executed="True" result="Success" success="True" time="0.001" asserts="90" />
                      <test-case name="NGit.Util.IO.EolCanonicalizingInputStreamTest.TestBinaryDontDetect" executed="True" result="Success" success="True" time="0.000" asserts="70" />
                      <test-case name="NGit.Util.IO.EolCanonicalizingInputStreamTest.TestCR" executed="True" result="Success" success="True" time="0.000" asserts="60" />
                      <test-case name="NGit.Util.IO.EolCanonicalizingInputStreamTest.TestCRLF" executed="True" result="Success" success="True" time="0.000" asserts="60" />
                      <test-case name="NGit.Util.IO.EolCanonicalizingInputStreamTest.TestEmpty" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                      <test-case name="NGit.Util.IO.EolCanonicalizingInputStreamTest.TestLF" executed="True" result="Success" success="True" time="0.000" asserts="60" />
                      <test-case name="NGit.Util.IO.EolCanonicalizingInputStreamTest.TestLFCR" executed="True" result="Success" success="True" time="0.000" asserts="80" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimeoutInputStreamTest" executed="True" result="Success" success="True" time="0.775" asserts="0">
                    <results>
                      <test-case name="NGit.Util.IO.TimeoutInputStreamTest.TestTimeout_readBuffer_Success1" executed="True" result="Success" success="True" time="0.006" asserts="4" />
                      <test-case name="NGit.Util.IO.TimeoutInputStreamTest.TestTimeout_readBuffer_Success2" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NGit.Util.IO.TimeoutInputStreamTest.TestTimeout_readBuffer_Timeout" executed="True" result="Success" success="True" time="0.251" asserts="4" />
                      <test-case name="NGit.Util.IO.TimeoutInputStreamTest.TestTimeout_readByte_Success1" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                      <test-case name="NGit.Util.IO.TimeoutInputStreamTest.TestTimeout_readByte_Success2" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                      <test-case name="NGit.Util.IO.TimeoutInputStreamTest.TestTimeout_readByte_Timeout" executed="True" result="Success" success="True" time="0.250" asserts="4" />
                      <test-case name="NGit.Util.IO.TimeoutInputStreamTest.TestTimeout_skip_Success" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                      <test-case name="NGit.Util.IO.TimeoutInputStreamTest.TestTimeout_skip_Timeout" executed="True" result="Success" success="True" time="0.250" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimeoutOutputStreamTest" executed="True" result="Success" success="True" time="1.027" asserts="0">
                    <results>
                      <test-case name="NGit.Util.IO.TimeoutOutputStreamTest.TestTimeout_close_Success" executed="True" result="Success" success="True" time="0.004" asserts="4" />
                      <test-case name="NGit.Util.IO.TimeoutOutputStreamTest.TestTimeout_close_Timeout" executed="True" result="Success" success="True" time="0.250" asserts="5" />
                      <test-case name="NGit.Util.IO.TimeoutOutputStreamTest.TestTimeout_flush_Success" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                      <test-case name="NGit.Util.IO.TimeoutOutputStreamTest.TestTimeout_flush_Timeout" executed="True" result="Success" success="True" time="0.251" asserts="5" />
                      <test-case name="NGit.Util.IO.TimeoutOutputStreamTest.TestTimeout_writeBuffer_Success1" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                      <test-case name="NGit.Util.IO.TimeoutOutputStreamTest.TestTimeout_writeBuffer_Timeout" executed="True" result="Success" success="True" time="0.251" asserts="4" />
                      <test-case name="NGit.Util.IO.TimeoutOutputStreamTest.TestTimeout_writeByte_Success1" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                      <test-case name="NGit.Util.IO.TimeoutOutputStreamTest.TestTimeout_writeByte_Success2" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                      <test-case name="NGit.Util.IO.TimeoutOutputStreamTest.TestTimeout_writeByte_Timeout" executed="True" result="Success" success="True" time="0.251" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UnionInputStreamTest" executed="True" result="Success" success="True" time="0.026" asserts="0">
                    <results>
                      <test-case name="NGit.Util.IO.UnionInputStreamTest.TestArrayConstructor" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                      <test-case name="NGit.Util.IO.UnionInputStreamTest.TestAutoCloseDuringRead" executed="True" result="Success" success="True" time="0.001" asserts="11" />
                      <test-case name="NGit.Util.IO.UnionInputStreamTest.TestCloseDuringClose" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                      <test-case name="NGit.Util.IO.UnionInputStreamTest.TestEmptyStream" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                      <test-case name="NGit.Util.IO.UnionInputStreamTest.TestExceptionDuringClose" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NGit.Util.IO.UnionInputStreamTest.TestMarkSupported" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NGit.Util.IO.UnionInputStreamTest.TestNonBlockingPartialRead" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="NGit.Util.IO.UnionInputStreamTest.TestReadByteBlocks" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                      <test-case name="NGit.Util.IO.UnionInputStreamTest.TestReadSingleBytes" executed="True" result="Success" success="True" time="0.001" asserts="18" />
                      <test-case name="NGit.Util.IO.UnionInputStreamTest.TestSkip" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NBTest" executed="True" result="Success" success="True" time="0.019" asserts="0">
                <results>
                  <test-case name="NGit.Util.NBTest.TestCompareUInt32" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                  <test-case name="NGit.Util.NBTest.TestDecodeInt32" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                  <test-case name="NGit.Util.NBTest.TestDecodeUInt16" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                  <test-case name="NGit.Util.NBTest.TestDecodeUInt32" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                  <test-case name="NGit.Util.NBTest.TestDecodeUInt64" executed="True" result="Success" success="True" time="0.002" asserts="14" />
                  <test-case name="NGit.Util.NBTest.TestEncodeInt16" executed="True" result="Success" success="True" time="0.001" asserts="112" />
                  <test-case name="NGit.Util.NBTest.TestEncodeInt32" executed="True" result="Success" success="True" time="0.001" asserts="144" />
                  <test-case name="NGit.Util.NBTest.TestEncodeInt64" executed="True" result="Success" success="True" time="0.001" asserts="176" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="QuotedStringBourneStyleTest" executed="True" result="Success" success="True" time="0.018" asserts="0">
                <results>
                  <test-case name="NGit.Util.QuotedStringBourneStyleTest.TestDequote_BareA" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringBourneStyleTest.TestDequote_BareABCZ_OnlyBC" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringBourneStyleTest.TestDequote_Empty1" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringBourneStyleTest.TestDequote_Empty2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringBourneStyleTest.TestDequote_LoneBackslash" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringBourneStyleTest.TestDequote_NamedEscapes" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Util.QuotedStringBourneStyleTest.TestDequote_SoleSq" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringBourneStyleTest.TestQuote_BareA" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Util.QuotedStringBourneStyleTest.TestQuote_Empty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringBourneStyleTest.TestQuote_NamedEscapes" executed="True" result="Success" success="True" time="0.000" asserts="12" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="QuotedStringBourneUserPathStyleTest" executed="True" result="Success" success="True" time="0.025" asserts="0">
                <results>
                  <test-case name="NGit.Util.QuotedStringBourneUserPathStyleTest.TestDequote_BareA" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringBourneUserPathStyleTest.TestDequote_BareABCZ_OnlyBC" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringBourneUserPathStyleTest.TestDequote_Empty1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringBourneUserPathStyleTest.TestDequote_Empty2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringBourneUserPathStyleTest.TestDequote_LoneBackslash" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringBourneUserPathStyleTest.TestDequote_NamedEscapes" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Util.QuotedStringBourneUserPathStyleTest.TestDequote_SoleSq" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringBourneUserPathStyleTest.TestDequote_User" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NGit.Util.QuotedStringBourneUserPathStyleTest.TestQuote_BareA" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                  <test-case name="NGit.Util.QuotedStringBourneUserPathStyleTest.TestQuote_Empty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringBourneUserPathStyleTest.TestQuote_NamedEscapes" executed="True" result="Success" success="True" time="0.000" asserts="12" />
                  <test-case name="NGit.Util.QuotedStringBourneUserPathStyleTest.TestQuote_User" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="QuotedStringGitPathStyleTest" executed="True" result="Success" success="True" time="0.037" asserts="0">
                <results>
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestDequote_BareA" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestDequote_BareABCZ_OnlyBC" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestDequote_Empty1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestDequote_Empty2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestDequote_FooTabBar" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestDequote_Latin1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestDequote_LoneBackslash" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestDequote_NamedEscapes" executed="True" result="Success" success="True" time="0.000" asserts="9" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestDequote_OctalAll" executed="True" result="Success" success="True" time="0.001" asserts="255" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestDequote_RawLatin1" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Mono does not handle this kind of string escaping]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestDequote_RawUTF8" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Mono does not handle this kind of string escaping]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestDequote_SoleDq" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestDequote_UnknownEscapeQ" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestDequote_UTF8" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestQuote_Ang" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestQuote_BareA" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestQuote_Empty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestQuote_NamedEscapes" executed="True" result="Success" success="True" time="0.000" asserts="27" />
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestQuote_OctalAll" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Mono does not handle this kind of string escaping]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NGit.Util.QuotedStringGitPathStyleTest.TestQuoteAtAndNumber" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RawCharUtilTest" executed="True" result="Success" success="True" time="0.005" asserts="0">
                <results>
                  <test-case name="NGit.Util.RawCharUtilTest.TestIsWhitespace" executed="True" result="Success" success="True" time="0.000" asserts="255" />
                  <test-case name="NGit.Util.RawCharUtilTest.TestTrimLeadingWhitespace" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                  <test-case name="NGit.Util.RawCharUtilTest.TestTrimTrailingWhitespace" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RawParseUtils_FormatTest" executed="True" result="Success" success="True" time="0.001" asserts="0">
                <results>
                  <test-case name="NGit.Util.RawParseUtils_FormatTest.TestFormatBase10" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RawParseUtils_HexParseTest" executed="True" result="Success" success="True" time="0.005" asserts="0">
                <results>
                  <test-case name="NGit.Util.RawParseUtils_HexParseTest.TestInt16" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                  <test-case name="NGit.Util.RawParseUtils_HexParseTest.TestInt32" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NGit.Util.RawParseUtils_HexParseTest.TestInt4_1" executed="True" result="Success" success="True" time="0.000" asserts="22" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RawParseUtils_LineMapTest" executed="True" result="Success" success="True" time="0.009" asserts="0">
                <results>
                  <test-case name="NGit.Util.RawParseUtils_LineMapTest.TestEmpty" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Util.RawParseUtils_LineMapTest.TestFourLineBlanks" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                  <test-case name="NGit.Util.RawParseUtils_LineMapTest.TestOneBlankLine" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Util.RawParseUtils_LineMapTest.TestTwoLineFooBar" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NGit.Util.RawParseUtils_LineMapTest.TestTwoLineNoLF" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RawParseUtils_MatchTest" executed="True" result="Success" success="True" time="0.006" asserts="0">
                <results>
                  <test-case name="NGit.Util.RawParseUtils_MatchTest.TestMatch_Equal" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.RawParseUtils_MatchTest.TestMatch_NotEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.RawParseUtils_MatchTest.TestMatch_Prefix" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Util.RawParseUtils_MatchTest.TestMatch_TooSmall" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RawParseUtils_ParsePersonIdentTest" executed="True" result="Success" success="True" time="0.007" asserts="0">
                <results>
                  <test-case name="NGit.Util.RawParseUtils_ParsePersonIdentTest.TestParsePersonIdent_fuzzyCases" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Util.RawParseUtils_ParsePersonIdentTest.TestParsePersonIdent_incompleteCases" executed="True" result="Success" success="True" time="0.001" asserts="11" />
                  <test-case name="NGit.Util.RawParseUtils_ParsePersonIdentTest.TestParsePersonIdent_legalCases" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                  <test-case name="NGit.Util.RawParseUtils_ParsePersonIdentTest.TestParsePersonIdent_malformedCases" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RawParseUtilsTest" executed="True" result="Success" success="True" time="0.005" asserts="0">
                <results>
                  <test-case name="NGit.Util.RawParseUtilsTest.TestParseEncoding_Accept_Latin_One_AsISO8859_1" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Util.RawParseUtilsTest.TestParseEncoding_badEncoding" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.RawParseUtilsTest.TestParseEncoding_ISO8859_1_encoding" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ReadLinesTest" executed="True" result="Success" success="True" time="0.010" asserts="0">
                <results>
                  <test-case name="NGit.Util.ReadLinesTest.TestReadLines_CRLF" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="NGit.Util.ReadLinesTest.TestReadLines_endCRLF" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.ReadLinesTest.TestReadLines_endLF" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.ReadLinesTest.TestReadLines_LF" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.ReadLinesTest.TestReadLines_mixed" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.ReadLinesTest.TestReadLines_singleLine" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RefListTest" executed="True" result="Success" success="True" time="0.048" asserts="0">
                <results>
                  <test-case name="NGit.Util.RefListTest.TestAddToEmptyList" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NGit.Util.RefListTest.TestAddToEndOfList" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NGit.Util.RefListTest.TestAddToFrontOfList" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NGit.Util.RefListTest.TestAddToMiddleOfListByInsertionPosition" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Util.RefListTest.TestBuilder_AddAll" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Util.RefListTest.TestBuilder_AddThenSort" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                  <test-case name="NGit.Util.RefListTest.TestBuilder_Remove" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Util.RefListTest.TestBuilder_Set" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Util.RefListTest.TestBuilder_ToString" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.RefListTest.TestCopyConstructorReusesArray" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.RefListTest.TestCopyLeadingPrefix" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                  <test-case name="NGit.Util.RefListTest.TestEmpty" executed="True" result="Success" success="True" time="0.002" asserts="7" />
                  <test-case name="NGit.Util.RefListTest.TestEmptyBuilder" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                  <test-case name="NGit.Util.RefListTest.TestFindContainsGet" executed="True" result="Success" success="True" time="0.001" asserts="17" />
                  <test-case name="NGit.Util.RefListTest.TestIterable" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NGit.Util.RefListTest.TestPutNewEntry" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                  <test-case name="NGit.Util.RefListTest.TestPutReplaceEntry" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                  <test-case name="NGit.Util.RefListTest.TestRemoveEndOfList" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                  <test-case name="NGit.Util.RefListTest.TestRemoveFrontOfList" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                  <test-case name="NGit.Util.RefListTest.TestRemoveMakesEmpty" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Util.RefListTest.TestRemoveMiddleOfList" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                  <test-case name="NGit.Util.RefListTest.TestSet" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                  <test-case name="NGit.Util.RefListTest.TestToString" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RefMapTest" executed="True" result="Success" success="True" time="0.051" asserts="0">
                <results>
                  <test-case name="NGit.Util.RefMapTest.TestClear" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NGit.Util.RefMapTest.TestEmpty_NoPrefix1" executed="True" result="Success" success="True" time="0.002" asserts="7" />
                  <test-case name="NGit.Util.RefMapTest.TestEmpty_NoPrefix2" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                  <test-case name="NGit.Util.RefMapTest.TestEmpty_WithPrefix" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                  <test-case name="NGit.Util.RefMapTest.TestEntryType" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Util.RefMapTest.TestEntryTypeSet" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Util.RefMapTest.TestIterator_FailsAtEnd" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Util.RefMapTest.TestIterator_MissingUnresolvedSymbolicRefIsBug" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="NGit.Util.RefMapTest.TestIterator_RefusesRemove" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NGit.Util.RefMapTest.TestMerge_HeadMaster" executed="True" result="Success" success="True" time="0.001" asserts="10" />
                  <test-case name="NGit.Util.RefMapTest.TestMerge_PackedLooseLoose" executed="True" result="Success" success="True" time="0.001" asserts="12" />
                  <test-case name="NGit.Util.RefMapTest.TestMerge_WithPrefix" executed="True" result="Success" success="True" time="0.001" asserts="16" />
                  <test-case name="NGit.Util.RefMapTest.TestNotEmpty_NoPrefix" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NGit.Util.RefMapTest.TestNotEmpty_WithPrefix" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NGit.Util.RefMapTest.TestPut_CollapseResolved" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                  <test-case name="NGit.Util.RefMapTest.TestPut_KeyMustMatchName_NoPrefix" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="NGit.Util.RefMapTest.TestPut_KeyMustMatchName_WithPrefix" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="NGit.Util.RefMapTest.TestPut_NoPrefix" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                  <test-case name="NGit.Util.RefMapTest.TestPut_WithPrefix" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                  <test-case name="NGit.Util.RefMapTest.TestRemove" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NGit.Util.RefMapTest.TestToString_NoPrefix" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="NGit.Util.RefMapTest.TestToString_WithPrefix" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RelativeDateFormatterTest" executed="True" result="Success" success="True" time="0.015" asserts="0">
                <results>
                  <test-case name="NGit.Util.RelativeDateFormatterTest.TestFormatDays" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Util.RelativeDateFormatterTest.TestFormatHours" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Util.RelativeDateFormatterTest.TestFormatMinutes" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="NGit.Util.RelativeDateFormatterTest.TestFormatMonths" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NGit.Util.RelativeDateFormatterTest.TestFormatSeconds" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Util.RelativeDateFormatterTest.TestFormatWeeks" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Util.RelativeDateFormatterTest.TestFormatYears" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Util.RelativeDateFormatterTest.TestFormatYearsMonths" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NGit.Util.RelativeDateFormatterTest.TestFuture" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="StringUtilsTest" executed="True" result="Success" success="True" time="0.008" asserts="0">
                <results>
                  <test-case name="NGit.Util.StringUtilsTest.TestEqualsIgnoreCase1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.StringUtilsTest.TestEqualsIgnoreCase2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NGit.Util.StringUtilsTest.TestEqualsIgnoreCase3" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NGit.Util.StringUtilsTest.TestEqualsIgnoreCase4" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Util.StringUtilsTest.TestToLowerCaseChar" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NGit.Util.StringUtilsTest.TestToLowerCaseString" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TemporaryBufferTest" executed="True" result="Success" success="True" time="0.564" asserts="0">
                <results>
                  <test-case name="NGit.Util.TemporaryBufferTest.TestDestroyWhileOpen" executed="True" result="Success" success="True" time="0.022" asserts="0" />
                  <test-case name="NGit.Util.TemporaryBufferTest.TestEmpty" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="NGit.Util.TemporaryBufferTest.TestHeap" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.TemporaryBufferTest.TestInCoreInputStream" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NGit.Util.TemporaryBufferTest.TestInCoreLimit_SwitchBeforeAppendByte" executed="True" result="Success" success="True" time="0.144" asserts="6" />
                  <test-case name="NGit.Util.TemporaryBufferTest.TestInCoreLimit_SwitchOnAppendByte" executed="True" result="Success" success="True" time="0.048" asserts="6" />
                  <test-case name="NGit.Util.TemporaryBufferTest.TestInCoreLimit_SwitchOnCopy" executed="True" result="Success" success="True" time="0.091" asserts="6" />
                  <test-case name="NGit.Util.TemporaryBufferTest.TestLarge_SingleWrite" executed="True" result="Success" success="True" time="0.134" asserts="6" />
                  <test-case name="NGit.Util.TemporaryBufferTest.TestOneBlock_BulkWrite" executed="True" result="Success" success="True" time="0.002" asserts="6" />
                  <test-case name="NGit.Util.TemporaryBufferTest.TestOneBlockAndHalf_BulkWrite" executed="True" result="Success" success="True" time="0.002" asserts="6" />
                  <test-case name="NGit.Util.TemporaryBufferTest.TestOneBlockAndHalf_Copy" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NGit.Util.TemporaryBufferTest.TestOneBlockAndHalf_SingleWrite" executed="True" result="Success" success="True" time="0.002" asserts="6" />
                  <test-case name="NGit.Util.TemporaryBufferTest.TestOneByte" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NGit.Util.TemporaryBufferTest.TestRandomWrites" executed="True" result="Success" success="True" time="0.095" asserts="7" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ValidRefNameTest" executed="True" result="Success" success="True" time="0.028" asserts="0">
            <results>
              <test-case name="NGit.ValidRefNameTest.TestContainsDot" executed="True" result="Success" success="True" time="0.001" asserts="2" />
              <test-case name="NGit.ValidRefNameTest.TestEmptyString" executed="True" result="Success" success="True" time="0.001" asserts="2" />
              <test-case name="NGit.ValidRefNameTest.TestMustHaveTwoComponents" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="NGit.ValidRefNameTest.TestNoAsciiControlCharacters" executed="True" result="Success" success="True" time="0.001" asserts="32" />
              <test-case name="NGit.ValidRefNameTest.TestNoBareDot" executed="True" result="Success" success="True" time="0.000" asserts="4" />
              <test-case name="NGit.ValidRefNameTest.TestNoDirectorySuffix" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ValidRefNameTest.TestNoLeadingOrTrailingDot" executed="True" result="Success" success="True" time="0.001" asserts="4" />
              <test-case name="NGit.ValidRefNameTest.TestNoLockSuffix" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ValidRefNameTest.TestNoMagicRefCharacters" executed="True" result="Success" success="True" time="0.000" asserts="9" />
              <test-case name="NGit.ValidRefNameTest.TestNoSpace" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NGit.ValidRefNameTest.TestRefLogQueryIsValidRef" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="NGit.ValidRefNameTest.TestShellGlob" executed="True" result="Success" success="True" time="0.001" asserts="9" />
              <test-case name="NGit.ValidRefNameTest.TestUnicodeNames" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NGit.ValidRefNameTest.TestValidHead" executed="True" result="Success" success="True" time="0.000" asserts="4" />
              <test-case name="NGit.ValidRefNameTest.TestValidSpecialCharacters" executed="True" result="Success" success="True" time="0.001" asserts="24" />
              <test-case name="NGit.ValidRefNameTest.TestValidTag" executed="True" result="Success" success="True" time="0.001" asserts="1" />
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>